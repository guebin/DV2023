{
  "hash": "0c09dcf1624af7c93487aeb220565905",
  "result": {
    "markdown": "---\ntitle: \"06wk-2: 막대그래프, 심슨의 역설 (1)\"\nauthor: \"최규빈\"\ndate: \"10/11/2023\"\ndraft: false\ncategories:\n  - plotnine\n---\n\n<a href=\"https://colab.research.google.com/github/guebin/DV2023/blob/main/posts/06wk-2.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" style=\"text-align: left\"></a>\n\n# 1. 강의영상 \n\n{{<video https://youtu.be/playlist?list=PLQqh36zP38-z-Kqi6kdDdz-IDDrjJm-6X&si=10ts9i0Q_xf9DG2U >}}\n\n# 2. Imports\n\n::: {#a2009e37-1de9-4fb1-aa2b-af2337e5e540 .cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom plotnine import *\n```\n:::\n\n\n# 3. 비교를 위한 시각화\n\n## A. `geom_col()`\n\n`-` 예시1: 기본적인 막대그래프 \n\n::: {#5f0b5101-a921-4380-bd2a-1102f5eeada5 .cell tags='[]' execution_count=2}\n``` {.python .cell-code}\ndf = pd.DataFrame({'x':[0,1],'y':[40,60]})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#b9b9c19c-9d2f-4281-a44b-453afd4b4cab .cell tags='[]' execution_count=3}\n``` {.python .cell-code}\nfig = ggplot(df)\ncol = geom_col(aes(x='x',y='y'))\nfig + col\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-4-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n`-` 예시2: $x$축이 범주인 경우 \n\n::: {#64288a1e-4df0-4d62-bb54-4542dc1764d9 .cell tags='[]' execution_count=4}\n``` {.python .cell-code}\ndf = pd.DataFrame({'sex':['male','female'],'score':[40,60]})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#dca98060-ea37-4388-9c36-3c3d7dfdd9fd .cell tags='[]' execution_count=5}\n``` {.python .cell-code}\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score'))\nfig + col\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-6-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n`-` 예시3: 예시2에서 색깔로 구분하고 싶은 경우 \n\n::: {#5b941f28-3a1b-49c2-9bed-0d882ec93382 .cell tags='[]' execution_count=6}\n``` {.python .cell-code}\ndf = pd.DataFrame({'sex':['male','female'],'score':[40,60]})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#16536e07-03ef-4238-b9d2-b3c0b7e00e2b .cell tags='[]' execution_count=7}\n``` {.python .cell-code}\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score',fill='sex'))\nfig + col\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-8-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n`-` 예시4: 예시3에서 `scale_fill_manual()`을 이용하여 색상변경 하기 \n\n::: {#9194b062-2ffc-4e87-87fb-f93537448961 .cell tags='[]' execution_count=8}\n``` {.python .cell-code}\ndf = pd.DataFrame({'sex':['male','female'],'score':[40,60]})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f6eb0a8e-dc84-439c-90ef-4370686ab8ff .cell tags='[]' execution_count=9}\n``` {.python .cell-code}\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score',fill='sex'))\nfig + col + scale_fill_manual(['red','blue'])\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-10-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n## B. `facet_wrap()`\n\n`-` 예시1: `facet_wrap()`을 이용한 면분할 -- 반별로 면분할\n\n::: {#32b6774a-bc06-4bc3-87ac-d7e153fe64f4 .cell tags='[]' execution_count=10}\n``` {.python .cell-code}\ndf = pd.DataFrame({'sex':['male','female','male','female'],'score':[40,60,50,20],'class':['A','A','B','B']})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>score</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>40</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>60</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>male</td>\n      <td>50</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>female</td>\n      <td>20</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8caef210-9209-463b-adfc-e4a88c18c90f .cell tags='[]' execution_count=11}\n``` {.python .cell-code}\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score',fill='sex')) \nfig + col + facet_wrap('class')\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-12-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n`-` 예시2: `facet_wrap()`을 이용한 면분할 -- 성별로 면분할\n\n::: {#025ee8ab-1dea-4fa0-89dc-d5229e614927 .cell tags='[]' execution_count=12}\n``` {.python .cell-code}\ndf = pd.DataFrame({'sex':['male','female','male','female'],'score':[40,60,50,20],'class':['A','A','B','B']})\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>score</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>40</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>60</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>male</td>\n      <td>50</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>female</td>\n      <td>20</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#ef70e2ba-e766-40ec-95ed-cbd34d1a3b1b .cell tags='[]' execution_count=13}\n``` {.python .cell-code}\nfig = ggplot(df)\ncol = geom_col(aes(x='class',y='score',fill='sex')) \nfig + col + facet_wrap('sex')\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-14-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n# 4. 심슨의 역설\n\n`-` 버클리대학교의 입학데이터\n\n- <https://github.com/guebin/DV2023/blob/main/posts/ds.pdf>\n\n`-` 주장: 버클리대학에 gender bias가 존재한다. \n\n- 1973년 가을학기의 입학통계에 따르면 지원하는 남성이 여성보다 훨씬 많이 합격했고, 그 차이가 너무 커서 우연의 일치라 보기 어렵다. \n\n::: {#c2ce637c-b37f-4a8d-9fa3-f4fe710df9dd .cell tags='[]' execution_count=14}\n``` {.python .cell-code}\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>department</th>\n      <th>result</th>\n      <th>gender</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>fail</td>\n      <td>male</td>\n      <td>314</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>fail</td>\n      <td>female</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>pass</td>\n      <td>male</td>\n      <td>511</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>pass</td>\n      <td>female</td>\n      <td>89</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B</td>\n      <td>fail</td>\n      <td>male</td>\n      <td>208</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>B</td>\n      <td>fail</td>\n      <td>female</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>B</td>\n      <td>pass</td>\n      <td>male</td>\n      <td>352</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>B</td>\n      <td>pass</td>\n      <td>female</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>C</td>\n      <td>fail</td>\n      <td>male</td>\n      <td>204</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>C</td>\n      <td>fail</td>\n      <td>female</td>\n      <td>391</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>C</td>\n      <td>pass</td>\n      <td>male</td>\n      <td>121</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>C</td>\n      <td>pass</td>\n      <td>female</td>\n      <td>202</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>D</td>\n      <td>fail</td>\n      <td>male</td>\n      <td>279</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>D</td>\n      <td>fail</td>\n      <td>female</td>\n      <td>244</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>D</td>\n      <td>pass</td>\n      <td>male</td>\n      <td>138</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>D</td>\n      <td>pass</td>\n      <td>female</td>\n      <td>131</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>E</td>\n      <td>fail</td>\n      <td>male</td>\n      <td>137</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>E</td>\n      <td>fail</td>\n      <td>female</td>\n      <td>299</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>E</td>\n      <td>pass</td>\n      <td>male</td>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>E</td>\n      <td>pass</td>\n      <td>female</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>F</td>\n      <td>fail</td>\n      <td>male</td>\n      <td>149</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>F</td>\n      <td>fail</td>\n      <td>female</td>\n      <td>103</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>F</td>\n      <td>pass</td>\n      <td>male</td>\n      <td>224</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>F</td>\n      <td>pass</td>\n      <td>female</td>\n      <td>238</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## A. 시각화1: 전체합격률 시각화 -- pandas 초보 \n\n`-` 여성지원자의 합격률\n\n::: {#5803857e-8714-4e9e-ae9b-83451e5fa600 .cell tags='[]' execution_count=15}\n``` {.python .cell-code}\ndf.query('gender == \"female\" and result ==\"pass\"')['count'].sum() / df.query('gender == \"female\"')['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0.420708446866485\n```\n:::\n:::\n\n\n`-` 남성지원자의 합격률\n\n::: {#8c068f27-de20-4cd8-aec1-967f301448ff .cell tags='[]' execution_count=16}\n``` {.python .cell-code}\ndf.query('gender == \"male\" and result ==\"pass\"')['count'].sum() / df.query('gender == \"male\"')['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n0.5202526941657376\n```\n:::\n:::\n\n\n`-` 시각화 \n\n::: {#bdd1eb97-cdd4-4862-b09b-f147c3a19a9b .cell tags='[]' execution_count=17}\n``` {.python .cell-code}\ntidydata = pd.DataFrame({'male':[0.5202526941657376],'female':[0.420708446866485]})\ntidydata\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>male</th>\n      <th>female</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.520253</td>\n      <td>0.420708</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- 이렇게 데이터 프레임을 만들면 망해요 \n\n::: {#68ab588f-d230-4d98-bccd-c1e8248c538a .cell tags='[]' execution_count=18}\n``` {.python .cell-code}\ntidydata = pd.DataFrame({'sex':['male','female'],'rate':[0.5202526941657376,0.420708446866485]})\ntidydata\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>rate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>male</td>\n      <td>0.520253</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>female</td>\n      <td>0.420708</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#20066d2d-46ea-450a-8e00-f7a8747560de .cell tags='[]' execution_count=19}\n``` {.python .cell-code}\nfig = ggplot(tidydata)\ncol = geom_col(aes(x='sex',y='rate',fill='sex'))\nfig + col\n```\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-20-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n## B. 시각화1: 전체합격률 시각화 -- pandas 고수 \n\n::: {#fc33ff6b-dfda-441f-ae96-3b0086bb0fd7 .cell tags='[]' execution_count=20}\n``` {.python .cell-code}\ndf.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_3693597/1414298521.py:1: FutureWarning: The provided callable <built-in function sum> is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>result</th>\n      <th>fail</th>\n      <th>pass</th>\n    </tr>\n    <tr>\n      <th>gender</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>female</th>\n      <td>1063</td>\n      <td>772</td>\n    </tr>\n    <tr>\n      <th>male</th>\n      <td>1291</td>\n      <td>1400</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#80510459-baf2-40eb-adb4-a0bf2ac33082 .cell tags='[]' execution_count=21}\n``` {.python .cell-code}\ndf.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass'] / (_df['fail'] + _df['pass']))\\\n.reset_index()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_3693597/3036569198.py:1: FutureWarning: The provided callable <built-in function sum> is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>result</th>\n      <th>gender</th>\n      <th>fail</th>\n      <th>pass</th>\n      <th>rate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>female</td>\n      <td>1063</td>\n      <td>772</td>\n      <td>0.420708</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>male</td>\n      <td>1291</td>\n      <td>1400</td>\n      <td>0.520253</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#91d462eb-495d-4f10-b7d6-79dcf9a100e0 .cell tags='[]' execution_count=22}\n``` {.python .cell-code}\ntidydata = df.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass'] / (_df['fail'] + _df['pass']))\\\n.reset_index()\n\nfig = ggplot(tidydata) \ncol = geom_col(aes(x='gender',y='rate',fill='gender'))\nfig + col \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_3693597/1840989269.py:1: FutureWarning: The provided callable <built-in function sum> is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](06wk-2_files/figure-html/cell-23-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n# 5. HW\n\n적당한 데이터프레임을 선언하고 아래와 같은 barplot을 그려라. \n\n::: {#171ad097-33f3-4821-96c9-f5891a261c48 .cell execution_count=23}\n``` {.python .cell-code}\n#\n```\n:::\n\n\n",
    "supporting": [
      "06wk-2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}