[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "데이터 시각화 (2023)",
    "section": "",
    "text": "질문하는 방법\n\n카카오톡: 질문하러 가기 // 학기종료이후 폐쇄함\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 카카오톡이나 이메일로 미리 시간을 정할 것\nLMS쪽지: https://ieilms.jbnu.ac.kr/\n\n기출문제\n\n2021-중간: https://guebin.github.io/DV2021/2021/11/08/midsol.html\n2021-기말: https://guebin.github.io/DV2021/2021/12/03/데이터시각화-기말고사.html, 1~2번 풀이\n2022-중간: https://guebin.github.io/DV2022/posts/2022-10-30-9wk-1-mid.html\n2022-기말: https://guebin.github.io/DV2022/posts/2022-12-19-final.html\n\n강의노트\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nSep 4, 2023\n\n\n01wk-1\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/01wk-1.html",
    "href": "posts/01wk-1.html",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "",
    "text": "박스플랏, 히스토그램"
  },
  {
    "objectID": "posts/01wk-1.html#motivating-example",
    "href": "posts/01wk-1.html#motivating-example",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "motivating example",
    "text": "motivating example\n- 통계란?\n- 평균 좋아해요?\n# 예제1 – 전북고등학교: 평균은 좋은 측정값인가?\n- 전북고등학교에서 통계학을 수업하는 A선생님과 B선생님의 있다.\n\ny1=[75,75,76,76,77,77,78,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들\ny2=[76,76,77,77,78,78,79,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 \n\n- 어떤반이 더 공부를 잘할까?, 누가 더 잘 가르칠까?\n\nnp.mean(y1)\n\n79.0\n\n\n\nnp.mean(y2)\n\n78.2\n\n\n- 의사결정: A선생님에게 배운 학생들의 평균이 더 높다. -&gt; A선생님이 더 강의를 잘 하셨다?\n- 반론: 평균은 A반(=A선생님에게 통계학을 배운 반)이 더 높다. 그런데 98점을 받은 학생이 A반에 포함되어서 A반이 전체평균이 높게 나온것이고 나머지 학생들은 전체적으로 B반 학생들이 더 시험을 잘 보았다고 해석할 수 있다.\n- 교훈: 단순한 평균비교보다 학생들이 받은 점수의 분포를 비교해보는 것이 중요하다. 분포를 살펴보는 방법 중 유용한 방법이 박스플랏이다.\n#"
  },
  {
    "objectID": "posts/01wk-1.html#matplotlib으로-boxplot-그리기",
    "href": "posts/01wk-1.html#matplotlib으로-boxplot-그리기",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "matplotlib으로 boxplot 그리기",
    "text": "matplotlib으로 boxplot 그리기\n- A반 학생들의 박스플랏 그리기\n\nplt.boxplot(y1);\n\n\n\n\n- B반 학생들의 박스플랏 그리기\n\nplt.boxplot(y2);\n\n\n\n\n- A반 학생들의 점수와 B반 학생들의 점수를 나란히 박스플랏으로 그리자.\n\nplt.boxplot([y1,y2]);"
  },
  {
    "objectID": "posts/01wk-1.html#boxplot이란",
    "href": "posts/01wk-1.html#boxplot이란",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "boxplot이란?",
    "text": "boxplot이란?\n- Galarnyk (2023)\n\nGalarnyk, Michael. 2023. “Python_tutorials.” https://github.com/mGalarnyk/Python_Tutorials.\n\nhttps://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/box_plot.ipynb\n\n\n\nCode\nnp.random.seed(916170)\n\n# connection path is here: https://stackoverflow.com/questions/6146290/plotting-a-line-over-several-graphs\nmu, sigma = 0, 1 # mean and standard deviation\ns = np.random.normal(mu, sigma, 1000)\n\nfig, axes = plt.subplots(nrows = 1, ncols = 1, figsize=(10, 5))\n\n# rectangular box plot\nbplot = axes.boxplot(s,\n                vert=False,\n                patch_artist=True, \n                showfliers=True, # This would show outliers (the remaining .7% of the data)\n                positions = [0],\n                boxprops = dict(linestyle='--', linewidth=2, color='Black', facecolor = 'red', alpha = .4),\n                medianprops = dict(linestyle='-', linewidth=2, color='Yellow'),\n                whiskerprops = dict(linestyle='-', linewidth=2, color='Blue', alpha = .4),\n                capprops = dict(linestyle='-', linewidth=2, color='Black'),\n                flierprops = dict(marker='o', markerfacecolor='green', markersize=10,\n                  linestyle='none', alpha = .4),\n                widths = .3,\n                zorder = 1)   \n\naxes.set_xlim(-4, 4)\nplt.xticks(fontsize = 14)\n\naxes.set_yticks([])\naxes.annotate(r'',\n            xy=(-.73, .205), xycoords='data',\n            xytext=(.66, .205), textcoords='data',\n            arrowprops=dict(arrowstyle=\"|-|\",\n                            connectionstyle=\"arc3\")\n            );\n\naxes.text(0, .25, \"Interquartile Range \\n(IQR)\",  horizontalalignment='center', fontsize=18)\naxes.text(0, -.21, r\"Median\", horizontalalignment='center', fontsize=16);\naxes.text(2.65, -.15, \"\\\"Maximum\\\"\", horizontalalignment='center', fontsize=18);\naxes.text(-2.65, -.15, \"\\\"Minimum\\\"\", horizontalalignment='center', fontsize=18);\naxes.text(-.68, -.24, r\"Q1\", horizontalalignment='center', fontsize=18);\naxes.text(-2.65, -.21, r\"(Q1 - 1.5*IQR)\", horizontalalignment='center', fontsize=16);\naxes.text(.6745, -.24, r\"Q3\", horizontalalignment='center', fontsize=18);\naxes.text(.6745, -.30, r\"(75th Percentile)\", horizontalalignment='center', fontsize=12);\naxes.text(-.68, -.30, r\"(25th Percentile)\", horizontalalignment='center', fontsize=12);\naxes.text(2.65, -.21, r\"(Q3 + 1.5*IQR)\", horizontalalignment='center', fontsize=16);\n\naxes.annotate('Outliers', xy=(2.93,0.015), xytext=(2.52,0.20), fontsize = 18,\n            arrowprops={'arrowstyle': '-&gt;', 'color': 'black', 'lw': 2},\n            va='center');\n\naxes.annotate('Outliers', xy=(-3.01,0.015), xytext=(-3.41,0.20), fontsize = 18,\n            arrowprops={'arrowstyle': '-&gt;', 'color': 'black', 'lw': 2},\n            va='center');\n\n\n\n\n\n\n가장 큰 값이 100%, 가장 작은 값이 0%, 중간값이 50%"
  },
  {
    "objectID": "posts/01wk-1.html#boxplot을-언제-쓰면-좋을까",
    "href": "posts/01wk-1.html#boxplot을-언제-쓰면-좋을까",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "boxplot을 언제 쓰면 좋을까?",
    "text": "boxplot을 언제 쓰면 좋을까?\n- 박스플랏의 장점: 단순히 평균을 주는 것보다 데이터를 파악하고 직관을 얻기에 유리하다.\n- 박스플랏이 이용되는 범위:\n\n첫 데이터 분석때 자료 분포를 파악하기 용이\nKaggel등의 대회참여시, 두 개 이상의 모형의 성능을 비교"
  },
  {
    "objectID": "posts/01wk-1.html#motivating-example-1",
    "href": "posts/01wk-1.html#motivating-example-1",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "motivating example",
    "text": "motivating example\n- 전북고예제에서 우리의 소망: “A반 B반 중에 어떤 반이 공부를 더 잘하냐?”, “A선생님과 B선생님 중 어떤 분의 강의가 효과적이었다고 평할 수 있는가?” 와 같은 단순한 질문에 대한 대답\n\n보통 이러한 질문은 중심경향값 중 하나를 골라서 비교하면 되었다.\n여기에서 중심경향값이란 데이터 분포의 중심을 보여주는 값으로 자료 전체를 대표할 수 있는 값을 말함. 평균, 중앙값등이 대표적인 중심경향값이다.\n\n- 전북고예제에서는 “A반 B반 중에서 어떤 반이 공부를 더 잘하냐?” 라는 질문의 대답으로 단순평균비교로는 의미가 없었다. 오히려 결과론적으로 보면 중앙값이 더 타당해 보인다.\n- 그런데 사실 생각해보면 중앙값을 기준으로 B반이 공부를 더 잘했다고 주장하는 것도 애매하다. 어쨌든 가장 공부잘한 학생은 A반에 있으니까!\n\n에이 한명 뿐이잖아요? 라고 생각할 수 있는데 그 한명이 2명 3명으로 점점 늘어난다고 생각해보자, 합리적인 기준을 제시할 수 있는가?\n그리고 A반을 지도한 선생님이 영재를 지도하는데 특화된 선생님일수도 있잖아요?\n\n- 사실 “A반 B반중에 누가 더 공부를 잘하냐?” 라는 질문은 굉장히 대답하기 곤란한 질문이다. 왜냐하면\n\n이슈1: 단순 평균비교로 이러한 질문에 답을 하기 어렵다.\n이슈2: 박스플랏으로 전체분포를 파악해도 어떠한 반이 더 공부를 잘한다는 기준을 잡는게 애매하다.\n\n- 그런데 특수한 경우에는 “A반 B반중에 누가 더 공부를 잘하냐?” 라는 질문에 대한 대답을 깔끔하게 할 수 있다.\n# 예제2 – 정규분포 전북고등학교: 평균은 좋은 측정값인가?\n- A반과 B반의 통계학 성적이 아래와 같다고 하자.\n\nnp.random.seed(43052)\ny1 = np.random.randn(10000)\ny2 = np.random.randn(10000) + 0.5 \n\n\nnp.mean(y1),np.mean(y2)\n\n(-0.011790879905079434, 0.4979147460611458)\n\n\n\nnp.mean(y2) - np.mean(y1)\n\n0.5097056259662253\n\n\ny2의 값이 y1의 값보다 전체적으로 0.5097056259662253 정도 높다고 볼 수 있다?\n\nplt.boxplot([y1,y2]);\n\n\n\n\n\n분포의 모양이 거의 비슷, 왼쪽그림을 컨트롤+C 하여 오른쪽에 붙인다음 0.5정도 y축으로 올린느낌이다!\n\n- 여기에서는 “B반의 성적 \\(\\approx\\) A반의 성적 + 0.5” 라고 주장해도 큰 무리가 없어보인다. 따라서 이 경우에는 “A반 B반 중에 어떤반이 더 공부를 잘하냐?” 라는 질문에 대하여 “B반이 평균적으로 0.5점정도 더 공부를 잘합니다” 라고 대답해도 괜찮다.\n\n이 예제에서는 우연히 극단적인 학생이 없었음.\n그렇지만 혹시 극단적인 학생이 나온다면? 걱징X. 너무 극단적인 값이 많이 나오면 정규분포가 아님 + 만약에 어떠한 반에서 극단적인 학생이 나온다면 똑같은 확률로 다른반 역시 그러한 극단적 학생이 나올 것\n\n- 결론: 정규분포 분포가정을 한다면 이슈1,2에 대한 문제를 한번에 해결가능 함\n#\n- 정규분포가정은 어떻게 할 수 있나? (= 데이터를 보고 어떻게 정규분포라고 알 수 있는가?): 데이터의 히스토그램을 그려서 종 모양이 되는지 확인해본다.1\n1 아직 초보단계라서 이것밖에 모를 수 있어요\nhistogram 이란?\n- 히스토그램: X축이 변수의 구간, Y축은 그 구간에 포함된 빈도를 의미하는 그림\n\n\nhistogram 그리기\n- 히스토그램의 예시1 – 기본플랏, ;으로 결과 생략하기\n\ny=[10,11,12,15,16,20,21,22,23,24,25]\n\n\nplt.hist(y)\n\n(array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]),\n array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\nplt.hist(y,bins=10)\n\n(array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]),\n array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n- 히스토그램 예시2 – bins 옵션이용\n\nplt.hist(y,bins=3)\n\n(array([3., 2., 6.]),\n array([10., 15., 20., 25.]),\n &lt;BarContainer object of 3 artists&gt;)\n\n\n\n\n\n- 히스토그램 예시3 – bins=3 옵션의 결과값 해석\n\nplt.hist(y,bins=3)\n\n(array([3., 2., 6.]),\n array([10., 15., 20., 25.]),\n &lt;BarContainer object of 3 artists&gt;)\n\n\n\n\n\n\n가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다.\nrange / bins = 15 / 3 = 5 이므로 각 구간의 간격은 5이다.\n구간은 [10,15), [15,20), [20,25] 로 나눈다.\n각 구간에 포함된 자료의 수는 3,2,6 이다.\n\n- 히스토그램 예시4 – bins=7 옵션의 결과값 해석\n\nplt.hist(y,bins=7) \n\n(array([3., 0., 2., 0., 1., 2., 3.]),\n array([10.        , 12.14285714, 14.28571429, 16.42857143, 18.57142857,\n        20.71428571, 22.85714286, 25.        ]),\n &lt;BarContainer object of 7 artists&gt;)\n\n\n\n\n\n\n가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다.\nrange / bins = 15 / 7 = 2.142857142857143 이므로 각 구간의 간격은 2.142857142857143이다.\n구간은 [10,12.14285714), [12.14285714,14.28571429,), [22.85714286,25] 로 나눈다.\n각 구간에 포함된 자료의 수는 3,0,2,0,1,2,3 이다.\n\n- 히스토그램 예시5 – range 옵션\n\nplt.hist(y,bins=7,range=[0,30]) # range를 변경하면 --&gt; 구간도 달라짐\n\n(array([0., 0., 3., 2., 2., 4., 0.]),\n array([ 0.        ,  4.28571429,  8.57142857, 12.85714286, 17.14285714,\n        21.42857143, 25.71428571, 30.        ]),\n &lt;BarContainer object of 7 artists&gt;)\n\n\n\n\n\n- 히스토그램 예시6 – 나란히 그리기\n\nnp.random.seed(43052)\ny1 = np.random.randn(10000)\ny2 = np.random.randn(10000) + 0.5 \nplt.hist([y1,y2],bins=100);"
  },
  {
    "objectID": "posts/01wk-1.html#예비학습1-이미지자료-다운로드",
    "href": "posts/01wk-1.html#예비학습1-이미지자료-다운로드",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "예비학습1: 이미지자료 다운로드",
    "text": "예비학습1: 이미지자료 다운로드\n- ref: https://en.wikipedia.org/wiki/Histogram_equalization\n\n!wget https://upload.wikimedia.org/wikipedia/commons/0/08/Unequalized_Hawkes_Bay_NZ.jpg\nimg = cv2.imread('Unequalized_Hawkes_Bay_NZ.jpg')\n!rm Unequalized_Hawkes_Bay_NZ.jpg\n\n--2023-09-04 11:59:07--  https://upload.wikimedia.org/wikipedia/commons/0/08/Unequalized_Hawkes_Bay_NZ.jpg\nResolving upload.wikimedia.org (upload.wikimedia.org)... 103.102.166.240, 2001:df2:e500:ed1a::2:b\nConnecting to upload.wikimedia.org (upload.wikimedia.org)|103.102.166.240|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 110895 (108K) [image/jpeg]\nSaving to: ‘Unequalized_Hawkes_Bay_NZ.jpg’\n\nUnequalized_Hawkes_ 100%[===================&gt;] 108.30K   572KB/s    in 0.2s    \n\n2023-09-04 11:59:07 (572 KB/s) - ‘Unequalized_Hawkes_Bay_NZ.jpg’ saved [110895/110895]\n\n\n\n\n!wget 주소: 주소에 있는 이미지를 다운로드\n!rm 파일이름: 현재폴더에 “파일이름”을 삭제\n\n\nplt.imshow(img)\n\n&lt;matplotlib.image.AxesImage at 0x7f52f5c70ed0&gt;\n\n\n\n\n\n\n다운받은 이미지를 보는 방법"
  },
  {
    "objectID": "posts/01wk-1.html#예비학습2-이미지자료의-이해",
    "href": "posts/01wk-1.html#예비학습2-이미지자료의-이해",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "예비학습2: 이미지자료의 이해",
    "text": "예비학습2: 이미지자료의 이해\n\n비밀1: 이미지는 사실 숫자들의 집합이었음.\n- 예시1 – 2d array = 흑백이미지\n\n_img1 = np.array([0,30,90,120,150,180,210,240,255]).reshape(3,3)\n_img1\n\narray([[  0,  30,  90],\n       [120, 150, 180],\n       [210, 240, 255]])\n\n\n\nplt.imshow(_img1,cmap='gray')\nplt.colorbar()\n\n&lt;matplotlib.colorbar.Colorbar at 0x7f385a14c450&gt;\n\n\n\n\n\n- 예시2 – 2d array = 흑백이미지\n\n_img2 = np.array([0,20,40,60,80,100,120,140,160]).reshape(3,3)\n_img2\n\narray([[  0,  20,  40],\n       [ 60,  80, 100],\n       [120, 140, 160]])\n\n\n\nplt.imshow(_img2,cmap='gray',vmin=0,vmax=255)\nplt.colorbar()\n\n&lt;matplotlib.colorbar.Colorbar at 0x7f385a04e590&gt;\n\n\n\n\n\n- 예시3 – 나란히 그리기\n\n_img3 = np.concatenate([_img1,_img2],axis=1)\n_img3\n\narray([[  0,  30,  90,   0,  20,  40],\n       [120, 150, 180,  60,  80, 100],\n       [210, 240, 255, 120, 140, 160]])\n\n\n\nplt.imshow(_img3,cmap='gray')\n\n&lt;matplotlib.image.AxesImage at 0x7f3859fda8d0&gt;\n\n\n\n\n\n\n\n비밀2: 칼라이미지는 red + green + blue 의 조합으로 표현가능 (다른방식도 가능)\n- ref: https://en.wikipedia.org/wiki/RGB_color_model\n\n\n\n그림 ??: 위키에서 긁은 그림, 빛의 3원색을 표현하고 있음\n\n\n- 예시1 – 3d array = 칼라이미지\n\nr = np.array(\n    [[  0,   0,   0,   0,   0],\n     [  0,   0,   0,   0,   0],\n     [255, 255, 255, 255, 255],\n     [255, 255, 255, 255, 255],\n     [255, 255, 255, 255, 255]]\n)\ng = np.array(\n    [[255, 255, 255,  0,   0],\n     [255, 255, 255,  0,   0],\n     [255, 255, 255,  0,   0],\n     [  0,   0,   0,  0,   0],\n     [  0,   0,   0,  0,   0]]\n)\nb = np.array(\n    [[  0,   0, 255, 255, 255],\n     [  0,   0, 255, 255, 255],\n     [  0,   0, 255, 255, 255],\n     [  0,   0,   0,   0,   0],\n     [  0,   0,   0,   0,   0]]\n)\nz = np.array(\n    [[ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0]]\n)    \n\n\nred = np.stack([r,z,z],axis=-1)\ngreen = np.stack([z,g,z],axis=-1)\nblue = np.stack([z,z,b],axis=-1)\n\n\nplt.imshow(red)\n\n&lt;matplotlib.image.AxesImage at 0x7f1c17b5a010&gt;\n\n\n\n\n\n\nplt.imshow(green)\n\n&lt;matplotlib.image.AxesImage at 0x7f1c17909ed0&gt;\n\n\n\n\n\n\nplt.imshow(blue)\n\n&lt;matplotlib.image.AxesImage at 0x7f1c178b1a10&gt;\n\n\n\n\n\n\nplt.imshow(red+green+blue)\n\n&lt;matplotlib.image.AxesImage at 0x7f1c176f1ed0&gt;\n\n\n\n\n\n- 예시2: R,G,B를 같은 비율로 섞으면 다시 흑백이미지가 된다.\n\narr2 = np.array(\n    [[10,  40],\n     [80,  60]]\n)\narr2\n\narray([[10, 40],\n       [80, 60]])\n\n\n\narr3 = np.stack([arr2,arr2,arr2],axis=-1)\nplt.imshow(arr3)\n\n&lt;matplotlib.image.AxesImage at 0x7f52ef74a550&gt;\n\n\n\n\n\n\nplt.imshow(arr2,cmap='gray',vmin=0,vmax=255)\nplt.colorbar()\n\n&lt;matplotlib.colorbar.Colorbar at 0x7f52ef5011d0&gt;"
  },
  {
    "objectID": "posts/01wk-1.html#히스토그램-이퀄라이제이션",
    "href": "posts/01wk-1.html#히스토그램-이퀄라이제이션",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "히스토그램 이퀄라이제이션",
    "text": "히스토그램 이퀄라이제이션\n- 우리가 관심있었던 이미지\n\nplt.imshow(img)\n\n&lt;matplotlib.image.AxesImage at 0x7fd835dd4890&gt;\n\n\n\n\n\n- 이미지를 rgb로 각각 분리하고 각 색깔들의 히스토그램을 그려보자.\n\nr = img[:,:,0]\ng = img[:,:,1]\nb = img[:,:,2]\n\n\nplt.hist(r.reshape(-1),range=(0,255),bins=255);\n\n\n\n\n\n120-200 사이에 값이 몰려있음\n만약에 120-200까지의 분포된 모양은 그대로 유지하면서 range를 0-255 까지 늘린다면?\n\n- cv2.equalizeHist()를 이용하여 분포의 모양은 대략적으로 유지하면서 값을 퍼트리자!\n\nrr = cv2.equalizeHist(r)\ngg = cv2.equalizeHist(g)\nbb = cv2.equalizeHist(b)\n\n\nplt.hist(r.reshape(-1),bins=255, range=[0,255],label='befor');\nplt.hist(rr.reshape(-1),bins=255,range=[0,255],label='after');\nplt.legend()\n\n&lt;matplotlib.legend.Legend at 0x7f52ef3197d0&gt;\n\n\n\n\n\n- 변환이후의 이미지를 그려본다면?\n\nimg2 = np.stack([rr,gg,bb],axis=-1)\n\n\nplt.imshow(img2)\n\n&lt;matplotlib.image.AxesImage at 0x7f52ce3a3810&gt;\n\n\n\n\n\n\nplt.imshow(np.concatenate([img,img2],axis=1))\n\n&lt;matplotlib.image.AxesImage at 0x7f52cde1b290&gt;"
  }
]