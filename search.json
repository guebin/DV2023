[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "데이터 시각화 (2023)",
    "section": "",
    "text": "질문하는 방법\n\n카카오톡: 질문하러 가기 // 학기종료이후 폐쇄함\n이메일: guebin@jbnu.ac.kr\n직접방문: 자연과학대학 본관 205호\nZoom: 카카오톡이나 이메일로 미리 시간을 정할 것\nLMS쪽지: https://ieilms.jbnu.ac.kr/\n\n기출문제\n\n2021-중간: https://guebin.github.io/DV2021/2021/11/08/midsol.html\n2021-기말: https://guebin.github.io/DV2021/2021/12/03/데이터시각화-기말고사.html, 1~2번 풀이\n2022-중간: https://guebin.github.io/DV2022/posts/2022-10-30-9wk-1-mid.html\n2022-기말: https://guebin.github.io/DV2022/posts/2022-12-19-final.html\n\n공지사항\n\n휴강: 9월27일(60), 10월2일(120), 10월9일(120), 11월6일(60)\n보충: supp-1(75), supp-2(30), 중간고사 지연제출함 관련공지(35)\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nDec 18, 2023\n\n\n15wk-2: 기말고사 (예상문제)\n\n\n최규빈 \n\n\n\n\nDec 4, 2023\n\n\n14wk-1: Quarto – dashboards\n\n\n최규빈 \n\n\n\n\nNov 29, 2023\n\n\n13wk-2: Pandas – apply, map, applymap\n\n\n최규빈 \n\n\n\n\nNov 27, 2023\n\n\n13wk-1: Plotly – pio, go 를 활용한 시각화\n\n\n최규빈 \n\n\n\n\nNov 22, 2023\n\n\n12wk-2: NYCTaxi 자료 분석 (2)\n\n\n최규빈 \n\n\n\n\nNov 20, 2023\n\n\n12wk-1: NYCTaxi 자료 분석 (1)\n\n\n최규빈 \n\n\n\n\nNov 15, 2023\n\n\n11wk-2: Choropleth (plotly)\n\n\n최규빈 \n\n\n\n\nNov 13, 2023\n\n\n11wk-1: Choropleth (folium)\n\n\n최규빈 \n\n\n\n\nNov 10, 2023\n\n\nsupp-4: 중간고사 풀이\n\n\n최규빈 \n\n\n\n\nNov 8, 2023\n\n\n10wk-2: Plotly – 판다스 백엔드\n\n\n최규빈 \n\n\n\n\nNov 6, 2023\n\n\n10wk-1: 야후 finance, 출산율 자료 시각화\n\n\n최규빈 \n\n\n\n\nNov 1, 2023\n\n\n09wk-2: 훌륭한 시각화 (2)\n\n\n최규빈 \n\n\n\n\nOct 30, 2023\n\n\n09wk-1: 중간고사\n\n\n최규빈 \n\n\n\n\nOct 26, 2023\n\n\nsupp-3: 중간고사 관련 안내사항\n\n\n최규빈 \n\n\n\n\nOct 25, 2023\n\n\n08wk-2: Pandas – groupby, 데이터프레임의 결합\n\n\n최규빈 \n\n\n\n\nOct 23, 2023\n\n\n08wk-1: 에너지사용량 시각화\n\n\n최규빈 \n\n\n\n\nOct 16, 2023\n\n\n07wk-2: Pandas – pivot_table, groupby+agg\n\n\n최규빈 \n\n\n\n\nOct 16, 2023\n\n\n07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack\n\n\n최규빈 \n\n\n\n\nOct 15, 2023\n\n\nsupp-2: 심슨의 역설 (2)\n\n\n최규빈 \n\n\n\n\nOct 11, 2023\n\n\n06wk-2: 막대그래프, 심슨의 역설 (1)\n\n\n최규빈 \n\n\n\n\nOct 6, 2023\n\n\nsupp-1: FIFA23 자료의 시각화\n\n\n최규빈 \n\n\n\n\nOct 5, 2023\n\n\n05wk-2: Pandas – transform column (꿀팁)\n\n\n최규빈 \n\n\n\n\nSep 25, 2023\n\n\n04wk-1: Pandas – 기본기능, missing, query, 할당, transform column\n\n\n최규빈 \n\n\n\n\nSep 20, 2023\n\n\n03wk-2: Pandas – 행과 열의 선택\n\n\n최규빈 \n\n\n\n\nSep 18, 2023\n\n\n03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병\n\n\n최규빈 \n\n\n\n\nSep 13, 2023\n\n\n02wk-2: Seaborn 간략한 소개, 훌륭한 시각화(1)\n\n\n최규빈 \n\n\n\n\nSep 11, 2023\n\n\n02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2\n\n\n최규빈 \n\n\n\n\nSep 6, 2023\n\n\n01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)\n\n\n최규빈 \n\n\n\n\nSep 4, 2023\n\n\n01wk-1: 박스플랏, 히스토그램\n\n\n최규빈 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/08wk-1.html#a.-pd.concat",
    "href": "posts/08wk-1.html#a.-pd.concat",
    "title": "08wk-1: 에너지사용량 시각화",
    "section": "A. pd.concat()",
    "text": "A. pd.concat()\n# 예시1 – 위아래로\n\ndf1 = pd.DataFrame({'A':[1,2,3],'B':[2,3,4]})\ndf2 = pd.DataFrame({'A':[-1,-2,-3],'B':[-2,-3,-4]})\n\n\ndisplay(\"df1\",df1)\ndisplay(\"df2\",df2)\n\n'df1'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n'df2'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n-1\n-2\n\n\n1\n-2\n-3\n\n\n2\n-3\n-4\n\n\n\n\n\n\n\n\n#pd.concat([df1,df2],axis=0) # (3,2) concat (3,2) -&gt; (6,4) \npd.concat([df1,df2])\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n0\n-1\n-2\n\n\n1\n-2\n-3\n\n\n2\n-3\n-4\n\n\n\n\n\n\n\n인덱스를 재정리하고 싶다면?\n\npd.concat([df1,df2]).reset_index(drop=True)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n3\n-1\n-2\n\n\n4\n-2\n-3\n\n\n5\n-3\n-4\n\n\n\n\n\n\n\n#\n# 예시2 – 좌우로\n\ndf1 = pd.DataFrame({'A':[1,2,3],'B':[2,3,4]})\ndf2 = pd.DataFrame({'C':[-1,-2,-3],'D':[-2,-3,-4]})\n\n\ndisplay(\"df1\",df1)\ndisplay(\"df2\",df2)\n\n'df1'\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n'df2'\n\n\n\n\n\n\n\n\n\nC\nD\n\n\n\n\n0\n-1\n-2\n\n\n1\n-2\n-3\n\n\n2\n-3\n-4\n\n\n\n\n\n\n\n\npd.concat([df1,df2],axis=1) # (3,2) concat (3,2) -&gt; (3,4) \n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n1\n2\n-1\n-2\n\n\n1\n2\n3\n-2\n-3\n\n\n2\n3\n4\n-3\n-4\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/08wk-1.html#b.-pd.merge",
    "href": "posts/08wk-1.html#b.-pd.merge",
    "title": "08wk-1: 에너지사용량 시각화",
    "section": "B. pd.merge()",
    "text": "B. pd.merge()\n\nbig = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\nsmall = pd.DataFrame({'department':['A','B'], 'total':[3,4]})\n\n\ndisplay(\"big\",big)\ndisplay(\"small\",small)\n\n'big'\n\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1\n\n\n\n\n\n\n\n'small'\n\n\n\n\n\n\n\n\n\ndepartment\ntotal\n\n\n\n\n0\nA\n3\n\n\n1\nB\n4\n\n\n\n\n\n\n\n\nbig.merge(small)\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\ntotal\n\n\n\n\n0\nA\nmale\n1\n3\n\n\n1\nA\nfemale\n2\n3\n\n\n2\nB\nmale\n3\n4\n\n\n3\nB\nfemale\n1\n4\n\n\n\n\n\n\n\n\nsmall.merge(big)\n\n\n\n\n\n\n\n\ndepartment\ntotal\ngender\ncount\n\n\n\n\n0\nA\n3\nmale\n1\n\n\n1\nA\n3\nfemale\n2\n\n\n2\nB\n4\nmale\n3\n\n\n3\nB\n4\nfemale\n1"
  },
  {
    "objectID": "posts/08wk-1.html#c.-.applymap",
    "href": "posts/08wk-1.html#c.-.applymap",
    "title": "08wk-1: 에너지사용량 시각화",
    "section": "C. .applymap()",
    "text": "C. .applymap()\n# 예시1\n\nnp.random.seed(43052)\ndf = pd.DataFrame({'A':np.random.rand(3), 'B':np.random.rand(3)})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n0.817682\n0.619777\n\n\n1\n0.049532\n0.122541\n\n\n2\n0.838686\n0.117128\n\n\n\n\n\n\n\n\ndf.applymap(lambda x: 'Yes' if x&gt;0.5 else 'No')\n\n/tmp/ipykernel_288950/1665022133.py:1: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\nYes\nYes\n\n\n1\nNo\nNo\n\n\n2\nYes\nNo\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/08wk-1.html#d.-df.astype",
    "href": "posts/08wk-1.html#d.-df.astype",
    "title": "08wk-1: 에너지사용량 시각화",
    "section": "D. df.astype()",
    "text": "D. df.astype()\n- 예시1\n\ndf = pd.DataFrame({'A':[0,1,2],'B':[4,5,6]})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n0\n4\n\n\n1\n1\n5\n\n\n2\n2\n6\n\n\n\n\n\n\n\n\ndf.astype(float)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n0.0\n4.0\n\n\n1\n1.0\n5.0\n\n\n2\n2.0\n6.0"
  },
  {
    "objectID": "posts/08wk-1.html#e.-제-아픈기억",
    "href": "posts/08wk-1.html#e.-제-아픈기억",
    "title": "08wk-1: 에너지사용량 시각화",
    "section": "E. 제 아픈기억",
    "text": "E. 제 아픈기억\n# 예제1 – object형은 일괄적으로 문자형임을 의미하는게 아님\n\nnp.random.seed(43052)\ndf = pd.DataFrame({'A':['1','2','0','1',2], 'B':['2','3','0','0',0]})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n0\n0\n\n\n3\n1\n0\n\n\n4\n2\n0\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5 entries, 0 to 4\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   A       5 non-null      object\n 1   B       5 non-null      object\ndtypes: object(2)\nmemory usage: 208.0+ bytes\n\n\n\ndf.A[0],df.A[4],df.B[0],df.B[4]\n\n('1', 2, '2', 0)\n\n\n#\n# 예제2 – column이름이 이상하게 들어가 있는 경우가 있음.\n\ndf = pd.DataFrame({('A',''):[0,0,0], ('B',''):[1,1,1]})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n\n\n\n\n\n0\n0\n1\n\n\n1\n0\n1\n\n\n2\n0\n1\n\n\n\n\n\n\n\n\ndf['A']\n\n0    0\n1    0\n2    0\nName: A, dtype: int64\n\n\n\ndf[('A','')]\n\n0    0\n1    0\n2    0\nName: (A, ), dtype: int64\n\n\n#"
  },
  {
    "objectID": "posts/13wk-2.html#a.-motive",
    "href": "posts/13wk-2.html#a.-motive",
    "title": "13wk-2: Pandas – apply, map, applymap",
    "section": "A. Motive",
    "text": "A. Motive\n- 아래와 같은 상황이 있었다. (05wk-2의 숙제)\n\ndf = pd.DataFrame({'A':[1,2,3,4]})\ndf\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n1\n\n\n1\n2\n\n\n2\n3\n\n\n3\n4\n\n\n\n\n\n\n\n\ndf[['A']].apply(np.mean)\n\nA    2.5\ndtype: float64\n\n\n\ndf['A'].apply(np.mean)\n\n0    1.0\n1    2.0\n2    3.0\n3    4.0\nName: A, dtype: float64"
  },
  {
    "objectID": "posts/13wk-2.html#b.-s.apply",
    "href": "posts/13wk-2.html#b.-s.apply",
    "title": "13wk-2: Pandas – apply, map, applymap",
    "section": "B. s.apply()",
    "text": "B. s.apply()\n- 가능한 형태는 아래와 같다.\n\n변환함수(스칼라입력,스칼라출력): 로그, 제곱\n변환함수(벡터입력,벡터출력): 표준화, 정렬\n집계함수(벡터입력,스칼라출력): 평균, 최대값\n\n쓸모있는건 1 뿐이다.\n# 예제1 – s.apply + 스칼라입력, 스칼라출력\n\ns = pd.Series([1,2,3])\ns\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\ns.apply(lambda x: -x)\n\n0   -1\n1   -2\n2   -3\ndtype: int64\n\n\n이건 사실 아래의 동작으로 이해하면 된다.\n1 -&gt; -1 \n2 -&gt; -2\n3 -&gt; -3 \n코드로는 아래와 같은 느낌\n\n[(lambda x: -x)(i) for i in s]\n\n[-1, -2, -3]\n\n\n#\n# 예제2 – s.apply + 벡터입력/스칼라출력(집계함수) // 가능은한데 사실상 스칼라입력,스칼라출력으로 해석해야함\n\ns = pd.Series([1,2,3])\ns\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\ns.apply(np.sum) # ??\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\n에러는 안나지만 원하는 동작은 아님\n\n이것은 사실 아래의 동작으로 이해할 수 있다.\n1 -&gt; sum(1) = 1 \n2 -&gt; sum(2) = 2\n3 -&gt; sum(3) = 3\n코드로는 아래의 느낌\n\n[np.sum(i) for i in s]\n\n[1, 2, 3]\n\n\n#\n# 예제3 – s.apply + 벡터입력/벡터출력 // 가능은 한데 사실상 스칼라입력,스칼라출력 함수로 해석해야함\n\ns = pd.Series([1,2,3])\ns\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\ns.apply(lambda x: x-np.mean(x))\n\n0    0.0\n1    0.0\n2    0.0\ndtype: float64\n\n\n\n에러는 안나지만 원하는 동작은 아님\n\n이것은 사실 아래의 동작으로 이해할 수 있다.\n1 -&gt; 1-mean(1) = 0 \n2 -&gt; 2-mean(2) = 0\n3 -&gt; 3-mean(3) = 0\n코드로는 아래의 느낌\n\n[i-np.mean(i) for i in s]\n\n[0.0, 0.0, 0.0]\n\n\n#"
  },
  {
    "objectID": "posts/13wk-2.html#c.-df.apply",
    "href": "posts/13wk-2.html#c.-df.apply",
    "title": "13wk-2: Pandas – apply, map, applymap",
    "section": "C. df.apply()",
    "text": "C. df.apply()\n- 가능한 형태는 아래와 같다.\n\n변환함수(벡터입력,벡터출력): 표준화, 정렬\n집계함수(벡터입력,스칼라출력): 평균, 최대값\n\n쓸모있는건 1,2 모두이다.\n# 예제1 – df.apply + 스칼라입력, 스칼라출력 (불가능)\n\ndf = pd.DataFrame({'X':[0.1,0.2,0.3],'Y':[-0.1,-0.2,-0.3]})\ndf\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0.1\n-0.1\n\n\n1\n0.2\n-0.2\n\n\n2\n0.3\n-0.3\n\n\n\n\n\n\n\n\ndf.apply(lambda x: 'pos' if x&gt;0 else 'neg')\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n\n# 예제2 – df.apply + 스칼라입력,스칼라출력? 벡터입력,벡터출력!!\n\ndf = pd.DataFrame({'X':[0.1,0.2,0.3],'Y':[-0.1,-0.2,-0.3]})\ndf\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0.1\n-0.1\n\n\n1\n0.2\n-0.2\n\n\n2\n0.3\n-0.3\n\n\n\n\n\n\n\n\ndf.apply(lambda x: x**2) # 이건 스칼라입력, 스칼라출력 아니고 벡터입력 벡터출력으로 컴퓨터가 해석함\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0.01\n0.01\n\n\n1\n0.04\n0.04\n\n\n2\n0.09\n0.09\n\n\n\n\n\n\n\n이것은 사실 아래의 동작으로 이해할 수 있다.\ndf['X'] -&gt; (df['X'])**2\ndf['Y'] -&gt; (df['Y'])**2\n코드로는 아래의 느낌이다.\n\n[(lambda x: x**2)(df[i]) for i in df]\n\n[0    0.01\n 1    0.04\n 2    0.09\n Name: X, dtype: float64,\n 0    0.01\n 1    0.04\n 2    0.09\n Name: Y, dtype: float64]\n\n\n#\n# 예제3 – df.apply + 벡터입력,스칼라출력(집계함수)\n\ndf = pd.DataFrame({'X':[0.1,0.2,0.3],'Y':[-0.1,-0.2,-0.3]})\ndf\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0.1\n-0.1\n\n\n1\n0.2\n-0.2\n\n\n2\n0.3\n-0.3\n\n\n\n\n\n\n\n\ndf.apply(np.sum)\n\nX    0.6\nY   -0.6\ndtype: float64\n\n\n#\n# 예제4 – df.apply + 벡터입력,스칼라출력(집계함수)\n\ndf = pd.DataFrame({'X':[0.1,0.2,0.3],'Y':[-0.1,-0.2,-0.3]})\ndf\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0.1\n-0.1\n\n\n1\n0.2\n-0.2\n\n\n2\n0.3\n-0.3\n\n\n\n\n\n\n\n\ndf.apply(np.sum,axis=1)\n\n0    0.0\n1    0.0\n2    0.0\ndtype: float64\n\n\n\ns.apply에서는 axis가 유효한 인자가 아니지만 df.apply에서는 axis가 유효한 입력이고 디폴트값은 0이다.\n\n#\n# 예제5 – df.apply + 벡터입력,벡터출력\n\ndf = pd.DataFrame({'X':[1,2,3],'Y':[4,5,6]})\ndf\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n1\n4\n\n\n1\n2\n5\n\n\n2\n3\n6\n\n\n\n\n\n\n\n\ndf.apply(lambda x: x-np.mean(x))\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n-1.0\n-1.0\n\n\n1\n0.0\n0.0\n\n\n2\n1.0\n1.0\n\n\n\n\n\n\n\n\ndf.apply(lambda x: x-np.mean(x),axis=1)\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n-1.5\n1.5\n\n\n1\n-1.5\n1.5\n\n\n2\n-1.5\n1.5\n\n\n\n\n\n\n\n#\n# 예제6 – df.apply + 벡터입력, 벡터출력\n\ndf = pd.DataFrame({'X':[ 3.285,  0.328, -1.261],'Y':[ 1.068,  0.145, -0.222]})\ndf\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n3.285\n1.068\n\n\n1\n0.328\n0.145\n\n\n2\n-1.261\n-0.222\n\n\n\n\n\n\n\n\ndf.apply(np.sort)\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n-1.261\n-0.222\n\n\n1\n0.328\n0.145\n\n\n2\n3.285\n1.068\n\n\n\n\n\n\n\n\ndf.apply(np.sort, axis=1)\n\n0      [1.068, 3.285]\n1      [0.145, 0.328]\n2    [-1.261, -0.222]\ndtype: object\n\n\n\ndf.apply(lambda x: x*0+np.sort(x), axis=1) # 그다지 안중요한 트릭..\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n1.068\n3.285\n\n\n1\n0.145\n0.328\n\n\n2\n-1.261\n-0.222\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/13wk-2.html#a.-s.map",
    "href": "posts/13wk-2.html#a.-s.map",
    "title": "13wk-2: Pandas – apply, map, applymap",
    "section": "A. s.map()",
    "text": "A. s.map()\n- 가능한 형태는 아래와 같다.\n\n변환함수(스칼라입력,스칼라출력): 로그, 제곱\n변환함수(벡터입력,벡터출력): 표준화, 정렬\n집계함수(벡터입력,스칼라출력): 평균, 최대값\n딕셔너리\n\n쓸모있는건 1,4 이다. 특히 4는 특정상황에서 매우 쓸모있음\n# 예제1 – s.map + 스칼라입력,스칼라출력\n\ns = pd.Series(['A','B','B','B','A'])\ns\n\n0    A\n1    B\n2    B\n3    B\n4    A\ndtype: object\n\n\n\ns.map(lambda x: x.lower())\n\n0    a\n1    b\n2    b\n3    b\n4    a\ndtype: object\n\n\n#\n# 예제2 – s.map + 스칼라입력,스칼라출력\n\ns = pd.Series([1,3,4,2])\ns\n\n0    1\n1    3\n2    4\n3    2\ndtype: int64\n\n\n\ns.map(lambda x: x**2)\n\n0     1\n1     9\n2    16\n3     4\ndtype: int64\n\n\n#\n# 예제3 – s.map + 벡터입력,스칼라출력 // 가능은한데 사실 스칼라입력,스칼라출력으로 해석해야함\n\ns = pd.Series([1,3,4,2])\ns\n\n0    1\n1    3\n2    4\n3    2\ndtype: int64\n\n\n\ns.map(np.sum)\n\n0    1\n1    3\n2    4\n3    2\ndtype: int64\n\n\n#\n# 예제4 – s.map + 벡터입력,벡터출력 // 가능은한데 사실 스칼라입력,스칼라출력으로 해석해야함\n\ns = pd.Series([1,3,4,2])\ns\n\n0    1\n1    3\n2    4\n3    2\ndtype: int64\n\n\n\ns.map(lambda x: x-np.mean(x))\n\n0    0.0\n1    0.0\n2    0.0\n3    0.0\ndtype: float64\n\n\n#\n# 예제5 – s.map + 딕셔너리\n\ns = pd.Series(['A','B','B','B','A'])\ns\n\n0    A\n1    B\n2    B\n3    B\n4    A\ndtype: object\n\n\n\ns.map({'A':'A+','B':'B0'})\n\n0    A+\n1    B0\n2    B0\n3    B0\n4    A+\ndtype: object\n\n\n#"
  },
  {
    "objectID": "posts/13wk-2.html#b.-df.map-df.applymap",
    "href": "posts/13wk-2.html#b.-df.map-df.applymap",
    "title": "13wk-2: Pandas – apply, map, applymap",
    "section": "B. df.map() = df.applymap()",
    "text": "B. df.map() = df.applymap()\n\n\n\n\n\n\n코랩실습자를 위한 주의사항1\n\n\n\n코랩에서 실습할경우\ndf.map()\n이 동작하지 않습니다. 대신 아래와 같이 applymap이 동작합니다.\ndf.applymap()\n이것은 코랩에서 기본으로 설치되어있는 pandas의 버전이 너무 낮아서 생기는 문제입니다. 따라서 코랩을 쓰시는 분들은 아래의 강의노트들을 df.applymap()으로 바꿔서 실습하시기 바랍니다.\n\n\n\n\n\n\n\n\n코랩실습자를 위한 주의사항2\n\n\n\n만약 코랩에서도 df.map()을 사용하시려면 pandas를 높은버전으로 새로 설치하고 사용하시면 됩니다. 즉\n1. 코랩커널재시작 (컴퓨터 다시 할당)\n2. `import pandas as pd` 를 하기 전에 `!pip install pandas -U`를 이용하여 판다스를 최신버전으로 재설치 \n3. 판다스를 임포트 하고 (`import pandas as pd`) 실습\n와 같이 하시면 됩니다.\n\n\n- 가능한 형태는 아래와 같다.\n\n변환함수(스칼라입력,스칼라출력): 로그, 제곱\n집계함수(벡터입력,스칼라출력)\n\n1만 쓸모있다. 여기에서 df.map(변환함수) 꼴은 사실 df.applymap(변환함수)와 가능이 같다.\n# 예제1 – df.map + 스칼라입력,스칼라출력\n\ndf = pd.DataFrame({'A':[2143,2143],'B':['-',3456]})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n2143\n-\n\n\n1\n2143\n3456\n\n\n\n\n\n\n\n\ndf.map(lambda x: 0 if x == '-' else x)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n2143\n0\n\n\n1\n2143\n3456\n\n\n\n\n\n\n\n#\n# 예제2 – df.map + 벡터입력,벡터출력 // 불가능해\n\ndf = pd.DataFrame({'A':np.random.randn(5), 'B':np.random.randn(5)+5})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n-0.474722\n4.616944\n\n\n1\n-0.123587\n5.941885\n\n\n2\n1.011905\n2.960560\n\n\n3\n0.306291\n3.769737\n\n\n4\n-1.231884\n6.354306\n\n\n\n\n\n\n\n\ndf.map(np.sort) # 불가능..\n\nAxisError: axis -1 is out of bounds for array of dimension 0\n\n\n#\n# 예제3 – df.map + 벡터입력,스칼라출력(집계함수) // 가능하긴한데 사실 스칼라입력,스칼라출력으로 해석해야함\n\ndf = pd.DataFrame({'A':np.random.randn(5), 'B':np.random.randn(5)+5})\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n-0.331755\n4.738557\n\n\n1\n1.064457\n3.152778\n\n\n2\n1.096634\n2.535014\n\n\n3\n0.586018\n5.692224\n\n\n4\n-1.619656\n5.566970\n\n\n\n\n\n\n\n\ndf.map(np.mean) # 사실상 스칼라입력,스칼라출력으로 봐야함\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n-0.331755\n4.738557\n\n\n1\n1.064457\n3.152778\n\n\n2\n1.096634\n2.535014\n\n\n3\n0.586018\n5.692224\n\n\n4\n-1.619656\n5.566970\n\n\n\n\n\n\n\n#\n# 예제4 – df.map + 딕셔너리 // 불가능\n\ndf = pd.DataFrame({'guebin':[0,1,0,1,0,1],'hynn':[0,1,1,1,1,1]})\ndf\n\n\n\n\n\n\n\n\nguebin\nhynn\n\n\n\n\n0\n0\n0\n\n\n1\n1\n1\n\n\n2\n0\n1\n\n\n3\n1\n1\n\n\n4\n0\n1\n\n\n5\n1\n1\n\n\n\n\n\n\n\n\ndf.map({0:'fail',1:'pass'})\n\nTypeError: the first argument must be callable\n\n\n#"
  },
  {
    "objectID": "posts/11wk-1.html#a.-folium.map",
    "href": "posts/11wk-1.html#a.-folium.map",
    "title": "11wk-1: Choropleth (folium)",
    "section": "A. folium.Map()",
    "text": "A. folium.Map()\n# 예시1 – 기본, scrollWheelZoom\n\nm = folium.Map(\n    scrollWheelZoom = False\n)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예시2 – location, zoom_start\n\nm = folium.Map(\n    scrollWheelZoom = False,\n    location = [36,127],\n    zoom_start=6\n)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예시3 – 전북대학교 분수대\n- location은 구글맵스에서 분수대 좌표를 확인할 것\n\nhttps://www.google.co.kr/maps/\n[35.8468, 127.1294] 정도..?\n\n- zoom_start=18 로 설정할 것\n\nm = folium.Map(\n    scrollWheelZoom = False,\n    location = [35.8468, 127.1294],# 전북대학교 분수대의 좌표를 확인하여 입력\n    zoom_start=18\n)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#"
  },
  {
    "objectID": "posts/11wk-1.html#b.-folium.marker",
    "href": "posts/11wk-1.html#b.-folium.marker",
    "title": "11wk-1: Choropleth (folium)",
    "section": "B. folium.Marker()",
    "text": "B. folium.Marker()\n# 예제1 – Map에 Marker를 추가\n1. Map의 인스턴스와 Marker의 인스턴스를 각각 생성\n\nm = folium.Map(\n    scrollWheelZoom = False,\n    location = [35.8468,127.1294],\n    zoom_start=18\n)\n\n\nmarker = folium.Marker(\n    location = [35.8468,127.1294]\n)\n\n2. 현재는 Map 인스턴스에 Marker 인스턴스가 표시되어있지 않음\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n3. Marker 인스턴스를 Map에 추가함\n\nmarker.add_to(m)\n\n&lt;folium.map.Marker at 0x7f50f5aea530&gt;\n\n\n4. 이제는 Map 인스턴스에 Marker 인스턴스가 add_to 되어서 함께 표시됨\n\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예제2 – 통계학과 대학원생의 산책경로\n통계학과 대학원생의 산책로를 마커로 표시하라. 산책경로는 아래와 같다고 하자.\n## 통계학과 대학원생의 산책경로..\n[35.8471, 127.1291]\n[35.8468, 127.1289]\n[35.84635, 127.1291]\n[35.84635, 127.1297]\n[35.8468, 127.12995]\n[35.8474, 127.1300]\n\nm = folium.Map(\n    scrollWheelZoom = False,\n    location = [35.8468,127.1294], zoom_start=18\n)\nfolium.Marker(\n    location = [35.8471, 127.1291]\n).add_to(m)\nfolium.Marker(\n    location = [35.8468, 127.1289]\n).add_to(m)\nfolium.Marker(\n    location = [35.84635, 127.1291]\n).add_to(m)\nfolium.Marker(\n    location = [35.84635, 127.1297]\n).add_to(m)\nfolium.Marker(\n    location = [35.8468, 127.12995]\n).add_to(m)\nfolium.Marker(\n    location = [35.8474, 127.1300]\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#"
  },
  {
    "objectID": "posts/11wk-1.html#c.-folium.polygon",
    "href": "posts/11wk-1.html#c.-folium.polygon",
    "title": "11wk-1: Choropleth (folium)",
    "section": "C. folium.Polygon",
    "text": "C. folium.Polygon\n# 예제1 – 통계학과 대학원생의 산책경로를 폴리곤으로 표시 (더블리스트)\n\nm = folium.Map(\n    scrollWheelZoom = False,\n    location = [35.8468,127.1294], zoom_start=18\n)\nfolium.Polygon(\n    locations = [[35.8471, 127.1291],\n                 [35.8468, 127.1289],\n                 [35.84635, 127.1291],\n                 [35.84635, 127.1297],\n                 [35.8468, 127.12995],\n                 [35.8474, 127.1300]]\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예제2 – 2개의 폴리곤으로 표시 (3중리스트)\n\npoly = np.array([[35.8471, 127.1291],\n                 [35.8468, 127.1289],\n                 [35.84635, 127.1291],\n                 [35.84635, 127.1297],\n                 [35.8468, 127.12995],\n                 [35.8474, 127.1300]])\n\n\nlat, lon = poly.T\n\n\npoly2 = np.stack([lat, lon + 0.0011],axis=1)\npoly2\n\narray([[ 35.8471 , 127.1302 ],\n       [ 35.8468 , 127.13   ],\n       [ 35.84635, 127.1302 ],\n       [ 35.84635, 127.1308 ],\n       [ 35.8468 , 127.13105],\n       [ 35.8474 , 127.1311 ]])\n\n\n\nnp.stack([poly,poly2],axis=0)\n\narray([[[ 35.8471 , 127.1291 ],\n        [ 35.8468 , 127.1289 ],\n        [ 35.84635, 127.1291 ],\n        [ 35.84635, 127.1297 ],\n        [ 35.8468 , 127.12995],\n        [ 35.8474 , 127.13   ]],\n\n       [[ 35.8471 , 127.1302 ],\n        [ 35.8468 , 127.13   ],\n        [ 35.84635, 127.1302 ],\n        [ 35.84635, 127.1308 ],\n        [ 35.8468 , 127.13105],\n        [ 35.8474 , 127.1311 ]]])\n\n\n\nm = folium.Map(\n    scrollWheelZoom = False,\n    location = [35.8468,127.1294], zoom_start=18\n)\nfolium.Polygon(\n    locations = np.stack([poly,poly2],axis=0)\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n아이디어: 이걸 잘 이용하면 코로플레스맵처럼 지도를 행정구열별로 나눌 수 있겠음. 그런데, 실제 구현하려면 엄청난 노가다를 해야할 것으로 생각됨 –&gt; 누군가 해놓지 않았을까??\n\n#\n\naxis를 설정하는 방법을 다시 공부하고 싶다면 https://guebin.github.io/PP2023/posts/02_DataScience/2023-04-12-6wk-2.html#넘파이-공부-4단계-축 을 참고하세요!"
  },
  {
    "objectID": "posts/11wk-1.html#a.-github-소개",
    "href": "posts/11wk-1.html#a.-github-소개",
    "title": "11wk-1: Choropleth (folium)",
    "section": "A. github 소개",
    "text": "A. github 소개\n- github account: southkorea\n\nsouthkorea 라는 깃헙유저가 있음.\nhttps://github.com/southkorea\n\n- repo: southkorea-maps\n\nsouthkorea라는 깃헙유저는 southkorea-maps이라는 저장소를 가지고 있음.\nhttps://github.com/southkorea/southkorea-maps\n\n- 저장소 https://github.com/southkorea/southkorea-maps 에는 kostat/2028/json/이라는 폴더가 있으며 여기에는 아래의 파일들이 있음.\nskorea-municipalities-2018-geo.json # &lt;-- 이 파일에 관심있음. \nskorea-municipalities-2018-topo-simple.json\nskorea-municipalities-2018-topo.json\nskorea-provinces-2018-geo.json # &lt;-- 이 파일에 관심있음.\nskorea-provinces-2018-topo-simple.json\nskorea-provinces-2018-topo.json\nskorea-submunicipalities-2018-geo.json\nskorea-submunicipalities-2018-topo-simple.json\nskorea-submunicipalities-2018-topo.json\n이중에서 우리는 아래의 두 파일에 관심있음.\nskorea-municipalities-2018-geo.json \nskorea-provinces-2018-geo.json \n- 이 파일들에는 행정구역을 의미하는 폴리곤을 누군가가 정리해둠!!"
  },
  {
    "objectID": "posts/11wk-1.html#b.-json-파일-다운로드",
    "href": "posts/11wk-1.html#b.-json-파일-다운로드",
    "title": "11wk-1: Choropleth (folium)",
    "section": "B. json 파일 다운로드",
    "text": "B. json 파일 다운로드\n\nglobal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)\nlocal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)"
  },
  {
    "objectID": "posts/11wk-1.html#c.-json-파일의-구조",
    "href": "posts/11wk-1.html#c.-json-파일의-구조",
    "title": "11wk-1: Choropleth (folium)",
    "section": "C. json 파일의 구조",
    "text": "C. json 파일의 구조\n- global_dict의 구조를 살펴보면 아래와 같음\n\n\n\nlevel_0\nlevel_1\nlevel_2\nlevel3\nlevel4\n\n\n\n\ntype\n‘FeatureCollection’\n\n\n\n\n\nfeatures\n[0]\ntype\n‘Feature’\n\n\n\n\n\ngeometry\ntype\n‘Polygon’\n\n\n\n\n\ncoordinates\n(1,??,2) list\n\n\n\n\nproperties\nname\n‘서울특별시’\n\n\n\n\n\nbase_year\n‘2018’\n\n\n\n\n\nname_eng\n‘Seoul’\n\n\n\n\n\ncode\n‘11’\n\n\n\n…\n…\n…\n…\n\n\n\n[16]\ntype\n‘Feature’\n\n\n\n\n\ngeometry\ntype\n‘MultiPolygon’\n\n\n\n\n\ncoordinates\n(6,1,??,2) list\n\n\n\n\nproperties\nname\n‘’제주특별자치도’\n\n\n\n\n\nbase_year\n‘2018’\n\n\n\n\n\nname_eng\n‘Jeju-do’\n\n\n\n\n\ncode\n‘39’\n\n\nname\n‘sido’\n\n\n\n\n\ncrs\ntype\n‘name’\n\n\n\n\n\nproperties\nname\n‘urn:ogc:def:crs:OGC:1.3:CRS84’\n\n\n\n\n- local_dict의 구조를 살펴보면 아래와 같음\n\n\n\nlevel_0\nlevel_1\nlevel_2\nlevel3\nlevel4\n\n\n\n\ntype\n‘FeatureCollection’\n\n\n\n\n\nfeatures\n[0]\ntype\n‘Feature’\n\n\n\n\n\ngeometry\ntype\n‘MultiPolygon’\n\n\n\n\n\ncoordinates\n(1,1,??,2) list\n\n\n\n\nproperties\nname\n‘종로구’\n\n\n\n\n\nbase_year\n‘2018’\n\n\n\n\n\nname_eng\n‘Jongno-gu’\n\n\n\n\n\ncode\n‘11010’\n\n\n\n…\n…\n…\n…\n\n\n\n[249]\ntype\n‘Feature’\n\n\n\n\n\ngeometry\ntype\n‘MultiPolygon’\n\n\n\n\n\ncoordinates\n(10,1,??,2) list\n\n\n\n\nproperties\nname\n‘서귀포시’\n\n\n\n\n\nbase_year\n‘2018’\n\n\n\n\n\nname_eng\n‘Seogwipo-si’\n\n\n\n\n\ncode\n‘39020’\n\n\nname\n‘sido’\n\n\n\n\n\ncrs\ntype\n‘name’\n\n\n\n\n\nproperties\nname\n‘urn:ogc:def:crs:OGC:1.3:CRS84’\n\n\n\n\n- 포인트는 여기에 있음\n\npoly = np.array(global_dict['features'][0]['geometry']['coordinates'])[0]\nlon, lat = poly.T \nnp.stack([lat,lon],axis=1)\n\narray([[ 37.69972082, 127.02214829],\n       [ 37.69958053, 127.02531549],\n       [ 37.70025114, 127.02689807],\n       ...,\n       [ 37.70145528, 127.01541539],\n       [ 37.70101742, 127.01982736],\n       [ 37.69972082, 127.02214829]])\n\n\n- 서울의다각형을 의미하는것 같음. –&gt; 확인해보자.\n\nm = folium.Map(\n    location = [37.55,127], \n    zoom_start=11,\n    scrollWheelZoom = False\n)\nfolium.Polygon(\n    locations= np.stack([lat,lon],axis=1),\n    fill=True\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n일상언어에서는 (lat,lon) 순서로 표현한다. 즉 적도를 기준으로 얼마나 위/아래로 있는지, 그리고 그리니치천문대를 기준으로 얼마나 동/서로 있는지를 표현한다. 그런데 lat이 y축의 느낌을 가지고 lon이 x축의 느낌을 가지는데 (lat,lon) 순으로 좌표를 선택하면 컴퓨터로 표현하기에 종종 헷갈릴 수 있다. 그래서 어떤 경우는 (lon,lat) 순서로 좌표를 정리하기도 한다."
  },
  {
    "objectID": "posts/11wk-1.html#a.-folium.choropleth-소개",
    "href": "posts/11wk-1.html#a.-folium.choropleth-소개",
    "title": "11wk-1: Choropleth (folium)",
    "section": "A. folium.Choropleth 소개",
    "text": "A. folium.Choropleth 소개\n- folium.Choropleth 은 아래와 같은 방식으로 그림을 그린다고 생각하면 편리하다. (실제로 이런지는 모르겠음.. 아마 그럴거에요..)\n\njson 파일을 바탕으로 폴리곤을 그린다. 폴리곤에 이름을 붙인다.\ndf = [폴리곤의이름, 통계값(y)]와 같은 형식으로 정리된 데이터프레임을 바탕으로, 각 폴리곤에 대응하는 y값을 색깔로 맵핑한다.\n\n- 포인트: 2개의 정보를 이용하네?"
  },
  {
    "objectID": "posts/11wk-1.html#b.-polygon-시각화",
    "href": "posts/11wk-1.html#b.-polygon-시각화",
    "title": "11wk-1: Choropleth (folium)",
    "section": "B. Polygon 시각화",
    "text": "B. Polygon 시각화\n# 예제1 – 전국의 행정구역 시각화 (global)\n\nm = folium.Map(\n    location = [36,128],\n    zoom_start = 7,\n    scrollWheelZoom= False\n)\nfolium.Choropleth(\n    geo_data=global_dict\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예제2 – 전국의 행정구역 시각화 (local)\n\nm = folium.Map(\n    location = [36,128],\n    zoom_start = 7,\n    scrollWheelZoom= False\n)\nfolium.Choropleth(\n    geo_data=local_dict\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예제3 – 전국의 행정구역 시각화 (덕진구/완산구)\n\njeonju_dict = local_dict.copy() \n\n\njeonju_dict['features'] = [l for l in local_dict['features'] if '전주시' in l['properties']['name']]\n\n\nm = folium.Map(\n    location = [35.84195368311022, 127.1155556693179],\n    zoom_start=11,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data=jeonju_dict\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#"
  },
  {
    "objectID": "posts/11wk-1.html#c.-polygon-value-시각화-starstarstar",
    "href": "posts/11wk-1.html#c.-polygon-value-시각화-starstarstar",
    "title": "11wk-1: Choropleth (folium)",
    "section": "C. (Polygon, Value) 시각화 (\\(\\star\\star\\star\\))",
    "text": "C. (Polygon, Value) 시각화 (\\(\\star\\star\\star\\))\n# 예제1 – 덕진구 vs 완산구\n덕진구와 완산구의 전기사용량이 아래와 같이 정리되었다고 하자.\n\ndf = pd.DataFrame({\n    'key':['전주시덕진구', '전주시완산구'], \n    'elec_use':[20,30]\n})\ndf\n\n\n\n\n\n\n\n\nkey\nelec_use\n\n\n\n\n0\n전주시덕진구\n20\n\n\n1\n전주시완산구\n30\n\n\n\n\n\n\n\n이 전기사용량을 각 덕진구/완산구 각각의 polygon의 색깔로 구분할 수 있을까?\n(선실습)\n\njeonju_dict['features'][0]['properties']['name']\n\n'전주시완산구'\n\n\n\nm = folium.Map(\n    location = [35.84195368311022, 127.1155556693179],\n    zoom_start=11,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data= jeonju_dict,\n    key_on='properties.name',\n    data=df,\n    columns=['key','elec_use']\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n(후설명)\n\n이해를 위해 필요한 약간의 직관\n\n예비생각1: 코로플레스맵을 그리기 위해서는 항상 2개의 데이터를 연결해야하는 구조이다.\n예비생각2: 두개의 데이터를 연결하기 위해서는 공유가능한 연결의 매개체가 필요하다. (좌우로 concat: row-index를 공유, 위아래로concat: colnames공유, merge: 양쪽 데이터프레임에서 같은 이름을 가진 특정 col이 있었음)\n예비생각3: 코로플레스맵의 연결매개체는 ‘완산구’, ’덕진구’와 같은 지역명이다.\n\nfolium.Choropleth() 에 사용될 변수들 상상해보기\n\n재료: 두개의 데이터 geo_data = json과 data = df[다각형의 인덱스, 통계값]를 를 명시해야한다.\n연결매개체: 두개의 데이터프레임을 연결하는 변수이름 (key_on)을 명시해야 한다.\n\n\n#\n# 예제2 – 덕진구 vs 완산구 / key_on에 대한 이해를 위해 만든 억지예제\n덕진구와 완산구의 전기사용량이 아래와 같이 정리되었다고 하자.\n\ndf = pd.DataFrame({\n    'key':['전주시덕진구', 'Jeonjusiwansangu'], \n    'elec_use':[20,30]\n})\ndf\n\n\n\n\n\n\n\n\nkey\nelec_use\n\n\n\n\n0\n전주시덕진구\n20\n\n\n1\nJeonjusiwansangu\n30\n\n\n\n\n\n\n\n이 전기사용량을 각 덕진구/완산구 각각의 polygon의 색깔로 구분할 수 있을까?\n- 예시1: ‘properties.name’ 으로 key_on.\n\njeonju_dict['features'][0]['properties'],jeonju_dict['features'][1]['properties']\n\n({'name': '전주시완산구',\n  'base_year': '2018',\n  'name_eng': 'Jeonjusiwansangu',\n  'code': '35011'},\n {'name': '전주시덕진구',\n  'base_year': '2018',\n  'name_eng': 'Jeonjusideokjingu',\n  'code': '35012'})\n\n\n\nm = folium.Map(\n    location = [35.84195368311022, 127.1155556693179],\n    zoom_start=11,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data= jeonju_dict,\n    key_on='properties.name',\n    data=df,\n    columns=['key','elec_use']\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n- 예시2: ‘properties.name_eng’ 으로 key_on.\n\njeonju_dict['features'][0]['properties'],jeonju_dict['features'][1]['properties']\n\n({'name': '전주시완산구',\n  'base_year': '2018',\n  'name_eng': 'Jeonjusiwansangu',\n  'code': '35011'},\n {'name': '전주시덕진구',\n  'base_year': '2018',\n  'name_eng': 'Jeonjusideokjingu',\n  'code': '35012'})\n\n\n\nm = folium.Map(\n    location = [35.84195368311022, 127.1155556693179],\n    zoom_start=11,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data= jeonju_dict,\n    key_on='properties.name_eng',\n    data=df,\n    columns=['key','elec_use']\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n- 예시3: ’code’열을 새롭게 할당하고 ’code’열로 key_on\n\njeonju_dict['features'][0]['properties'],jeonju_dict['features'][1]['properties']\n\n({'name': '전주시완산구',\n  'base_year': '2018',\n  'name_eng': 'Jeonjusiwansangu',\n  'code': '35011'},\n {'name': '전주시덕진구',\n  'base_year': '2018',\n  'name_eng': 'Jeonjusideokjingu',\n  'code': '35012'})\n\n\n\ndf.assign(code = ['35012','35011'])\n\n\n\n\n\n\n\n\nkey\nelec_use\ncode\n\n\n\n\n0\n전주시덕진구\n20\n35012\n\n\n1\nJeonjusiwansangu\n30\n35011\n\n\n\n\n\n\n\n\nm = folium.Map(\n    location = [35.84195368311022, 127.1155556693179],\n    zoom_start=11,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data= jeonju_dict,\n    key_on='properties.code',\n    data=df.assign(code = ['35012','35011']),\n    columns=['code','elec_use']\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예제4 – 대한민국 인구수 시각화 (global)\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/2021-11-22-prov.csv')\ndf\n\n\n\n\n\n\n\n\n행정구역(시군구)별\n총인구수 (명)\n\n\n\n\n0\n서울특별시\n9532428\n\n\n1\n부산광역시\n3356311\n\n\n2\n대구광역시\n2390721\n\n\n3\n인천광역시\n2945009\n\n\n4\n광주광역시\n1442454\n\n\n5\n대전광역시\n1454228\n\n\n6\n울산광역시\n1122566\n\n\n7\n세종특별자치시\n368276\n\n\n8\n경기도\n13549577\n\n\n9\n강원도\n1537717\n\n\n10\n충청북도\n1596948\n\n\n11\n충청남도\n2118977\n\n\n12\n전라북도\n1789770\n\n\n13\n전라남도\n1834653\n\n\n14\n경상북도\n2627925\n\n\n15\n경상남도\n3318161\n\n\n16\n제주특별자치도\n676569\n\n\n\n\n\n\n\n\nm = folium.Map(\n    location = [36,128],\n    zoom_start=7,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data=global_dict,\n    key_on='properties.name',\n    data = df,\n    columns = ['행정구역(시군구)별','총인구수 (명)']\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#\n# 예제5 – 대한민국 인구수 시각화 (local)\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/2021-11-22-muni.csv')\ndf\n\n\n\n\n\n\n\n\n행정구역(시군구)별\n총인구수 (명)\n\n\n\n\n0\n종로구\n145346\n\n\n1\n중구\n122781\n\n\n2\n용산구\n223713\n\n\n3\n성동구\n287174\n\n\n4\n광진구\n340814\n\n\n...\n...\n...\n\n\n269\n함양군\n38475\n\n\n270\n거창군\n61242\n\n\n271\n합천군\n43029\n\n\n272\n제주시\n493225\n\n\n273\n서귀포시\n183344\n\n\n\n\n274 rows × 2 columns\n\n\n\n\ndf.loc[67:71]\n\n\n\n\n\n\n\n\n행정구역(시군구)별\n총인구수 (명)\n\n\n\n\n67\n동구\n223384\n\n\n68\n중구\n231852\n\n\n69\n서구\n474046\n\n\n70\n유성구\n350284\n\n\n71\n대덕구\n174662\n\n\n\n\n\n\n\n\nm = folium.Map(\n    location = [36,128],\n    zoom_start=7,\n    scrollWheelZoom = False\n)\nfolium.Choropleth(\n    geo_data=local_dict,\n    key_on='properties.name',\n    data = df,\n    columns = ['행정구역(시군구)별','총인구수 (명)']\n).add_to(m)\nm\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n#"
  },
  {
    "objectID": "posts/15wk-2-fin.html",
    "href": "posts/15wk-2-fin.html",
    "title": "15wk-2: 기말고사 (예상문제)",
    "section": "",
    "text": "기말고사 관련\n\n\n\n공지사항\n\n시험일: 12월18일(월)\n시험시간: 16:00~17:50\n대면/비대면: 전북대 충남대 모두 “대면”시험으로 진행. 줌 필요X\n구글검색 허용, ChatGPT 허용\n\n주의사항\n\n부정행위적발시 기말고사점수 0점 처리함.\n본인확인을 위한 학생증 or 신분증을 지참.\n모두 대면시험이므로 별도의 준비시간없이 바로 시작함.\n질문은 카카오톡 채널을 통해서만 받으며, 대면질문은 받지 않음. (충남대 학생들은 대면질문이 불가능하므로)\n지연제출시 5분단위로 감점이 있음. (중간고사때는 조금 늦어도 별도의 감점은 없었지만, 다른 학생들과의 형평성에 어긋난다는 피드백이 있어서 수정함.) 전북대의 경우 JBNU 와이파이를 이용할시 속도이슈가 있으니 개인노트북보다는 실습실의 컴퓨터로 제출하는 것을 권장함.\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npd.options.plotting.backend = \"plotly\"\npio.templates.default = \"plotly_white\""
  },
  {
    "objectID": "posts/15wk-2-fin.html#요일시간에-따른-평균속력-시각화-25점",
    "href": "posts/15wk-2-fin.html#요일시간에-따른-평균속력-시각화-25점",
    "title": "15wk-2: 기말고사 (예상문제)",
    "section": "(1) 요일,시간에 따른 평균속력 시각화 – 25점",
    "text": "(1) 요일,시간에 따른 평균속력 시각화 – 25점\n자료 df에서 시간에 따른 평균속력을 구하고 이를 대시보드에 시각화하라.\nREADME\n\n요일은 {0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'}의 규칙에 따라 변환할 것"
  },
  {
    "objectID": "posts/15wk-2-fin.html#요일시간에-따른-평균이동거리-시각화-25점",
    "href": "posts/15wk-2-fin.html#요일시간에-따른-평균이동거리-시각화-25점",
    "title": "15wk-2: 기말고사 (예상문제)",
    "section": "(2) 요일,시간에 따른 평균이동거리 시각화 – 25점",
    "text": "(2) 요일,시간에 따른 평균이동거리 시각화 – 25점\n자료 df에서 시간에 따른 평균이동거리를 구하고 이를 대시보드에 시각화하라.\nREADME\n\n요일은 {0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'}의 규칙에 따라 변환할 것"
  },
  {
    "objectID": "posts/15wk-2-fin.html#속력별-경로시각화-50점",
    "href": "posts/15wk-2-fin.html#속력별-경로시각화-50점",
    "title": "15wk-2: 기말고사 (예상문제)",
    "section": "(3) 속력별 경로시각화 – 50점",
    "text": "(3) 속력별 경로시각화 – 50점\n자료 df_small에서 속력을 quatile에 따라 4개의 구간으로 나누고, 구간별 이동경로를 대시보드에 시각화하라.\nREADME\n\nZoom = 11 로 설정할것. Figure의 width, height는 설정하지 말것\n기타 설정값에 대해서는 궁금한것이 있다면 질문할 것\n\n힌트:\n힌트1: 아래의 코드를 관찰하세요.\n\nspeed = pd.Series([1,1,2,2,3,3,4,4])\nprint(pd.qcut(speed,4))\nprint(pd.qcut(speed,4,labels=['매우느림','조금느림','조금빠름','매우빠름']))\n\n0    (0.999, 1.75]\n1    (0.999, 1.75]\n2      (1.75, 2.5]\n3      (1.75, 2.5]\n4      (2.5, 3.25]\n5      (2.5, 3.25]\n6      (3.25, 4.0]\n7      (3.25, 4.0]\ndtype: category\nCategories (4, interval[float64, right]): [(0.999, 1.75] &lt; (1.75, 2.5] &lt; (2.5, 3.25] &lt; (3.25, 4.0]]\n0    매우느림\n1    매우느림\n2    조금느림\n3    조금느림\n4    조금빠름\n5    조금빠름\n6    매우빠름\n7    매우빠름\ndtype: category\nCategories (4, object): ['매우느림' &lt; '조금느림' &lt; '조금빠름' &lt; '매우빠름']\n\n\n힌트2: 1-(3)에 해당하는 그림을 fig3로 저장한후 아래의 코드를 관찰하세요\nfor i in range(150):\n    print(fig3.data[i].mode)\n이를 이용하여 legend를 수정하는 방법을 생각해보세요."
  },
  {
    "objectID": "posts/02wk-1.html#a.-예비학습",
    "href": "posts/02wk-1.html#a.-예비학습",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "A. 예비학습",
    "text": "A. 예비학습\n# 예비학습1 – 그림을 저장했다가 꺼내보고 싶다.\n- 그림을 그리고 저장하자.\n\nplt.plot([1,2,4,3])\nfig = plt.gcf()\n\n\n\n\n\n\n\n\n- 다른그림을 그려보자.\n\nplt.plot([1,2,4,3],'--o')\n\n\n\n\n\n\n\n\n- 저장한 그림은 언제든지 꺼내볼 수 있음\n\nfig\n\n\n\n\n\n\n\n\n#\n# 예비학습2 – fig 는 뭐야?\n\n#fig??\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n\nFigure라는 클래스에서 찍힌 인스턴스\n\n- 여러가지 값, 기능이 저장되어 있겠음.\n\nfig.axes\n\n[&lt;Axes: &gt;]\n\n\n\nax = fig.axes[0]\n\n\nyaxis= ax.yaxis\nxaxis= ax.xaxis\n\n\nlines = ax.get_lines()\nline = lines[0]\n\n- 계층구조: Figure \\(\\supset\\) [Axes,…] \\(\\supset\\) YAxis, XAxis, [Line2D,…]\n\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n1. .axes 로 Axes 를 끄집어냄\n\nax = fig.axes[0]\ntype(ax)\n\nmatplotlib.axes._axes.Axes\n\n\n2. .xaxis, .yaxis 로 Axis 를 끄집어냄\n\nyaxis = ax.yaxis\nxaxis = ax.xaxis\ntype(yaxis), type(xaxis)\n\n(matplotlib.axis.YAxis, matplotlib.axis.XAxis)\n\n\n3. .get_lines()로 Line2D를 끄집어냄\n\nlines = ax.get_lines()\nline=lines[0]\ntype(line)\n\nmatplotlib.lines.Line2D\n\n\n- 오브젝트내용 확인 (그닥 필요 없음)\n\nline.properties()['data']\n\n(array([0., 1., 2., 3.]), array([1, 2, 4, 3]))\n\n\n- matplotlib의 설명\nref: https://matplotlib.org/stable/gallery/showcase/anatomy.html#sphx-glr-gallery-showcase-anatomy-py"
  },
  {
    "objectID": "posts/02wk-1.html#b.-plt.plot-쓰지-않고-그림그리기",
    "href": "posts/02wk-1.html#b.-plt.plot-쓰지-않고-그림그리기",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "B. plt.plot 쓰지 않고 그림그리기",
    "text": "B. plt.plot 쓰지 않고 그림그리기\n- 개념:\n\nFigure(fig): 도화지\nAxes(ax): 도화지에 존재하는 그림틀\nAxis, Lines: 그림틀 위에 올려지는 물체(object)\n\n- 목표: 아래와 똑같은 그림을 plt.plot()을 쓰지 않고 만든다.\n\nplt.plot([1,2,3,2],'--o')\n\n\n\n\n\n\n\n\n- 아래와 같이 하면 된다.\n\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.set_xlim([-0.15, 3.15])\nax.set_ylim([0.9, 3.1])\nline = matplotlib.lines.Line2D(\n    xdata=[0,1,2,3],\n    ydata=[1,2,3,2],\n    linestyle='--',\n    marker='o'\n)\nax.add_line(line)\nfig\n\n\n\n\n\n\n\n\n\nFigure\n\nfig = plt.Figure() \n\n\n클래스를 모른다면: plt.Figure()는 도화지를 만드는 함수라 생각할 수 있음\n클래스문법에 익숙하다면: 이 과정은 사실 클래스 -&gt; 인스턴스의 과정임 (plt라는 모듈안에 Figure라는 클래스가 있는데, 그 클래스에서 인스턴스를 만드는 과정임)\n\n\nfig\n\n&lt;Figure size 450x300 with 0 Axes&gt;\n\n\n\n아직은 아무것도 없음\n\n\n\nAxes\n\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\n\n\nfig.add_axes는 fig에 소속된 함수이며, 도화지에서 그림틀을 ‘추가하는’ 함수이다.\n\n\nfig\n\n\n\n\n\n\n\n\n\n이제 fig라는 이름의 도화지에는 추가된 그림틀이 보인다.\n\n\n\nAxes 조정\n\nax.set_xlim([-0.15, 3.15])\nax.set_ylim([0.9, 3.1])\n\n(0.9, 3.1)\n\n\n\nfig\n\n\n\n\n\n\n\n\n\n\nLines\n\nline = matplotlib.lines.Line2D(\n    xdata=[0,1,2,3], \n    ydata=[1,2,3,2], \n    linestyle='--', \n    marker='o'\n)\n\n\nax.add_line(line)\n\n\nfig\n\n\n\n\n\n\n\n\n\nfig\n\n\n\n\n\n\n\n\n\n\n다른방법들\n- 조금 다른 방법: Line2d 오브젝트를 쓰지 않는 방법\n\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n- 조금 다른 방법 (2): add_axes()를 쓰지 않는 방법\n\nfig = plt.Figure()\nax = fig.subplots(1)\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n- 좀 더 다른 방법 (3)\n\nfig, ax = plt.subplots(1)\nax.plot([1,2,3,2],'--o')"
  },
  {
    "objectID": "posts/02wk-1.html#c.-정리-starstarstar",
    "href": "posts/02wk-1.html#c.-정리-starstarstar",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "C. 정리 (\\(\\star\\star\\star\\))",
    "text": "C. 정리 (\\(\\star\\star\\star\\))\n- 결국 아래는 모두 같은 코드이다.\n\n## 코드1 \nplt.plot([1,2,3,2],'--o')\n\n\n\n\n\n\n\n\n\n## 코드2\nfig,ax = plt.subplots()\nax.plot([1,2,3,2],'--o')\n\n\n\n\n\n\n\n\n\n## 코드3\nfig = plt.Figure()\nax = fig.subplots()\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n\n## 코드4\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.plot([1,2,3,2],'--o')\nfig\n\n\n\n\n\n\n\n\n\n## 코드5\nfig = plt.Figure()\nax = fig.add_axes([0.125, 0.11, 0.775, 0.77])\nax.set_xlim([-0.15, 3.15])\nax.set_ylim([0.9, 3.1])\nline = matplotlib.lines.Line2D(\n    xdata=[0,1,2,3], \n    ydata=[1,2,3,2], \n    linestyle='--', \n    marker='o'\n)\nax.add_line(line)\nfig"
  },
  {
    "objectID": "posts/02wk-1.html#d.-미니맵",
    "href": "posts/02wk-1.html#d.-미니맵",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "D. 미니맵",
    "text": "D. 미니맵\n- 틀잡기\n\nfig = plt.Figure()\nax = fig.add_axes([0,0,2,2])\nax_mini = fig.add_axes([1.4,0.2,0.5,0.5])\nfig\n\n\n\n\n\n\n\n\n\nax.plot([1,5,3,4],'--o')\nax_mini.plot([1,2,3,1],'--or')\nfig"
  },
  {
    "objectID": "posts/02wk-1.html#a.-plt.subplots",
    "href": "posts/02wk-1.html#a.-plt.subplots",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "A. plt.subplots()",
    "text": "A. plt.subplots()\n- 예시1\n\n# fig, axs = plt.subplots(2) \nfig, (ax1,ax2) = plt.subplots(2,figsize=(4,4))\nax1.plot([1,2,3,2],'--r')\nax2.plot([1,2,4,3],'--o')\nfig.tight_layout()\n# plt.tight_layout()\n\n\n\n\n\n\n\n\n- 예시2\n\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2, figsize=(4,4))\nax1.plot([1,2,4,3],'o', color='C0')\nax2.plot([1,2,4,3],'o', color='C1')\nax3.plot([1,2,4,3],'o', color='C2')\nax4.plot([1,2,4,3],'o', color='C3')\nfig.tight_layout()"
  },
  {
    "objectID": "posts/02wk-1.html#b.-plt.subplot",
    "href": "posts/02wk-1.html#b.-plt.subplot",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "B. plt.subplot()",
    "text": "B. plt.subplot()\n- 예시1\n\nplt.figure(figsize=(4,4))\nplt.subplot(2,2,1)\nplt.plot([1,2,4,3],'o', color='C0')\nplt.subplot(2,2,2)\nplt.plot([1,2,4,3],'o', color='C1')\nplt.subplot(2,2,3)\nplt.plot([1,2,4,3],'o', color='C2')\nplt.subplot(2,2,4)\nplt.plot([1,2,4,3],'o', color='C3')\nplt.tight_layout()"
  },
  {
    "objectID": "posts/02wk-1.html#a.-일반적인-플랏",
    "href": "posts/02wk-1.html#a.-일반적인-플랏",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "A. 일반적인 플랏",
    "text": "A. 일반적인 플랏\n\nplt\n\nplt.plot([1,2,3,2])\nplt.title('asdf')\n\nText(0.5, 1.0, 'asdf')\n\n\n\n\n\n\n\n\n\n\nplt.title??\n\n\nSignature: plt.title(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)\nDocstring:\nSet a title for the Axes.\nSet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\nParameters\n----------\nlabel : str\n    Text to use for the title\nfontdict : dict\n    A dictionary controlling the appearance of the title text,\n    the default *fontdict* is::\n       {'fontsize': rcParams['axes.titlesize'],\n        'fontweight': rcParams['axes.titleweight'],\n        'color': rcParams['axes.titlecolor'],\n        'verticalalignment': 'baseline',\n        'horizontalalignment': loc}\nloc : {'center', 'left', 'right'}, default: :rc:`axes.titlelocation`\n    Which title to set.\ny : float, default: :rc:`axes.titley`\n    Vertical Axes location for the title (1.0 is the top).  If\n    None (the default) and :rc:`axes.titley` is also None, y is\n    determined automatically to avoid decorators on the Axes.\npad : float, default: :rc:`axes.titlepad`\n    The offset of the title from the top of the Axes, in points.\nReturns\n-------\n`.Text`\n    The matplotlib text instance representing the title\nOther Parameters\n----------------\n**kwargs : `~matplotlib.text.Text` properties\n    Other keyword arguments are text properties, see `.Text` for a list\n    of valid text properties.\nSource:   \n@_copy_docstring_and_deprecators(Axes.set_title)\ndef title(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs):\n    return gca().set_title(\n        label, fontdict=fontdict, loc=loc, pad=pad, y=y, **kwargs)\nFile:      ~/anaconda3/envs/mp/lib/python3.10/site-packages/matplotlib/pyplot.py\nType:      function\n\n\n\n\n\nfig – 원래는 불가능\n\nplt.plot([1,2,3,2])\nfig = plt.gcf()\nfig.suptitle(\"asdf\")\n\nText(0.5, 0.98, 'asdf')\n\n\n\n\n\n\n\n\n\n\n\nax\n\nplt.plot([1,2,3,2])\nax = plt.gca()\nax.set_title(\"asdf\")\n\nText(0.5, 1.0, 'asdf')"
  },
  {
    "objectID": "posts/02wk-1.html#b.-서브플랏",
    "href": "posts/02wk-1.html#b.-서브플랏",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "B. 서브플랏",
    "text": "B. 서브플랏\n\nax\n\nfig,(ax1,ax2) = plt.subplots(1,2)\nax1.set_title('asdf')\nax2.set_title('1234')\nfig.tight_layout()\n\n\n\n\n\n\n\n\n\n\nplt\n\nplt.subplot(121)\nplt.plot([1,2,3])\nplt.title('asdf')\nplt.subplot(122)\nplt.plot([1,2,1])\nplt.title('1234')\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\nfig\n\nfig,(ax1,ax2) = plt.subplots(1,2)\nax1.set_title('asdf')\nax2.set_title('1234')\nfig.suptitle('asdf1234')\nfig.tight_layout()"
  },
  {
    "objectID": "posts/02wk-1.html#a.-motivating-ex",
    "href": "posts/02wk-1.html#a.-motivating-ex",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "A. motivating EX",
    "text": "A. motivating EX\n# 예제 – 키와 몸무게의 산점도\n- 아래와 같은 자료를 수집하였다고 하자.\n\n몸무게 = [44,48,49,58,62,68,69,70,76,79]\n키 = [159,160,162,165,167,162,165,175,165,172]\n\n\nx=[44,48,49,58,62,68,69,70,76,79]\ny=[159,160,162,165,167,162,165,175,165,172]\n\n\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n\n키가 큰 사람일수록 몸무게도 많이 나간다. (반대도 성립)\n키와 몸무게는 관계가 있어보인다. (정비례)\n\n- 얼만큼 정비례인지?\n\n이 질문에 대답하기 위해서는 상관계수의 개념을 알아야 한다.\n상관계수는 산점도의 해석에서 가장 중요한 개념 중 하나.\n\n#"
  },
  {
    "objectID": "posts/02wk-1.html#b.-예비학습-상관계수",
    "href": "posts/02wk-1.html#b.-예비학습-상관계수",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "B. 예비학습 – 상관계수",
    "text": "B. 예비학습 – 상관계수\n# 예제 – 키와 몸무게에서 상관계수\n- 다시 아래의 자료를 고려하자.\n\nx=[44,48,49,58,62,68,69,70,76,79]\ny=[159,160,162,165,167,162,165,175,165,172]\n\n- (표본)상관계수\n\\[r=\\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})(y_i-\\bar{y}) }{\\sqrt{\\sum_{i=1}^{n}(x_i-\\bar{x})^2\\sum_{i=1}^{n}(y_i-\\bar{y})^2 }}=\\sum_{i=1}^{n}\\tilde{x}_i\\tilde{y}_i \\]\n\n단, \\(\\tilde{x}_i=\\frac{(x_i-\\bar{x})}{\\sqrt{\\sum_{i=1}^n(x_i-\\bar{x})^2}}\\), \\(\\tilde{y}_i=\\frac{(y_i-\\bar{y})}{\\sqrt{\\sum_{i=1}^n(y_i-\\bar{y})^2}}\\)\n\n- 상관계수를 계산하는 방법\n(원래자료)\n\nx,y\n\n([44, 48, 49, 58, 62, 68, 69, 70, 76, 79],\n [159, 160, 162, 165, 167, 162, 165, 175, 165, 172])\n\n\n(평균을 0으로)\n\nxx = x-np.mean(x)\nyy = y-np.mean(y) \n\n(퍼진정도를 표준화)\n\nxxx = xx/np.sqrt(np.sum(xx**2))\nyyy = yy/np.sqrt(np.sum(yy**2))\n\n\n(xxx*yyy).sum()\n\n0.7138620583559141\n\n\n- 상관계수를 계산하는 방법2\n\nnp.corrcoef(x,y)\n\narray([[1.        , 0.71386206],\n       [0.71386206, 1.        ]])\n\n\n- 상관계수의 성질: 절대값이 1보다 작다.\n#"
  },
  {
    "objectID": "posts/02wk-1.html#c.-산점도를-보고-상관계수의-부호를-해석",
    "href": "posts/02wk-1.html#c.-산점도를-보고-상관계수의-부호를-해석",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "C. 산점도를 보고 상관계수의 부호를 해석",
    "text": "C. 산점도를 보고 상관계수의 부호를 해석\n# 예제 – 키와 몸무게의 산점도 + 상관계수의 부호해석\n- 질문: 아래의 그림은 상관계수 \\(r\\)의 값이 양수인가 음수인가?\n\nx=[44,48,49,58,62,68,69,70,76,79]\ny=[159,160,162,165,167,162,165,175,165,172]\n\n\nplt.plot(x,y,'o')\n\n\n\n\n\n\n\n\n- 차근차근 따져보자.\n\nxx = x-np.mean(x)\nyy = y-np.mean(y) \nxxx = xx/np.sqrt(np.sum(xx**2))\nyyy = yy/np.sqrt(np.sum(yy**2))\n\n\nfig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(10,3))\nax1.plot(x,y,'o'); ax1.set_title(r'$(x_i,y_i)$')\nax2.plot(xx,yy,'o'); ax2.set_title(r'$(x_i-\\bar{x},y_i-\\bar{y})$')\nax3.plot(xxx,yyy,'o'); ax3.set_title(r'$(\\tilde{x}_i,\\tilde{y}_i)$')\n\nText(0.5, 1.0, '$(\\\\tilde{x}_i,\\\\tilde{y}_i)$')\n\n\n\n\n\n\n\n\n\n\n\\(\\tilde{x}_i\\), \\(\\tilde{y}_i\\) 를 곱한값이 양수인것과 음수인것을 체크해보자.\n양수인쪽이 많은지 음수인쪽이 많은지 생각해보자.\n\\(r=\\sum_{i=1}^{n}\\tilde{x}_i \\tilde{y}_i\\) 의 부호는?\n\n- 그림을 보고 상관계수의 부호를 알아내는 방법? \\((x_i,y_i)\\)의 산점도를 보고 \\((\\tilde{x}_i, \\tilde{y}_i)\\) 의 산점도를 상상 \\(\\to\\) 1,3 분면에 점들이 많으면 양수, 2,4 분면에 점들이 많으면 음수\n#"
  },
  {
    "objectID": "posts/02wk-1.html#d.-산점도를-보고-상관계수의-절대값을-해석",
    "href": "posts/02wk-1.html#d.-산점도를-보고-상관계수의-절대값을-해석",
    "title": "02wk-1: 객체지향적 시각화 (2), Subplot, 산점도 응용예제 1-2",
    "section": "D. 산점도를 보고 상관계수의 절대값을 해석",
    "text": "D. 산점도를 보고 상관계수의 절대값을 해석\n# 예제 – 기울기가 동일, 그렇지만 직선근처의 퍼짐이 다른 경우\n- 자료가 아래와 같다고 하자.\n\nx=np.arange(0,10,0.1)\ny1=x+np.random.normal(loc=0,scale=1.0,size=len(x))\ny2=x+np.random.normal(loc=0,scale=7.0,size=len(x))\n\n\nplt.plot(x,y1,'.')\nplt.plot(x,y2,'x')\n\n\n\n\n\n\n\n\n- \\((x_i,y_i)\\)의 그래프와 \\((\\tilde{x}_i,\\tilde{y}_i)\\)의 그래프를 그려보자.\n\ndef tilde(x):\n    xx = x-np.mean(x)\n    xxx = xx / np.sqrt(np.sum(xx**2))\n    return xxx \n\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(4,2))\nax1.plot(x,y1,'.'); ax1.plot(x,y2,'x'); ax1.set_title(r'$(x_i,y_i)$')\nax2.plot(tilde(x),tilde(y1),'.'); ax2.plot(tilde(x),tilde(y2),'x'); ax2.set_title(r'$(\\tilde{x}_i,\\tilde{y}_i)$')\nfig.tight_layout()\n\n\n\n\n\n\n\n\n#\n# 예제2 – 직선근처의 퍼짐은 동일하지만, 직선의 기울기가 다른 경우\n- 자료가 아래와 같다고 하자.\n\nx=np.arange(0,10,0.1)\ny1=x+np.random.normal(loc=0,scale=1.0,size=len(x))\ny2=0.2*x+np.random.normal(loc=0,scale=1.0,size=len(x))\n\n\nplt.plot(x,y1,'.')\nplt.plot(x,y2,'x')\n\n\n\n\n\n\n\n\n- \\((x_i,y_i)\\)의 그래프와 \\((\\tilde{x}_i,\\tilde{y}_i)\\)의 그래프를 그려보자.\n\ndef tilde(x):\n    xx = x-np.mean(x)\n    xxx = xx / np.sqrt(np.sum(xx**2))\n    return xxx \n\n\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(4,2))\nax1.plot(x,y1,'.'); ax1.plot(x,y2,'x'); ax1.set_title(r'$(x_i,y_i)$')\nax2.plot(tilde(x),tilde(y1),'.'); ax2.plot(tilde(x),tilde(y2),'x'); ax2.set_title(r'$(\\tilde{x}_i,\\tilde{y}_i)$')\nfig.tight_layout()\n\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/09wk-2.html#a.-presentation",
    "href": "posts/09wk-2.html#a.-presentation",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "A. Presentation",
    "text": "A. Presentation\n\n- 프리젠테이션방식의 시각화는 화자가 다듬은 이야기를 전달하기에 좋은 시각화이다. 즉 잘 정리된 메시지를 전달하기에 좋다."
  },
  {
    "objectID": "posts/09wk-2.html#b.-exploration",
    "href": "posts/09wk-2.html#b.-exploration",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "B. Exploration",
    "text": "B. Exploration\n\n\n문학적유기체라는 작품이다.\n어떤 소설책을 시각화.\n수형도 + 칼라\n수형도의 의미: 단원 &lt;- 문단 &lt;- 문장 &lt;- 단어\n색깔: 여행, 음악, 파티 등 소설에서 자주 등장하는 소재 (색은 범주형 변수를 표현하기에 뛰어남)\n\n- 익스플로래이션 방식은 독자가 스스로 그림에서 메시지를 찾아낸다.\n- 소설을 읽어보지 않은 사람: 이 그래픽으로 소설책의 전체 주제를 미리 파악가능\n- 소설을 이미 읽어본 사람: 분석 & 탐구를 할 수 있음. ex: 파티와 음악이 동시에 등장하는 경우가 많다."
  },
  {
    "objectID": "posts/09wk-2.html#c.-절충",
    "href": "posts/09wk-2.html#c.-절충",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "C. 절충",
    "text": "C. 절충\n- 카이로: 사실 프리젠테이션과 익스플로레이션은 절충가능함\n\n## 이 그림을 보면 아래의 코드가 생각나야함\nfig = ggplot(tidydata)\nline = geom_line(aes(x=소득, y=불평등, color=정부))\ntext = geom_text(aes(x=소득, y=불평등, label=연도))\nfig + line + text \n\n초록색정부: 소득이 증가 & 불평등이 훨씬 더 증가\n갈색정부: 매우 빠른 경제 성장\n포인트간의 간격이 조밀하다 = 변화가 더디다 // 포인트간의 간격이 넓다 = 변화가 빠르다.\n\n- 언뜻보기에는 우리에게 익숙한 라인플랏인듯 보이지만 의외로 정보를 해석할만한 요소가 있다.\n\n익스플로레이션형의 그래프는 그릴줄도 알아야 하지만 남이 그린 그래프를 해석할 수도 있어야함."
  },
  {
    "objectID": "posts/09wk-2.html#a.-인구문제",
    "href": "posts/09wk-2.html#a.-인구문제",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "A. 인구문제",
    "text": "A. 인구문제\n- 주장1: 가난한 나라에서 애를 너무 많이 낳음 \\(\\to\\) 세계인구가 90억까지 증가할 것이다. (현재 70억)\n- 주장2: 잘사는 나라에서는 애를 적게 낳음 \\(\\to\\) 고령화 문제"
  },
  {
    "objectID": "posts/09wk-2.html#b.-리들리의-메시지",
    "href": "posts/09wk-2.html#b.-리들리의-메시지",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "B. 리들리의 메시지",
    "text": "B. 리들리의 메시지\n- 둘다 틀렸다.\n- 가난한 나라의 출산율은 점점 감소\n- 잘사는 나라의 출산율은 점점 증가\n- 세계의 인구는 안정화 될 것 (증가하지도 감소하지도 않는다) + 고령화문제도 오지 않음 (잘사는 나라에서 출산율이 증가하니까)\n- 아래의 그림이 그 증거이다."
  },
  {
    "objectID": "posts/09wk-2.html#c.-카이로",
    "href": "posts/09wk-2.html#c.-카이로",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "C. 카이로",
    "text": "C. 카이로\n- 리들러의 메시지는 아래의 그림들이 더 잘 전달한다.\n\n## 이 그림을 보면 아래의 코드가 생각나야함\nfig = ggplot(tidydata)\nline = geom_line(aes(x=연도, y=인구증가율, color=국가))\nfig + line \n# 출력 후 회색부분은 illustrator를 이용하여 처리함\n\n노르웨이, 영국, 스웨덴, 영국, 스페인, 이탈리아의 경우 출산율이 반등함 (일본과 동일의 경우는 감소세가 아주 누그러듬)\n인도, 브라질, 중국과 같은 나라는 출산율이 대폭감소"
  },
  {
    "objectID": "posts/09wk-2.html#d.-제-소감",
    "href": "posts/09wk-2.html#d.-제-소감",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "D. 제 소감",
    "text": "D. 제 소감\n- 어떠한 현상을 살펴볼때 그것의 부분집합들이 역시 그러한지 살펴보는것은 기본임\n- 중요한 선을 제외한 나머지는 회색처리(adobe illustrator 사용) 한 것이 시각적으로 우수하며, 인상적이었음\n- 과학적인 논문작업에 들어갈 그림이라면 임의로 회색처리한 것이 다소 비판을 받을 수 있음."
  },
  {
    "objectID": "posts/09wk-2.html#a.-상관관계의-해석",
    "href": "posts/09wk-2.html#a.-상관관계의-해석",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "A. 상관관계의 해석",
    "text": "A. 상관관계의 해석\n\n## left \nfig = ...\npoint = geom_point(aes(x=출산율, y=1인당소득))\nsmooth = geom_point(aes(x=출산율, y=1인당소득))\ntext = geom_text(aes(x=출산율, y=1인당소득, label=국가))\nfig + point + smooth + text\n## right \nfig = ...\npoint = geom_point(aes(x=출산율, y=여중생비율))\nsmooth = geom_point(aes(x=출산율, y=여중생비율))\ntext = geom_text(aes(x=출산율, y=여중생비율, label=국가))\nfig + point + smooth + text\n- 해설: 그림1.7 당신이 더 교육받고 부유할수록, 가질 아이들의 수는 적어집니다.\n- 소감: 문장표현이 좀 아쉽네? 여중을 다 때려부시면 출산율이 올라가나요???"
  },
  {
    "objectID": "posts/09wk-2.html#b.-남미국가들의-국방력",
    "href": "posts/09wk-2.html#b.-남미국가들의-국방력",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "B. 남미국가들의 국방력",
    "text": "B. 남미국가들의 국방력\n- 아래는 남미국가들의 국방력을 시각화한 그림\n\n\n쓸모없는 그래픽\n뭐 기억나는 것이 있나요?\n\n- 아래가 더 우수한 그림이다. 더 정확한 비교를 할 수 있어요.\n\n- 그리고 위의 그림보다 아래의 그림이 더 우수한 시각화이다.\n\n\n브라질의 국방력은 모든 지표에서 1등이다. 우선 1. 군인수도 많고(왼쪽그림) 2. 예산도 많이 투자하는 것 같다(가운데그림).\n그런데 인구가 흑막인것 같다(오른쪽그림).\n\n\n소감: 하이라이팅이 우아함..\n\n- 흑막을 제거\n\n\n그런데 사실 흑막을 제거하고 보니까 1. 인구당 군인수도 많지 않고 (왼쪽그림) 2. 인구당 국방비 지출도 3등 수준으로 높지 않고 (가운데 그림) 3. 군인당 교육투자비도 높지 않다 (오른쪽 그림)\n즉 내실이 없다는 의미\n\n- 최종적으로 제안하는 그래프\n\n\n위의 2개: 이미 살펴봄.\n좌측하단: 산점도가 추가되었네?\n우측하단: 관심있는 그래프가 아님\n\n# 좌측하단의 그래프\nfig = ... \npoint = geom_point(aes(x=인구, y=군인수, size=예산))\nfig + point\n\n사실 저는 아래의 그래프가 좋은 시각화라고 생각안해요\n\n- 1사분면의 의미: 인구도 높고 군인수도 많은 나라 (똑같은 정보, 의미가 없다. 마치 \\(x\\)축이 토익점수, \\(y\\)축이 텝스점수 같은느낌임)\n\n모든 점들이 직선에 몰려있다면? \\(\\to\\) 왜 2차원으로 표현함?\n\n- 저같으면 aes(x='예산(인구효과제거)', y='군인수(인구효과제거)',size='인구')로 할 것 같아요.\n\n1사분면의 의미: 예산도 많이 쓰고 군인수도 많은나라 = 콜롬비아.\n4사분면의 의미: 예산은 많이 쓰는데 군인수가 적은나라 = 브라질\n\n- 산점도에서 데이터를 한눈에 파악하고 특징을 요약하기 위해서는 \\(x\\)축과 \\(y\\)축에 너무 비슷한 성질의 변수로 설정하지 마라.\n아래중 어떤것이 더 바람직한 그래프일까?\nfig1 = ggplot() + geom_point(aes(x='토익', y='텝스', color='합/불', shape='회사의종류'))\nfig2 = ggplot() + geom_point(aes(x='토익', y='GPA', color='합/불', shape='회사의종류'))\nfig2가 더 합리적이지 않나?"
  },
  {
    "objectID": "posts/09wk-2.html#c.-스페인의-실업률",
    "href": "posts/09wk-2.html#c.-스페인의-실업률",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "C. 스페인의 실업률",
    "text": "C. 스페인의 실업률\n\n\n명암으로 왜 크기비교를 하는것인가?\n\n- 비교를 위해서는 바플랏이 더 우수하다."
  },
  {
    "objectID": "posts/09wk-2.html#d.-은행들의-시가총액",
    "href": "posts/09wk-2.html#d.-은행들의-시가총액",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "D. 은행들의 시가총액",
    "text": "D. 은행들의 시가총액\n- 카이로교수님의 강의자료에 등장하는 그림\n- 회색이 befor, 검은색이 after\n\n\n크기비교는 버블로 하는것이 아니다.\n\n- 우리눈은 작원원이 큰원의 절반정도 차지한다고 느껴진다.\n\n- 그렇지만 실제로는 아래와 같음\n\n- 버블차트는 크기를 왜곡시킨다."
  },
  {
    "objectID": "posts/09wk-2.html#e.-분열된-유권자들",
    "href": "posts/09wk-2.html#e.-분열된-유권자들",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "E. 분열된 유권자들",
    "text": "E. 분열된 유권자들\n- 하지만 아래의 버블차트는 우수하다. (왜? 크기비교 자체가 목적이 아니므로)\n\n\n선거지도는 수치비교에 별로 관심이 없다.\n대신에 민주당표와 공화당표가 어떤 지역에 몰렸는지 파악하는 것이중요\n따라서 aes중 가장 중요한 \\(x\\), \\(y\\)를 모두 지역정보를 표현하기 위해 투자함\n\n좋은 aes 속성들\n\n위로 갈수록 좋아!"
  },
  {
    "objectID": "posts/09wk-2.html#f.-잡스의-시각화",
    "href": "posts/09wk-2.html#f.-잡스의-시각화",
    "title": "09wk-2: 훌륭한 시각화 (2)",
    "section": "F. 잡스의 시각화",
    "text": "F. 잡스의 시각화\n- 국민상식: 크기비교에서 3D플랏은 좋지 않음\n\n- 그런데 스티븐잡스는 아래와 같이 시각화를 했음.\n\n\n잘 몰라서 한것일까? 고의로 한것일까?\nref: https://paragraft.wordpress.com/2008/06/03/the-chart-junk-of-steve-jobs/"
  },
  {
    "objectID": "posts/09wk-1-mid.html",
    "href": "posts/09wk-1-mid.html",
    "title": "09wk-1: 중간고사",
    "section": "",
    "text": "import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom plotnine import * \n#---#\nimport PIL\nimport io \nimport requests\nimport cv2"
  },
  {
    "objectID": "posts/09wk-1-mid.html#에너지-사용-추세-10점",
    "href": "posts/09wk-1-mid.html#에너지-사용-추세-10점",
    "title": "09wk-1: 중간고사",
    "section": "(1) 에너지 사용 추세 – 10점",
    "text": "(1) 에너지 사용 추세 – 10점\n2018년부터 2021년까지 에너지사용량을 dot-connected plot으로 시각화 하라.\n시각화 예시\n\n세부지침\n1. plotnine으로 생성된 fig1에 .draw()메소드를 사용하여 matplotlib.figure.Figure 자료형으로 변환할것\n1 type이 plotnine.ggplot.ggplot 인 오브젝트2. 변환된 자료형에 fig.suptitle() method를 사용하여 제목을 설정할것."
  },
  {
    "objectID": "posts/09wk-1-mid.html#에너지-종류별-사용-추세-10점",
    "href": "posts/09wk-1-mid.html#에너지-종류별-사용-추세-10점",
    "title": "09wk-1: 중간고사",
    "section": "(2) 에너지 종류별 사용 추세 – 10점",
    "text": "(2) 에너지 종류별 사용 추세 – 10점\n2018년부터 2021년까지 에너지사용량을 dot-connected plot으로 시각화 하라. 에너지의 유형은 색상으로 구분하라.\n시각화 예시\n\n세부지침\n1 geom_point의 color와 shape을 EneryType으로 설정할 것.\n2 geom_line의 color와 linetype을 EneryType으로 설정할 것"
  },
  {
    "objectID": "posts/09wk-1-mid.html#년-대비-2021년의-전기에너지-사용량-증가-20점",
    "href": "posts/09wk-1-mid.html#년-대비-2021년의-전기에너지-사용량-증가-20점",
    "title": "09wk-1: 중간고사",
    "section": "(3) 2020년 대비 2021년의 전기에너지 사용량 증가 – 20점",
    "text": "(3) 2020년 대비 2021년의 전기에너지 사용량 증가 – 20점\n2020년 대비 2021년의 전기에너지 사용량이 증가한 상위 5개의 지역을 아래와 같이 시각화하라.\n시각화 예시\n\n세부지침\n1. 2020년 대비 2021년의 전기에너지 사용 증가량은 아래와 같이 구한다.\n\\[\\text{서울의 전기에너지 사용 증가량} = \\frac{\\text{2021년 서울 전기에너지 사용량}-\\text{2020년 서울 전기에너지 사용량}}{\\text{2020년 서울 전기에너지 사용량}}\\]\n\n\\(\\text{서울의 2021년 전기에너지 사용 증가량}= \\text{2021년 강남구의 전기에너지 사용량} + \\dots + \\text{2021년 중랑구의 전기에너지 사용량}\\)\n\\(\\text{서울의 2020년 전기에너지 사용 증가량}= \\text{2020년 강남구의 전기에너지 사용량} + \\dots + \\text{2020년 중랑구의 전기에너지 사용량}\\)\n\n2. 전기에너지의 사용량이 증가한 상위5개의 지역 중 가장 많이 증가한 2개의 지역은 색깔과 투명도로 하이라이팅 한다. (구체적 코드는 hint를 참고할 것)\n힌트\n- 정리된 자료의 형태는 아래와 같아야 한다.\n\n- 그림안에 text를 넣기위해서 geom_text를 시용한다. 위의 데이터가 정리되었다는 전제하에 구체적인 시각화 코드는 아래와 같다.\nfig = ggplot(tidydata.query('Rank&lt;5'))\ncol = geom_col(aes(x='Rank',y='ElecUseInc',fill='Top2',alpha='Top2'))\ntext = geom_text(aes(x='Rank',y='ElecUseInc',label='Prov'))\nfig + col + text + scale_alpha_manual(values={True: 1, False: 0.2})"
  },
  {
    "objectID": "posts/09wk-1-mid.html#건물당-에너지-소비량-연도별-상위-15구-비교-20점",
    "href": "posts/09wk-1-mid.html#건물당-에너지-소비량-연도별-상위-15구-비교-20점",
    "title": "09wk-1: 중간고사",
    "section": "(4) 건물당 에너지 소비량: 연도별 상위 15구 비교 – 20점",
    "text": "(4) 건물당 에너지 소비량: 연도별 상위 15구 비교 – 20점\n건물당 에너지소비량이 가장 큰 15개의 구를 연도별로 시각화하라.\n시각화 예시\n\n세부지침\n1. 건물당 에너지 사용량(=EUB)을 아래와 같은 방식으로 구할 것\n\\[\\text{EUB}_{강남구,2018}=\\frac{\\text{강남구의 2018년도 전기에너지 사용량}+ \\text{강남구의 2018년도 도시가스 사용량} +\\text{강남구의 2018년도 지역난방 사용량}}{\\text{강남구의 2018년도 건물동수}}\\]\n2. 연도별로 EUB가 높은 15개의 구를 정렬할 것. (따라서 매년도마다 순위가 다를수 있음)"
  },
  {
    "objectID": "posts/09wk-1-mid.html#수도권과-비수도권의-전기-에너지-사용량-및-사용-비율-20점",
    "href": "posts/09wk-1-mid.html#수도권과-비수도권의-전기-에너지-사용량-및-사용-비율-20점",
    "title": "09wk-1: 중간고사",
    "section": "(5) 수도권과 비수도권의 전기 에너지 사용량 및 사용 비율 – 20점",
    "text": "(5) 수도권과 비수도권의 전기 에너지 사용량 및 사용 비율 – 20점\n수도권과 비수도권의 전기에너지 사용량 및 사용비율을 계산하고 시각화 하라.\n시각화예시\n\n세부지침\n1. ['Seoul','Gyeonggi-do','Incheon']은 수도권으로 그 외의 지역은 비수도권으로 분리한다.\n2. 수도권의 전기에너지 사용비율은 아래와 같이 구한다.\n\\[\\text{2018년 수도권의 전기에너지 사용비율} = \\frac{\\text{2018년 수도권의 전기 사용량}}{\\text{2018년 수도권의 전기 사용량}+\\text{2018년 수도권의 도시가스 사용량}+\\text{2018년 수도권의 지역난방 사용량}}\\]\n3. facet_wrap 사용시 scales='free' 옵션을 사용할 것"
  },
  {
    "objectID": "posts/09wk-1-mid.html#나이와-포지션에-따른-선수-가치-및-급여-분석-10점",
    "href": "posts/09wk-1-mid.html#나이와-포지션에-따른-선수-가치-및-급여-분석-10점",
    "title": "09wk-1: 중간고사",
    "section": "(1) 나이와 포지션에 따른 선수 가치 및 급여 분석 – 10점",
    "text": "(1) 나이와 포지션에 따른 선수 가치 및 급여 분석 – 10점\n나이에 따른 선수가치(Value)와 급여(Wage)의 산점도를 포지션별로 시각화 하고 추세선을 그려라.\n시각화 예시\n\n세부지침\n1. Value와 Wage는 log값을 취하여 시각화 하라.\n2. geom_point를 사용할 시alpha=0.2, size=0.1, position='jitter'로 설정하라.\n3. SUB와 RES 포지션은 제외하고 시각화 할 것"
  },
  {
    "objectID": "posts/09wk-1-mid.html#골키퍼-능력치별-로그급여-추세-10점",
    "href": "posts/09wk-1-mid.html#골키퍼-능력치별-로그급여-추세-10점",
    "title": "09wk-1: 중간고사",
    "section": "(2) 골키퍼 능력치별 로그급여 추세 – 10점",
    "text": "(2) 골키퍼 능력치별 로그급여 추세 – 10점\n아래의 리스트는 골키퍼와 관련된 능력치이다.\n\ngkstats = ['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ngkstats\n\n['GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\n\ngkstats 에 해당하는 능력치와 로그급여(logWage)를 산점도로 시각화하고 추세선을 추가하라.\n시각화예시\n\n세부지침\n1. 포지션이 “골키퍼”인 선수에 한정하여 시각화 할 것\n2. geom_point를 사용할 시 alpha=0.5,size=0.5,position='jitter' 를 설정하라."
  },
  {
    "objectID": "posts/09wk-1-mid.html#gkability에-따른-골키퍼의-overall-예측-20점",
    "href": "posts/09wk-1-mid.html#gkability에-따른-골키퍼의-overall-예측-20점",
    "title": "09wk-1: 중간고사",
    "section": "(3) “GKAbility”에 따른 골키퍼의 Overall 예측 – 20점",
    "text": "(3) “GKAbility”에 따른 골키퍼의 Overall 예측 – 20점\n아래의 리스트는 골키퍼와 관련된 능력치이다.\n\ngkstats = ['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ngkstats\n\n['GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\n\ngkstats 에 해당하는 능력치의 평균을 계산하고 GKAbility라는 변수에 저장하라. 골키퍼 포지션과 공격수 포지션을 가지는 선수들에 한정하여 GKAbility와 OveraAll(=선수의 전반적 능력치)의 관계를 산점도로 시각화하라.\n시각화 예시\n\n세부지침\n1. ID=212198인 선수 Bruno Fernandes의 경우 GKAbility를 아래와 같이 계산할 수 있다.\n\\[\\text{Bruno Fernandes의 GKAbility} = \\frac{\\text{Bruno Fernandes의 GKDiving} + \\dots + \\text{Bruno Fernandes의 GKReflexes}}{5}\\]\n2. 시각화를 위한 세부옵션은 아래의 코드를 참고하라.\nfig = ggplot(tidydata)\npoint = geom_point(aes(x='GKAbility',y='Overall',size='logWage',alpha='logWage',color='Position'),position='jitter')\nsmooth = geom_smooth(aes(x='GKAbility',y='Overall'),linetype='dashed')\nfacet = facet_wrap('Position',scales='free')\nfig + point + smooth + facet"
  },
  {
    "objectID": "posts/09wk-1-mid.html#포워드와-수비수의-기술별-가치-평가-25점",
    "href": "posts/09wk-1-mid.html#포워드와-수비수의-기술별-가치-평가-25점",
    "title": "09wk-1: 중간고사",
    "section": "(4) 포워드와 수비수의 기술별 가치 평가 – 25점",
    "text": "(4) 포워드와 수비수의 기술별 가치 평가 – 25점\n아래는 축구선수의 능력치와 관련이 있는 column들의 리스트이다. (골키퍼 관련 능력치는 제외하였음)\n\nabilities_list = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'StandingTackle', 'SlidingTackle']\n\n아래는 위의 abilities_list을 적당한 카테고리로 묶은 것이다.\n\nabilities_categories = {\n    \"FinishingSkills\": ['Finishing', 'HeadingAccuracy', 'Volleys', 'LongShots', 'Positioning', 'Vision', 'Penalties', 'ShotPower', 'Jumping'],\n    \"BallControl_Passing\": ['Dribbling', 'Curve', 'Crossing','ShortPassing', 'LongPassing', 'BallControl','FKAccuracy'],\n    \"Speed_Stamina\": ['Acceleration', 'SprintSpeed', 'Agility', 'Stamina'],\n    \"Reactions_PhysicalAttributes\": ['Reactions', 'Balance', 'Strength', 'Composure'],\n    \"DefensiveSkills\": ['Aggression', 'Interceptions', 'StandingTackle', 'SlidingTackle']\n}\n\n선수들의 여러 능력치를 abilities_categories에 따라 통합하고 각 스킬 카테고리별로 선수의 능력치의 평균을 구하여 SkillValueCategories값에 저장하라. 정리된 자료의 예시는 아래와 같다.\n\n위의 자료를 바탕으로 SkillValueCategories와 logValue의 산점도를 포지션별로 시각화 하라.\n시각화 예시\n\n힌트\n- 아래의 데이터프레임에서\n\n마지막 row의 SkillValueCategories의 값은 아래와 같이 구하였다.\n\\[14.250 = \\frac{\\text{259646선수의 Aggression}+\\dots+\\text{259646선수의 SlidingTackle}}{4}=\\frac{24+6+14+13}{4} \\]\n\n(24+6+14+13)/4\n\n14.25\n\n\n- 시각화를 위해 아래의 코드를 참고하라.\nfig = ggplot(tidydata.query(\"Position=='FORWARD' or Position=='DEFENDER'\"))\npoint = geom_point(aes(x='SkillValueCategories',y='logValue',color='Position'),alpha=0.05,size=0.05)\nsmooth = geom_smooth(aes(x='SkillValueCategories',y='logValue',color='Position'))\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + point + smooth + facet).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig"
  },
  {
    "objectID": "posts/09wk-1-mid.html#스킬-카테고리별-선수의-로그-연봉-분석-25점",
    "href": "posts/09wk-1-mid.html#스킬-카테고리별-선수의-로그-연봉-분석-25점",
    "title": "09wk-1: 중간고사",
    "section": "(5) 스킬 카테고리별 선수의 로그 연봉 분석 – 25점",
    "text": "(5) 스킬 카테고리별 선수의 로그 연봉 분석 – 25점\n공격수 포지션을 가진 선수들의 특정 능력치가 그들의 Value에 얼마나 영향을 주는지 알아보고자 한다. 선수들의 logValue를 10개의 구간으로 나눈 후, 각 구간별로 [‘FinishingSkills’,…,‘DefensiveSkills’]의 통합능력치 평균을 바 플롯(bar plot)으로 시각화하라.\n시각화 예시\n\n세부지침\n1. logValue는 pd.qcut을 이용하여 분할하고 이때 q=10으로 설정하라.\n2. 시각화를 위해 아래의 코드를 사용하라.\nfig = ggplot(tidydata.query(\"Position=='FORWARD'\")) \ncol = geom_col(aes(x='logValueCut',y='SkillValueCategories',fill='logValueCut'),position='dodge')\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + col + facet + theme(axis_text_x=element_blank(), axis_ticks=element_blank())).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig"
  },
  {
    "objectID": "posts/09wk-1-mid.html#심슨의-역설-10점",
    "href": "posts/09wk-1-mid.html#심슨의-역설-10점",
    "title": "09wk-1: 중간고사",
    "section": "(1) 심슨의 역설 – 10점",
    "text": "(1) 심슨의 역설 – 10점\n다음은 농구선수 A,B 의 시즌별 자유투 성공률이다.\n\ndf = pd.DataFrame({\n    'Player': ['A','A','A','A','B','B','B','B'], \n    'Season': [1,1,2,2]*2,\n    'Status': ['Success','Failure']*4,\n    'Count': [7,3,None,None,None,None,4,0]\n})\ndf\n\n\n\n\n\n\n\n\nPlayer\nSeason\nStatus\nCount\n\n\n\n\n0\nA\n1\nSuccess\n7.0\n\n\n1\nA\n1\nFailure\n3.0\n\n\n2\nA\n2\nSuccess\nNaN\n\n\n3\nA\n2\nFailure\nNaN\n\n\n4\nB\n1\nSuccess\nNaN\n\n\n5\nB\n1\nFailure\nNaN\n\n\n6\nB\n2\nSuccess\n4.0\n\n\n7\nB\n2\nFailure\n0.0\n\n\n\n\n\n\n\n적절한 값을 채워 시즌 1,2 모두 B선수의 자유투 성공률이 높지만 시즌1-2를 전체 합치면 A선수의 자유투 성공률이 더 높도록 하라. (즉 적절한 값을 채워 심슨의 역설을 설명하기 위한 자료를 구성하라.) 만들어진 자료를 바탕으로 심슨의 역설을 시각화하라. (즉 시즌별 자유투 성공률과 전체 자유투 성공률을 barplot으로 시각화하라)"
  },
  {
    "objectID": "posts/09wk-1-mid.html#histogram-equalization-5점",
    "href": "posts/09wk-1-mid.html#histogram-equalization-5점",
    "title": "09wk-1: 중간고사",
    "section": "(2) Histogram Equalization – 5점",
    "text": "(2) Histogram Equalization – 5점\n\nurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Unequalized_Hawkes_Bay_NZ.jpg/300px-Unequalized_Hawkes_Bay_NZ.jpg'\nimg_before = np.array(PIL.Image.open(io.BytesIO(requests.get(url).content)))\nimg_after = cv2.equalizeHist(img_before)\nfig,ax = plt.subplots(2,2)\nax[0,0].imshow(img_before,cmap='gray',vmax=255,vmin=0); ax[0,0].set_title(\"(a) before: image\")\nax[0,1].imshow(img_after,cmap='gray',vmax=255,vmin=0); ax[0,1].set_title(\"(b) after: image\")\nax[1,0].hist(img_before.reshape(-1), bins=255); ax[1,0].set_title(\"(c) before: histogram\")\nax[1,1].hist(img_after.reshape(-1), bins=255); ax[1,1].set_title(\"(d) after: histogram\")\nfig.tight_layout()\n\n\n\n\n\n\n\n\n위의 그림을 올바르게 해석한 사람을 모두 고르라. (모두 맞출 경우만 정답으로 인정)\n\n유진: (a) 이미지의 값들은 (b) 이미지의 값들 보다 분산이 작을 것이다.\n레이: (a) 이미지의 값은 대부분 130~150근처에 모여있어서 회색으로 보인다.\n원영: 130~150 사이의 값들은 (b) 이미지 보다 (a) 이미지에서 훨씬 많은 빈도로 나타난다.\n리즈: (a) 이미지를 (b) 이미지로 바꾸는 기법을 histogram equalization 이라고 하며, 그 원리는 (c)와 같은 히스토그램을 (d)와 같은 히스토그램으로 바꾸는 것이다."
  },
  {
    "objectID": "posts/09wk-1-mid.html#엔스콤의-플랏-5점",
    "href": "posts/09wk-1-mid.html#엔스콤의-플랏-5점",
    "title": "09wk-1: 중간고사",
    "section": "(3) 엔스콤의 플랏 – 5점",
    "text": "(3) 엔스콤의 플랏 – 5점\n\nx = [10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5]\ny1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68]\ny2 = [9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74]\ny3 = [7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73]\nx4 = [8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8]\ny4 = [6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89]\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2)\nax1.plot(x,y1,'.') \nax1.set_title(\"(a)\")\nax2.plot(x,y2,'.') \nax2.set_title(\"(b)\")\nax3.plot(x,y3,'.'); ax3.plot(x[2],y3[2],'o',color='C1') \nax3.set_title(\"(c)\")\nax4.plot(x4,y4,'.'); ax4.plot(x4[-4],y4[-4],'o',color='C1')\nax4.set_title(\"(d)\")\nfig.suptitle(\"Anscombe's quartet\",size=15)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n위의 그림을 올바르게 해석한 사람을 모두 고르라. (모두 맞출경우만 정답으로 인정)\n\n유진: (a)-(d) 모두 양의 상관계수를 가진다.\n레이: 이 중 상관계수값의 해석이 가장 적절한 자료는 (a)이다.\n원영: (b)가 적절하지 않은 이유는 선형성이 가정되어 있지 않기 때문이며, (c)가 적절하지 않은 이유는 주황색점으로 표시된 점이 계수값을 크게 바꾸기 때문이다.\n리즈: (d)의 경우 주황색점의 값 \\((x,y)\\)을 \\((-x,y)\\)로 바꾸게 된다면 상관계수의 부호가 음수가 될 것이다."
  },
  {
    "objectID": "posts/09wk-1-mid.html#아이스크림을-많이-먹으면-걸리는-병-5점",
    "href": "posts/09wk-1-mid.html#아이스크림을-많이-먹으면-걸리는-병-5점",
    "title": "09wk-1: 중간고사",
    "section": "(4) 아이스크림을 많이 먹으면 걸리는 병 – 5점",
    "text": "(4) 아이스크림을 많이 먹으면 걸리는 병 – 5점\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/icecream.csv')\nggplot(data=df.assign(temp=pd.cut(df.temp,[-np.inf,0,5,10,15,20,25,30,np.inf])))\\\n+geom_point(aes(x='icecream',y='disease',color='temp'))\\\n+geom_smooth(aes(x='icecream',y='disease',color='temp'))\n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n\n\n\n\n\n\n\n\n\n아래의 그림을 보고 올바르게 해석한 사람을 모두 고르라. (모두 맞출경우만 정답으로 인정)\n\n그림에 대한 배경설명은 강의노트 “아이스크림을 많이 먹으면 걸리는 병”을 참고\n\n\n원영: (아이스크림 판매량, 소아마비 반응수치)의 상관계수값은 양수이다.\n가을: 온도를 통제하였을 경우 (아이스크림 판매량, 소아마비 반응수치)의 상관계수값은, 온도를 통제하지 않았을 경우 (아이스크림 판매량, 소아마비 반응수치)의 상관계수 값보다 작다.\n이서: (온도, 소아마비 반응수치)의 상관계수 값은 양수이다.\n레이: (온도, 아이스크림 판매량)의 상관계수 값은 양수이다.\n유진: 온도가 유일한 은닉변수라면, 아이스크림 판매량과 소아마비 반응수치 사이에는 인과성이 없다고 볼 수 있다."
  },
  {
    "objectID": "posts/09wk-1-mid.html#산점도의-해석들-5점",
    "href": "posts/09wk-1-mid.html#산점도의-해석들-5점",
    "title": "09wk-1: 중간고사",
    "section": "(5) 산점도의 해석들 – 5점",
    "text": "(5) 산점도의 해석들 – 5점\n아래는 문제 4에 제시된 산점도와 그 해석들이다. 옳은 해석을 모두 골라라.\n\n답: 해석1, 해석2, 해석3\n\n\n해석4가 틀린이유: 상관계수가 0근처라면 FinishingSkill의 붉은 추세선이 x축과 거의 평행해야 한다.\n\n4-(1)\n\n\n\n4-(1)의 그림\n\n\n해석1: 모든 포지션에 대하여, (Age,logValue)는 음의 상관계수값을 가지며 (Age,logWage)는 양의 상관계수값을 가진다.\n4-(2)\n\n\n\n4-(2)의 그림\n\n\n해석2: [GKDiving,…,GKReflexes]는 모두 logWage와 양의 상관계수값을 가진다.\n4-(3)\n\n\n\n4-(3)의 그림\n\n\n해석3: GOALKEEPER 포지션의 경우 GKAbility를 이용하여 Overall을 추정하는 것이 합리적이지만 FORWARD 포지션의 경우 GKAbility를 이용하여 Overall을 추정하는 것은 합리적이지 않다.\n4-(4)\n\n\n\n4-(4)의 그림\n\n\n해석4: 수비수 포지션의 경우 FinishingSkills 과 logValue 사이의 상관계수 값은 거의 0에 가깝다."
  },
  {
    "objectID": "posts/01wk-1.html",
    "href": "posts/01wk-1.html",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "",
    "text": "박스플랏, 히스토그램"
  },
  {
    "objectID": "posts/01wk-1.html#a.-motivating-example",
    "href": "posts/01wk-1.html#a.-motivating-example",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "A. motivating example",
    "text": "A. motivating example\n- 통계란?\n- 평균 좋아해요?\n# 예제1 – 전북고등학교: 평균은 좋은 측정값인가?\n- 전북고등학교에서 통계학을 수업하는 A선생님과 B선생님의 있다.\n\ny1=[75,75,76,76,77,77,78,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들\ny2=[76,76,77,77,78,78,79,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 \n\n- 어떤반이 더 공부를 잘할까?, 누가 더 잘 가르칠까?\n\nnp.mean(y1)\n\n79.0\n\n\n\nnp.mean(y2)\n\n78.2\n\n\n- 의사결정: A선생님에게 배운 학생들의 평균이 더 높다. -&gt; A선생님이 더 강의를 잘 하셨다?\n- 반론: 평균은 A반(=A선생님에게 통계학을 배운 반)이 더 높다. 그런데 98점을 받은 학생이 A반에 포함되어서 A반이 전체평균이 높게 나온것이고 나머지 학생들은 전체적으로 B반 학생들이 더 시험을 잘 보았다고 해석할 수 있다.\n- 교훈: 단순한 평균비교보다 학생들이 받은 점수의 분포를 비교해보는 것이 중요하다. 분포를 살펴보는 방법 중 유용한 방법이 박스플랏이다.\n#"
  },
  {
    "objectID": "posts/01wk-1.html#b.-matplotlib으로-boxplot-그리기",
    "href": "posts/01wk-1.html#b.-matplotlib으로-boxplot-그리기",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "B. matplotlib으로 boxplot 그리기",
    "text": "B. matplotlib으로 boxplot 그리기\n- A반 학생들의 박스플랏 그리기\n\nplt.boxplot(y1);\n\n\n\n\n\n\n\n\n- B반 학생들의 박스플랏 그리기\n\nplt.boxplot(y2);\n\n\n\n\n\n\n\n\n- A반 학생들의 점수와 B반 학생들의 점수를 나란히 박스플랏으로 그리자.\n\nplt.boxplot([y1,y2]);"
  },
  {
    "objectID": "posts/01wk-1.html#c.-boxplot이란",
    "href": "posts/01wk-1.html#c.-boxplot이란",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "C. boxplot이란?",
    "text": "C. boxplot이란?\n- Galarnyk (2023)\n\nGalarnyk, Michael. 2023. “Python_tutorials.” https://github.com/mGalarnyk/Python_Tutorials.\n\nhttps://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/box_plot.ipynb\n\n\n\nCode\nnp.random.seed(916170)\n\n# connection path is here: https://stackoverflow.com/questions/6146290/plotting-a-line-over-several-graphs\nmu, sigma = 0, 1 # mean and standard deviation\ns = np.random.normal(mu, sigma, 1000)\n\nfig, axes = plt.subplots(nrows = 1, ncols = 1, figsize=(10, 5))\n\n# rectangular box plot\nbplot = axes.boxplot(s,\n                vert=False,\n                patch_artist=True, \n                showfliers=True, # This would show outliers (the remaining .7% of the data)\n                positions = [0],\n                boxprops = dict(linestyle='--', linewidth=2, color='Black', facecolor = 'red', alpha = .4),\n                medianprops = dict(linestyle='-', linewidth=2, color='Yellow'),\n                whiskerprops = dict(linestyle='-', linewidth=2, color='Blue', alpha = .4),\n                capprops = dict(linestyle='-', linewidth=2, color='Black'),\n                flierprops = dict(marker='o', markerfacecolor='green', markersize=10,\n                  linestyle='none', alpha = .4),\n                widths = .3,\n                zorder = 1)   \n\naxes.set_xlim(-4, 4)\nplt.xticks(fontsize = 14)\n\naxes.set_yticks([])\naxes.annotate(r'',\n            xy=(-.73, .205), xycoords='data',\n            xytext=(.66, .205), textcoords='data',\n            arrowprops=dict(arrowstyle=\"|-|\",\n                            connectionstyle=\"arc3\")\n            );\n\naxes.text(0, .25, \"Interquartile Range \\n(IQR)\",  horizontalalignment='center', fontsize=18)\naxes.text(0, -.21, r\"Median\", horizontalalignment='center', fontsize=16);\naxes.text(2.65, -.15, \"\\\"Maximum\\\"\", horizontalalignment='center', fontsize=18);\naxes.text(-2.65, -.15, \"\\\"Minimum\\\"\", horizontalalignment='center', fontsize=18);\naxes.text(-.68, -.24, r\"Q1\", horizontalalignment='center', fontsize=18);\naxes.text(-2.65, -.21, r\"(Q1 - 1.5*IQR)\", horizontalalignment='center', fontsize=16);\naxes.text(.6745, -.24, r\"Q3\", horizontalalignment='center', fontsize=18);\naxes.text(.6745, -.30, r\"(75th Percentile)\", horizontalalignment='center', fontsize=12);\naxes.text(-.68, -.30, r\"(25th Percentile)\", horizontalalignment='center', fontsize=12);\naxes.text(2.65, -.21, r\"(Q3 + 1.5*IQR)\", horizontalalignment='center', fontsize=16);\n\naxes.annotate('Outliers', xy=(2.93,0.015), xytext=(2.52,0.20), fontsize = 18,\n            arrowprops={'arrowstyle': '-&gt;', 'color': 'black', 'lw': 2},\n            va='center');\n\naxes.annotate('Outliers', xy=(-3.01,0.015), xytext=(-3.41,0.20), fontsize = 18,\n            arrowprops={'arrowstyle': '-&gt;', 'color': 'black', 'lw': 2},\n            va='center');\n\n\n\n\n\n\n\n\n\n\n가장 큰 값이 100%, 가장 작은 값이 0%, 중간값이 50%"
  },
  {
    "objectID": "posts/01wk-1.html#d.-boxplot을-언제-쓰면-좋을까",
    "href": "posts/01wk-1.html#d.-boxplot을-언제-쓰면-좋을까",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "D. boxplot을 언제 쓰면 좋을까?",
    "text": "D. boxplot을 언제 쓰면 좋을까?\n- 박스플랏의 장점: 단순히 평균을 주는 것보다 데이터를 파악하고 직관을 얻기에 유리하다.\n- 박스플랏이 이용되는 범위:\n\n첫 데이터 분석때 자료 분포를 파악하기 용이\nKaggel등의 대회참여시, 두 개 이상의 모형의 성능을 비교"
  },
  {
    "objectID": "posts/01wk-1.html#a.-motivating-example-1",
    "href": "posts/01wk-1.html#a.-motivating-example-1",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "A. motivating example",
    "text": "A. motivating example\n- 전북고예제에서 우리의 소망: “A반 B반 중에 어떤 반이 공부를 더 잘하냐?”, “A선생님과 B선생님 중 어떤 분의 강의가 효과적이었다고 평할 수 있는가?” 와 같은 단순한 질문에 대한 대답\n\n보통 이러한 질문은 중심경향값 중 하나를 골라서 비교하면 되었다.\n여기에서 중심경향값이란 데이터 분포의 중심을 보여주는 값으로 자료 전체를 대표할 수 있는 값을 말함. 평균, 중앙값등이 대표적인 중심경향값이다.\n\n- 전북고예제에서는 “A반 B반 중에서 어떤 반이 공부를 더 잘하냐?” 라는 질문의 대답으로 단순평균비교로는 의미가 없었다. 오히려 결과론적으로 보면 중앙값이 더 타당해 보인다.\n- 그런데 사실 생각해보면 중앙값을 기준으로 B반이 공부를 더 잘했다고 주장하는 것도 애매하다. 어쨌든 가장 공부잘한 학생은 A반에 있으니까!\n\n에이 한명 뿐이잖아요? 라고 생각할 수 있는데 그 한명이 2명 3명으로 점점 늘어난다고 생각해보자, 합리적인 기준을 제시할 수 있는가?\n그리고 A반을 지도한 선생님이 영재를 지도하는데 특화된 선생님일수도 있잖아요?\n\n- 사실 “A반 B반중에 누가 더 공부를 잘하냐?” 라는 질문은 굉장히 대답하기 곤란한 질문이다. 왜냐하면\n\n이슈1: 단순 평균비교로 이러한 질문에 답을 하기 어렵다.\n이슈2: 박스플랏으로 전체분포를 파악해도 어떠한 반이 더 공부를 잘한다는 기준을 잡는게 애매하다.\n\n- 그런데 특수한 경우에는 “A반 B반중에 누가 더 공부를 잘하냐?” 라는 질문에 대한 대답을 깔끔하게 할 수 있다.\n# 예제2 – 정규분포 전북고등학교: 평균은 좋은 측정값인가?\n- A반과 B반의 통계학 성적이 아래와 같다고 하자.\n\nnp.random.seed(43052)\ny1 = np.random.randn(10000)\ny2 = np.random.randn(10000) + 0.5 \n\n\nnp.mean(y1),np.mean(y2)\n\n(-0.011790879905079434, 0.4979147460611458)\n\n\n\nnp.mean(y2) - np.mean(y1)\n\n0.5097056259662253\n\n\ny2의 값이 y1의 값보다 전체적으로 0.5097056259662253 정도 높다고 볼 수 있다?\n\nplt.boxplot([y1,y2]);\n\n\n\n\n\n\n\n\n\n분포의 모양이 거의 비슷, 왼쪽그림을 컨트롤+C 하여 오른쪽에 붙인다음 0.5정도 y축으로 올린느낌이다!\n\n- 여기에서는 “B반의 성적 \\(\\approx\\) A반의 성적 + 0.5” 라고 주장해도 큰 무리가 없어보인다. 따라서 이 경우에는 “A반 B반 중에 어떤반이 더 공부를 잘하냐?” 라는 질문에 대하여 “B반이 평균적으로 0.5점정도 더 공부를 잘합니다” 라고 대답해도 괜찮다.\n\n이 예제에서는 우연히 극단적인 학생이 없었음.\n그렇지만 혹시 극단적인 학생이 나온다면? 걱징X. 너무 극단적인 값이 많이 나오면 정규분포가 아님 + 만약에 어떠한 반에서 극단적인 학생이 나온다면 똑같은 확률로 다른반 역시 그러한 극단적 학생이 나올 것\n\n- 결론: 정규분포 분포가정을 한다면 이슈1,2에 대한 문제를 한번에 해결가능 함\n#\n- 정규분포가정은 어떻게 할 수 있나? (= 데이터를 보고 어떻게 정규분포라고 알 수 있는가?): 데이터의 히스토그램을 그려서 종 모양이 되는지 확인해본다.1\n1 아직 초보단계라서 이것밖에 모를 수 있어요"
  },
  {
    "objectID": "posts/01wk-1.html#b.-histogram-이란",
    "href": "posts/01wk-1.html#b.-histogram-이란",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "B. histogram 이란?",
    "text": "B. histogram 이란?\n- 히스토그램: X축이 변수의 구간, Y축은 그 구간에 포함된 빈도를 의미하는 그림"
  },
  {
    "objectID": "posts/01wk-1.html#c.-histogram-그리기",
    "href": "posts/01wk-1.html#c.-histogram-그리기",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "C. histogram 그리기",
    "text": "C. histogram 그리기\n- 히스토그램의 예시1 – 기본플랏, ;으로 결과 생략하기\n\ny=[10,11,12,15,16,20,21,22,23,24,25]\n\n\nplt.hist(y)\n\n(array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]),\n array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n\nplt.hist(y,bins=10)\n\n(array([2., 1., 0., 1., 1., 0., 1., 1., 2., 2.]),\n array([10. , 11.5, 13. , 14.5, 16. , 17.5, 19. , 20.5, 22. , 23.5, 25. ]),\n &lt;BarContainer object of 10 artists&gt;)\n\n\n\n\n\n\n\n\n\n- 히스토그램 예시2 – bins 옵션이용\n\nplt.hist(y,bins=3)\n\n(array([3., 2., 6.]),\n array([10., 15., 20., 25.]),\n &lt;BarContainer object of 3 artists&gt;)\n\n\n\n\n\n\n\n\n\n- 히스토그램 예시3 – bins=3 옵션의 결과값 해석\n\nplt.hist(y,bins=3)\n\n(array([3., 2., 6.]),\n array([10., 15., 20., 25.]),\n &lt;BarContainer object of 3 artists&gt;)\n\n\n\n\n\n\n\n\n\n\n가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다.\nrange / bins = 15 / 3 = 5 이므로 각 구간의 간격은 5이다.\n구간은 [10,15), [15,20), [20,25] 로 나눈다.\n각 구간에 포함된 자료의 수는 3,2,6 이다.\n\n- 히스토그램 예시4 – bins=7 옵션의 결과값 해석\n\nplt.hist(y,bins=7) \n\n(array([3., 0., 2., 0., 1., 2., 3.]),\n array([10.        , 12.14285714, 14.28571429, 16.42857143, 18.57142857,\n        20.71428571, 22.85714286, 25.        ]),\n &lt;BarContainer object of 7 artists&gt;)\n\n\n\n\n\n\n\n\n\n\n가장 큰 값은 25, 가장 작은 값은 10이므로 range는 15이다.\nrange / bins = 15 / 7 = 2.142857142857143 이므로 각 구간의 간격은 2.142857142857143이다.\n구간은 [10,12.14285714), [12.14285714,14.28571429,), [22.85714286,25] 로 나눈다.\n각 구간에 포함된 자료의 수는 3,0,2,0,1,2,3 이다.\n\n- 히스토그램 예시5 – range 옵션\n\nplt.hist(y,bins=7,range=[0,30]) # range를 변경하면 --&gt; 구간도 달라짐\n\n(array([0., 0., 3., 2., 2., 4., 0.]),\n array([ 0.        ,  4.28571429,  8.57142857, 12.85714286, 17.14285714,\n        21.42857143, 25.71428571, 30.        ]),\n &lt;BarContainer object of 7 artists&gt;)\n\n\n\n\n\n\n\n\n\n- 히스토그램 예시6 – 나란히 그리기\n\nnp.random.seed(43052)\ny1 = np.random.randn(10000)\ny2 = np.random.randn(10000) + 0.5 \nplt.hist([y1,y2],bins=100);"
  },
  {
    "objectID": "posts/01wk-1.html#a.-예비학습1-이미지자료-다운로드",
    "href": "posts/01wk-1.html#a.-예비학습1-이미지자료-다운로드",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "A. 예비학습1: 이미지자료 다운로드",
    "text": "A. 예비학습1: 이미지자료 다운로드\n- ref: https://en.wikipedia.org/wiki/Histogram_equalization\n\n!wget https://upload.wikimedia.org/wikipedia/commons/0/08/Unequalized_Hawkes_Bay_NZ.jpg\nimg = cv2.imread('Unequalized_Hawkes_Bay_NZ.jpg')\n!rm Unequalized_Hawkes_Bay_NZ.jpg\n\n--2023-09-04 11:59:07--  https://upload.wikimedia.org/wikipedia/commons/0/08/Unequalized_Hawkes_Bay_NZ.jpg\nResolving upload.wikimedia.org (upload.wikimedia.org)... 103.102.166.240, 2001:df2:e500:ed1a::2:b\nConnecting to upload.wikimedia.org (upload.wikimedia.org)|103.102.166.240|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 110895 (108K) [image/jpeg]\nSaving to: ‘Unequalized_Hawkes_Bay_NZ.jpg’\n\nUnequalized_Hawkes_ 100%[===================&gt;] 108.30K   572KB/s    in 0.2s    \n\n2023-09-04 11:59:07 (572 KB/s) - ‘Unequalized_Hawkes_Bay_NZ.jpg’ saved [110895/110895]\n\n\n\n\n!wget 주소: 주소에 있는 이미지를 다운로드\n!rm 파일이름: 현재폴더에 “파일이름”을 삭제\n\n\nplt.imshow(img)\n\n\n\n\n\n\n\n\n\n다운받은 이미지를 보는 방법"
  },
  {
    "objectID": "posts/01wk-1.html#b.-예비학습2-이미지자료의-이해",
    "href": "posts/01wk-1.html#b.-예비학습2-이미지자료의-이해",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "B. 예비학습2: 이미지자료의 이해",
    "text": "B. 예비학습2: 이미지자료의 이해\n\n비밀1: 이미지는 사실 숫자들의 집합이었음.\n- 예시1 – 2d array = 흑백이미지\n\n_img1 = np.array([0,30,90,120,150,180,210,240,255]).reshape(3,3)\n_img1\n\narray([[  0,  30,  90],\n       [120, 150, 180],\n       [210, 240, 255]])\n\n\n\nplt.imshow(_img1,cmap='gray')\nplt.colorbar()\n\n\n\n\n\n\n\n\n- 예시2 – 2d array = 흑백이미지\n\n_img2 = np.array([0,20,40,60,80,100,120,140,160]).reshape(3,3)\n_img2\n\narray([[  0,  20,  40],\n       [ 60,  80, 100],\n       [120, 140, 160]])\n\n\n\nplt.imshow(_img2,cmap='gray',vmin=0,vmax=255)\nplt.colorbar()\n\n\n\n\n\n\n\n\n- 예시3 – 나란히 그리기\n\n_img3 = np.concatenate([_img1,_img2],axis=1)\n_img3\n\narray([[  0,  30,  90,   0,  20,  40],\n       [120, 150, 180,  60,  80, 100],\n       [210, 240, 255, 120, 140, 160]])\n\n\n\nplt.imshow(_img3,cmap='gray')\n\n\n\n\n\n\n\n\n\n\n비밀2: 칼라이미지는 red + green + blue 의 조합으로 표현가능 (다른방식도 가능)\n- ref: https://en.wikipedia.org/wiki/RGB_color_model\n\n\n\n그림 ??: 위키에서 긁은 그림, 빛의 3원색을 표현하고 있음\n\n\n- 예시1 – 3d array = 칼라이미지\n\nr = np.array(\n    [[  0,   0,   0,   0,   0],\n     [  0,   0,   0,   0,   0],\n     [255, 255, 255, 255, 255],\n     [255, 255, 255, 255, 255],\n     [255, 255, 255, 255, 255]]\n)\ng = np.array(\n    [[255, 255, 255,  0,   0],\n     [255, 255, 255,  0,   0],\n     [255, 255, 255,  0,   0],\n     [  0,   0,   0,  0,   0],\n     [  0,   0,   0,  0,   0]]\n)\nb = np.array(\n    [[  0,   0, 255, 255, 255],\n     [  0,   0, 255, 255, 255],\n     [  0,   0, 255, 255, 255],\n     [  0,   0,   0,   0,   0],\n     [  0,   0,   0,   0,   0]]\n)\nz = np.array(\n    [[ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0],\n     [ 0,  0,  0,  0,  0]]\n)    \n\n\nred = np.stack([r,z,z],axis=-1)\ngreen = np.stack([z,g,z],axis=-1)\nblue = np.stack([z,z,b],axis=-1)\n\n\nplt.imshow(red)\n\n\n\n\n\n\n\n\n\nplt.imshow(green)\n\n\n\n\n\n\n\n\n\nplt.imshow(blue)\n\n\n\n\n\n\n\n\n\nplt.imshow(red+green+blue)\n\n\n\n\n\n\n\n\n- 예시2: R,G,B를 같은 비율로 섞으면 다시 흑백이미지가 된다.\n\narr2 = np.array(\n    [[10,  40],\n     [80,  60]]\n)\narr2\n\narray([[10, 40],\n       [80, 60]])\n\n\n\narr3 = np.stack([arr2,arr2,arr2],axis=-1)\nplt.imshow(arr3)\n\n\n\n\n\n\n\n\n\nplt.imshow(arr2,cmap='gray',vmin=0,vmax=255)\nplt.colorbar()"
  },
  {
    "objectID": "posts/01wk-1.html#c.-히스토그램-이퀄라이제이션",
    "href": "posts/01wk-1.html#c.-히스토그램-이퀄라이제이션",
    "title": "01wk-1: 박스플랏, 히스토그램",
    "section": "C. 히스토그램 이퀄라이제이션",
    "text": "C. 히스토그램 이퀄라이제이션\n- 우리가 관심있었던 이미지\n\nplt.imshow(img)\n\n\n\n\n\n\n\n\n- 이미지를 rgb로 각각 분리하고 각 색깔들의 히스토그램을 그려보자.\n\nr = img[:,:,0]\ng = img[:,:,1]\nb = img[:,:,2]\n\n\nplt.hist(r.reshape(-1),range=(0,255),bins=255);\n\n\n\n\n\n\n\n\n\n120-200 사이에 값이 몰려있음\n만약에 120-200까지의 분포된 모양은 그대로 유지하면서 range를 0-255 까지 늘린다면?\n\n- cv2.equalizeHist()를 이용하여 분포의 모양은 대략적으로 유지하면서 값을 퍼트리자!\n\nrr = cv2.equalizeHist(r)\ngg = cv2.equalizeHist(g)\nbb = cv2.equalizeHist(b)\n\n\nplt.hist(r.reshape(-1),bins=255, range=[0,255],label='befor');\nplt.hist(rr.reshape(-1),bins=255,range=[0,255],label='after');\nplt.legend()\n\n\n\n\n\n\n\n\n- 변환이후의 이미지를 그려본다면?\n\nimg2 = np.stack([rr,gg,bb],axis=-1)\n\n\nplt.imshow(img2)\n\n\n\n\n\n\n\n\n\nplt.imshow(np.concatenate([img,img2],axis=1))"
  },
  {
    "objectID": "posts/02wk-2.html#a.-애드워드-터프티",
    "href": "posts/02wk-2.html#a.-애드워드-터프티",
    "title": "02wk-2: Seaborn 간략한 소개, 훌륭한 시각화(1)",
    "section": "A. 애드워드 터프티",
    "text": "A. 애드워드 터프티\n- 데이터 시각화계의 거장\n- 터프티의 이론중 백미: 엄격한 미니멀리즘\n\n최소한의 잉크로 많은 정보를 전달할 수 있다면 그것이 바로 좋은 그래프이다.\n작은 지면 내에서 잉크를 최대한 적게 써서 짧은 시간 안에 많은 영감을 주어야 한다.\n\n- 데이터-잉크비: 데이터를 표현하는데 들아가는 잉크의 양 / 그래픽을 인쇄하는데 들어가는 잉크의 총량\n- 차트정크 (나이젤홈즈의 그래프)\n\n\n“Lurking behind chartjunk is contempt both for information and for the audience. Chartjunk promoters imagine that numbers and details are boring, dull, and tedious, requiring ornament to enliven. Cosmetic decoration, which frequently distorts the data, will never salvage an underlying lack of content. If the numbers are boring, then you’ve got the wrong numbers (…) Worse is contempt for our audience, designing as if readers were obtuse and uncaring. In fact, consumers of graphics are often more intelligent about the information at hand than those who fabricate the data decoration (…) The operating moral premise of information design should be that our readers are alert and caring; they may be busy, eager to get on with it, but they are not stupid.”\n\n\n차트정크 = 대중을 멸시 + 데이터에 대한 모독\n차트정크 옹호가는 숫자와 데이터가 지루하여 활기가 필요하다고 생각하는 모양이다..\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 별로인 그래프 (왼쪽) / 우수한 그래프 오른쪽\n\n- 제 생각: 글쎄…"
  },
  {
    "objectID": "posts/02wk-2.html#b.-찰스미나드의-도표",
    "href": "posts/02wk-2.html#b.-찰스미나드의-도표",
    "title": "02wk-2: Seaborn 간략한 소개, 훌륭한 시각화(1)",
    "section": "B. 찰스미나드의 도표",
    "text": "B. 찰스미나드의 도표\n\n인류역사상 가장 훌륭한 시각화\n\n\n- 터프티의 평\n\n지금까지 그려진 최고의 통계 그래픽일지도 모른다.\n여기에서는 군대의 크기, 2차원 평면상의 위치, 군대의 이동방향, 모스코바에서 퇴각하는 동안의 여러날짜, 온도 \\(\\to\\) 6차원의 변수\n백만번에 한번 이런 그림을 그릴수는 있겠지만 이러한 멋진 그래픽을 만드는 방법에 대한 원칙은 없다. \\(\\to\\) 미니멀리즘..\n\n- 왜 우수한 그래프일까?\n\n자료를 파악하는 기법은 최근까지도 산점도, 막대그래프, 라인플랏에 의존\n이러한 플랏의 단점은 고차원의 자료를 분석하기 어렵다는 것임\n미나드는 여러그림을 그리는 방법 대신에 한 그림에서 패널을 늘리는 방법을 선택함."
  },
  {
    "objectID": "posts/02wk-2.html#c.-미나드처럼-그리는게-왜-어려운가",
    "href": "posts/02wk-2.html#c.-미나드처럼-그리는게-왜-어려운가",
    "title": "02wk-2: Seaborn 간략한 소개, 훌륭한 시각화(1)",
    "section": "C. 미나드처럼 그리는게 왜 어려운가?",
    "text": "C. 미나드처럼 그리는게 왜 어려운가?\n- 몸무게, 키, 성별, 국적\n\ndf1=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/male1.csv')\ndf2=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/male2.csv')  \ndf3=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/female.csv') \ndf4=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/foreign.csv')\n\n- 미나드의 접근방법\n\n_df = pd.concat([pd.concat([df1,df2],axis=1).assign(g='m'),df3.assign(g='f')])\ndf = pd.concat([_df.assign(g2='korea'),df4.assign(g2='foreign')]).reset_index(drop=True)\ndf\n\n\n\n\n\n\n\n\nw\nh\ng\ng2\n\n\n\n\n0\n72.788217\n183.486773\nm\nkorea\n\n\n1\n66.606430\n173.599877\nm\nkorea\n\n\n2\n69.806324\n173.237903\nm\nkorea\n\n\n3\n67.449439\n173.223805\nm\nkorea\n\n\n4\n70.463183\n174.931946\nm\nkorea\n\n\n...\n...\n...\n...\n...\n\n\n1525\n78.154632\n188.324350\nm\nforeign\n\n\n1526\n74.754308\n183.017979\nf\nforeign\n\n\n1527\n91.196208\n190.100456\nm\nforeign\n\n\n1528\n87.770394\n187.987255\nm\nforeign\n\n\n1529\n88.021995\n193.456798\nm\nforeign\n\n\n\n\n1530 rows × 4 columns\n\n\n\n\nsns.scatterplot(\n    data=df,\n    x='w',\n    y='h',\n    hue='g',\n    style='g2'\n)\n\n\n\n\n\n\n\n\n- 어려운 점:\n\n센스부족: 센스가 없어서 hue/style을 이용하여 그룹을 구분할 생각을 못함\n개념부족: 타이디데이터 (=tidy dataframe, long form dataframe) 형태로 데이터를 정리할 생각을 못함\n코딩못함: 타이디데이터로 데이터를 변형하는 코드를 모름\n\n- 해결하는 방법:\n\n센스부족: 훌륭한 시각화를 많이 보면 해결할 수 있음.\n개념부족: tidydata에 대한 개념을 배우면 해결할 수 있음.\n코딩못함: 코딩공부열심히 (시각화 코드가 중요한게 아니고, pandas를 엄청 잘해야함)"
  },
  {
    "objectID": "posts/mid-info.html#a.-준비물",
    "href": "posts/mid-info.html#a.-준비물",
    "title": "supp-3: 중간고사 관련 안내사항",
    "section": "A. 준비물",
    "text": "A. 준비물\n- 컴퓨터, 노트북, 아이패드 등: 시험지 확인 및 문제풀이 용도\n- 핸드폰: Zoom을 통하여 주변상황을 및 컴퓨터 화면을 촬영하는 용도 + 학생증 촬영 용도\n\nNote: 중간에 핸드폰 및 노트북이 꺼지지 않도록 배터리 충전기를 준비한다.\n\n- 학생증: 본인 인증 용도 (대리시험 방지)\n\n\n\n\n\n\nImportant\n\n\n\n학생증이 없는 경우 신분증 (주민등록증/여권/운전면허증) 으로 대체가능함."
  },
  {
    "objectID": "posts/mid-info.html#b.-시험전-준비사항-16001620",
    "href": "posts/mid-info.html#b.-시험전-준비사항-16001620",
    "title": "supp-3: 중간고사 관련 안내사항",
    "section": "B. 시험전 준비사항 (16:00~16:20)",
    "text": "B. 시험전 준비사항 (16:00~16:20)\n- LMS \\(\\to\\) 강의대화 \\(\\to\\) Zoom 화상강의 바로 가기로 입장\n\n핸드폰, 컴퓨터 모두 입장 할 것\n핸드폰은 주변상황 촬영용도 + 학생증 촬영용도\n컴퓨터는 질문을 위한 용도\n\n- 줌의 대화명은 소속,이름,기기,학번을 순서대로 적는다. (예시: 전북대_최규빈_핸드폰_202143052)\n\nNote: 동명이인이 있을 수 있으므로 학번을 같이 적으세요\n\n- 핸드폰을 아래와 같이 배치하여 학생의 컴퓨터 화면 및 주변상황이 보이도록 한다.\n\n\nNote: 적절한 각도를 설정하기 어려운 경우 주변환경보다 컴퓨터의 화면이 잘 보이도록 설정할 것\n\n- 학생증을 준비하여 시험 시작 직전에 본인의 얼굴과 학생증을 함께 촬영한다. (5초간)"
  },
  {
    "objectID": "posts/mid-info.html#c.-시험시간-중-유의사항-16201750",
    "href": "posts/mid-info.html#c.-시험시간-중-유의사항-16201750",
    "title": "supp-3: 중간고사 관련 안내사항",
    "section": "C. 시험시간 중 유의사항 (16:20~17:50)",
    "text": "C. 시험시간 중 유의사항 (16:20~17:50)\n- 질문은 줌의 채팅기능을 이용한다. (하울링 방지를 위해 육성질문은 하지 않음)\n- Zoom에서 스피커 음소거를 하지 않는다. (전체 공지사항등이 있을때 음성으로 공지함)\n- 핸드폰으로 Zoom참가 중 전화가 오면 거절하고 받지 않는다. (전화통화시 Zoom연결이 종료되므로 부정행위로 의심할 수 있음)\n- 카카오톡 등 메신저앱을 공유하여 코드공유를 할 경우 F 처리함."
  },
  {
    "objectID": "posts/mid-info.html#a.-준비물-1",
    "href": "posts/mid-info.html#a.-준비물-1",
    "title": "supp-3: 중간고사 관련 안내사항",
    "section": "A. 준비물",
    "text": "A. 준비물\n- 개인노트북, 아이패드 등: 시험지 확인 및 문제풀이 용도\n- 휴대폰: 학생증촬영용도\n- 학생증: 본인 인증 용도 (대리시험 방지)\n\n\n\n\n\n\nImportant\n\n\n\n학생증이 없는 경우 신분증 (주민등록증/여권/운전면허증) 으로 대체가능함."
  },
  {
    "objectID": "posts/mid-info.html#b.-시험전-준비사항-16001620-1",
    "href": "posts/mid-info.html#b.-시험전-준비사항-16001620-1",
    "title": "supp-3: 중간고사 관련 안내사항",
    "section": "B. 시험전 준비사항 (16:00~16:20)",
    "text": "B. 시험전 준비사항 (16:00~16:20)\n- LMS \\(\\to\\) 강의대화 \\(\\to\\) Zoom 화상강의 바로 가기로 입장 (컴퓨터+핸드폰 모두 입장)\n\n핸드폰, 컴퓨터 모두 입장 할 것\n핸드폰은 학생증 촬영용도 (촬영이후 핸드폰은 줌에서 나가도 무방)\n컴퓨터는 질문을 위한 용도\n\n- 줌의 대화명은 소속,이름,기기,학번을 순서대로 적는다. (예시: 전북대_최규빈_핸드폰_202143052)\n\nNote: 동명이인이 있을 수 있으므로 학번을 같이 적으세요\n\n- 학생증을 준비하여 시험 시작 직전에 본인의 얼굴과 학생증을 함께 촬영한다. (5초간)"
  },
  {
    "objectID": "posts/mid-info.html#c.-시험시간-중-유의사항-16201750-1",
    "href": "posts/mid-info.html#c.-시험시간-중-유의사항-16201750-1",
    "title": "supp-3: 중간고사 관련 안내사항",
    "section": "C. 시험시간 중 유의사항 (16:20~17:50)",
    "text": "C. 시험시간 중 유의사항 (16:20~17:50)\n- 질문은 줌의 채팅기능을 이용한다.\n\n제가 앞에 있더라도 줌으로 질문해주세요 (비대면응시자들과의 형평성을 위해서)\n\n- 카카오톡 등 메신저앱을 공유하여 코드공유를 할 경우 F 처리함."
  },
  {
    "objectID": "posts/13wk-1.html#a.-궁금해",
    "href": "posts/13wk-1.html#a.-궁금해",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "A. 궁금해",
    "text": "A. 궁금해\n12wk-2 강의노트중..\n\ndf_sample = pd.DataFrame(\n    {'path':['A','A','B','B','B'],\n     'lon':[-73.986420,-73.995300,-73.975922,-73.988922,-73.962654],\n     'lat':[40.756569,40.740059,40.754192,40.762859,40.772449]}\n)\nfig = px.line_mapbox(\n    data_frame=df_sample,\n    lat = 'lat',\n    lon = 'lon',\n    color = 'path',\n    line_group = 'path',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=12,\n    width = 750,\n    height = 600    \n)\nscatter_data = px.scatter_mapbox(\n    data_frame=df_sample,\n    lat = 'lat',\n    lon = 'lon',\n    color = 'path',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=12,\n    width = 750,\n    height = 600    \n).data \nfig.add_trace(scatter_data[0])\nfig.add_trace(scatter_data[1])\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n도데체 저런코드는 어떻게 알아내는 걸까?"
  },
  {
    "objectID": "posts/13wk-1.html#b.-심슨의-역설-데이터",
    "href": "posts/13wk-1.html#b.-심슨의-역설-데이터",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "B. 심슨의 역설 데이터",
    "text": "B. 심슨의 역설 데이터\n- 아래의 자료를 관찰하자.\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1]).reset_index().melt(id_vars='index').set_axis(['department','gender','result','count'],axis=1)\ndf.head()\n\n\n\n\n\n\n\n\ndepartment\ngender\nresult\ncount\n\n\n\n\n0\nA\nmale\nfail\n314\n\n\n1\nB\nmale\nfail\n208\n\n\n2\nC\nmale\nfail\n204\n\n\n3\nD\nmale\nfail\n279\n\n\n4\nE\nmale\nfail\n137"
  },
  {
    "objectID": "posts/13wk-1.html#c.-plotly의-시각화구조",
    "href": "posts/13wk-1.html#c.-plotly의-시각화구조",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "C. plotly의 시각화구조",
    "text": "C. plotly의 시각화구조\n- 아래와 같은 방법이 가능하다.\n\npandas backend\npx, 즉 plotly.express를 이용한 시각화\ngo, 즉 plotly.graph_objects를 이용한 시각화\npio, 즉 plotly.io를 이용한 시각화\n\n- 예시1: pandas backend\n\ndf.pivot_table(index='gender',columns='result',values='count',aggfunc='sum')\\\n.assign(rate = lambda df:  df['pass']/(df['fail']+df['pass']))\\\n.assign(rate = lambda df:  np.round(df['rate'],2))\\\n.loc[:,'rate'].reset_index()\\\n.plot.bar(\n    x='gender',\n    y='rate',\n    color='gender',\n    #---#\n    title = '버클리대학교 성별합격률',\n    width = 600\n)\n\n                                                \n\n\n- 예시2: px.bar를 이용한 plot\n\ntidydata = df.pivot_table(index='gender',columns='result',values='count',aggfunc='sum')\\\n.assign(rate = lambda df:  df['pass']/(df['fail']+df['pass']))\\\n.assign(rate = lambda df:  np.round(df['rate'],2))\\\n.loc[:,'rate'].reset_index()\n#---#\npx.bar(\n    tidydata,\n    x='gender',\n    y='rate',\n    color='gender',\n    #---#\n    title = '버클리대학교 성별합격률',\n    width = 600\n)\n\n                                                \n\n\n- 예시3: px.bar를 이용한 플랏 (pandas Series를 입력) – 결과가 조금 다름\n\ntidydata = df.pivot_table(index='gender',columns='result',values='count',aggfunc='sum')\\\n.assign(rate = lambda df:  df['pass']/(df['fail']+df['pass']))\\\n.assign(rate = lambda df:  np.round(df['rate'],2))\\\n.loc[:,'rate'].reset_index()\n#---#\npx.bar(\n    x=tidydata.gender,\n    y=tidydata.rate,\n    color=tidydata.gender,\n    #---#\n    title = '버클리대학교 성별합격률',\n    width = 600\n)\n\n                                                \n\n\n\nx축,y축,legend의 제목이 살짝 달라지긴 했음..\n\n- 예시4: px.bar를 이용한 플랏 (list를 입력) – 결과가 조금 다름\n\npx.bar(\n    x=['female', 'male'],\n    y=[0.42, 0.52],\n    color=['female', 'male'],\n    #---#\n    title = '버클리대학교 성별합격률',\n    width = 600\n)\n\n                                                \n\n\n# 예시5: go를 이용한 시각화 – 색깔시각화가 불가능\n- ggplot() + geom_col() 의 느낌으로!\n\nfig = go.Figure()\nbar = go.Bar(\n    x=['female', 'male'],\n    y=[0.42, 0.52]\n)\nlayout = {'title':'버클리대학교의 남녀합격률','width':600}\nfig.add_trace(bar).update_layout(layout)\n\n                                                \n\n\n\n색을 어떻게 구분하냐?\n\n#\n# 예시6: go를 이용한 시각화 – matplotlib의 겹쳐그리기 감성으로 색깔시각화 (\\(\\star\\))\n(예비학습) – 이런느낌이 있었지\n\nplt.plot([1,2,3],[3,4,1],label='A')\nplt.plot([1,2,3],[4,2,5],label='B')\nplt.legend()\n\n\n\n\n\n\n\n\n이걸 응용하면\n\nplt.bar(['female'],[0.42],label='female')\nplt.bar(['male'],[0.52],label='male')\nplt.legend()\n\n\n\n\n\n\n\n\n예비학습에서 힌트를 얻으면!\n\nfig = go.Figure()\nbar_female = go.Bar(\n    x=['female'],\n    y=[0.42]\n)\nbar_male = go.Bar(\n    x=['male'],\n    y=[0.52]\n)\nlayout = {'title':'버클리대학교의 남녀합격률','width':600}\nfig.add_trace(bar_female).add_trace(bar_male)\\\n.update_layout(layout)\n\n                                                \n\n\n# 예시7: go를 이용한 시각화 – 색상의 변경\n\n여자는 빨강, 남자는 파랑으로?\n\n\nfig = go.Figure()\nbar_female = go.Bar(\n    x=['female'],\n    y=[0.42],\n    marker= {'color':'red'}\n)\nbar_male = go.Bar(\n    x=['male'],\n    y=[0.52],\n    marker= {'color':'blue'}    \n)\nlayout = {'title':'버클리대학교의 남녀합격률','width':600}\nfig.add_trace(bar_female).add_trace(bar_male)\\\n.update_layout(layout)\n\n                                                \n\n\n#\n# 예시8: go를 이용한 시각화 – 색상재설정 + x축, y축, legend의 title의 설정 + hover 설정\n\n색상설정: #EF553B,#636efa\nhovertemplate: 'gender=%{x}&lt;br&gt;rate=%{text}&lt;extra&gt;&lt;/extra&gt;'\n\n\nfig = go.Figure()\nbar_female = go.Bar(\n    x=['female'],\n    y=[0.42],\n    marker= {'color':'#EF553B'},\n    text =[0.42],\n    hovertemplate='gender=%{x}&lt;br&gt;rate=%{text}&lt;extra&gt;&lt;/extra&gt;',\n    name='female'\n)\nbar_male = go.Bar(\n    x=['male'],\n    y=[0.52],\n    marker= {'color':'#636efa'},\n    text= [0.52],\n    hovertemplate='gender=%{x}&lt;br&gt;rate=%{text}&lt;extra&gt;&lt;/extra&gt;',\n    name='male'\n)\nlayout = {\n    'title':'버클리대학교의 남녀합격률',\n    'width':600,\n    'xaxis':{'title':'gender'},\n    'yaxis':{'title':'rate'}, \n    'legend':{'title':'gender'},     \n}\nfig.add_trace(bar_female).add_trace(bar_male)\\\n.update_layout(layout)\n\n                                                \n\n\n#\n궁금: #EF553B 이런거 어떻게 알았어?…\n\n_fig = df.pivot_table(index='gender',columns='result',values='count',aggfunc='sum')\\\n.assign(rate = lambda df:  df['pass']/(df['fail']+df['pass']))\\\n.assign(rate = lambda df:  np.round(df['rate'],2))\\\n.loc[:,'rate'].reset_index()\\\n.plot.bar(\n    x='gender',\n    y='rate',\n    color='gender',\n    #---#\n    title = '버클리대학교 성별합격률',\n    width = 600\n)\n\n\n_fig.data\n\n(Bar({\n     'alignmentgroup': 'True',\n     'hovertemplate': 'gender=%{x}&lt;br&gt;rate=%{y}&lt;extra&gt;&lt;/extra&gt;',\n     'legendgroup': 'female',\n     'marker': {'color': '#636efa', 'pattern': {'shape': ''}},\n     'name': 'female',\n     'offsetgroup': 'female',\n     'orientation': 'v',\n     'showlegend': True,\n     'textposition': 'auto',\n     'x': array(['female'], dtype=object),\n     'xaxis': 'x',\n     'y': array([0.42]),\n     'yaxis': 'y'\n }),\n Bar({\n     'alignmentgroup': 'True',\n     'hovertemplate': 'gender=%{x}&lt;br&gt;rate=%{y}&lt;extra&gt;&lt;/extra&gt;',\n     'legendgroup': 'male',\n     'marker': {'color': '#EF553B', 'pattern': {'shape': ''}},\n     'name': 'male',\n     'offsetgroup': 'male',\n     'orientation': 'v',\n     'showlegend': True,\n     'textposition': 'auto',\n     'x': array(['male'], dtype=object),\n     'xaxis': 'x',\n     'y': array([0.52]),\n     'yaxis': 'y'\n }))\n\n\n\n_fig.layout\n\nLayout({\n    'barmode': 'relative',\n    'legend': {'title': {'text': 'gender'}, 'tracegroupgap': 0},\n    'template': '...',\n    'title': {'text': '버클리대학교 성별합격률'},\n    'width': 600,\n    'xaxis': {'anchor': 'y',\n              'categoryarray': [female, male],\n              'categoryorder': 'array',\n              'domain': [0.0, 1.0],\n              'title': {'text': 'gender'}},\n    'yaxis': {'anchor': 'x', 'domain': [0.0, 1.0], 'title': {'text': 'rate'}}\n})"
  },
  {
    "objectID": "posts/13wk-1.html#d.-px-vs-go",
    "href": "posts/13wk-1.html#d.-px-vs-go",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "D. px vs go",
    "text": "D. px vs go\n- go는 핸드메이드 제품을 px는 양산품을 만든다고 이해하면 편리하다.\n\ngo의 특징: 유저의 자유도가 매우 높음 (내가 직접 하는 느낌). 이는 그림의 크기, 색상 등을 선호에 맞게 조정하기 유리. 생산성이 낮음.\npx의 특징: 유저의 자유도가 낮음 (알아서 해주는 느낌). 원하는 그림을 빠르게 생산할 수 있음. 다만 내가 원하는 디자인이 나오지 않을 수 있음.\n\n- 뭘 써야 할까?\n\npx를 쓰는게 좋다.\n그런데 go를 이용하여 그림이 그려지는 원리를 이해하면 이후에 px를 이용한 그림을 수정하기 용이하다.\n전략: px로 그림을 그린다. + go로 수정한다."
  },
  {
    "objectID": "posts/13wk-1.html#a.-함수의-입력-예비학습",
    "href": "posts/13wk-1.html#a.-함수의-입력-예비학습",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "A. 함수의 입력 (예비학습)",
    "text": "A. 함수의 입력 (예비학습)\n예제1 – 두 벡터 x,y가 주어졌을때 R에서 cbind와 같은 역할을 하는 함수를 구현하라.\n\n\ndef cbind(x,y):\n    rslt = np.stack([x,y],axis=1)\n    return rslt \n\n\ncbind([2,3,4],[5,4,2])\n\narray([[2, 5],\n       [3, 4],\n       [4, 2]])\n\n\n#\n예제2 – 세개이상의 벡터가 온다면?\n- args를 이용하여 이후 입력을 받음\n\ndef _cbind(x,y,*args):\n    print(args)\n    rslt = np.stack([x,y],axis=1)\n    return rslt \n\n\n_cbind([1,1,1],[2,2,2],[3,3,3],[4,4,4])\n\n([3, 3, 3], [4, 4, 4])\n\n\narray([[1, 2],\n       [1, 2],\n       [1, 2]])\n\n\n\nargs는 함수내부에서 “튜플”로 취급된다!!\n\n- args를 이용한 수정\n\ndef cbind(x,y,*args):\n    rslt = np.stack([x,y]+list(args),axis=1)\n    return rslt \n\n\ncbind([1,1,1],[2,2,2],[3,3,3],[4,4,4])\n\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4]])\n\n\n#\n# 예제3 – 기본적으로는 cbind의 동작을 하지만 경우에 따라서 rbind처럼 동작하길 원한다면?\n- axis라는 변수를 따로 생성하여 입력으로 처리, 기본값은 1\n\ndef bind(x,y,*args,axis=1):\n    rslt = np.stack([x,y]+list(args),axis=axis)\n    return rslt \n\n\nbind([1,1,1],[2,2,2],[3,3,3],axis=1)\n\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n\n\n#\n# 예제4 – 여러가지 추가옵션을 사용하여 print를 통제하고 싶다면?\n\ndef _bind(x,y,*args,axis=1,**kwargs):\n    print(kwargs)\n    rslt = np.stack([x,y]+list(args),axis=axis)\n    return rslt \n\n\n_bind([1,1,1],[2,2,2],[3,3,3],axis=1)\n\n{}\n\n\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n\n\n\n_bind([1,1,1],[2,2,2],[3,3,3],axis=1,vb1=True,vb2=True,vb3=False,vb4=False)\n\n{'vb1': True, 'vb2': True, 'vb3': False, 'vb4': False}\n\n\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n\n\n\ndef bind(x,y, *args, axis=1, **kwargs):\n    if ('vb1' in kwargs) and (kwargs['vb1'] == True):\n        print(f'위치인자: {x,y}')\n    if ('vb2' in kwargs) and (kwargs['vb2'] == True): \n        print(f'가변위치인자: {args}')\n    if ('vb3' in kwargs) and (kwargs['vb3'] == True): \n        print(f'키워드인자: {axis}')\n    if ('vb4' in kwargs) and (kwargs['vb4'] == True): \n        print(f'가변키워드인자: {kwargs}')   \n    rslt = np.stack([x,y]+list(args),axis=axis)\n    return rslt \n\n\nbind(\n    [1,1,1],[2,2,2],\n    [3,3,3],\n    axis=0,\n    vb1=True,vb2=True,vb3=True,vb4=True\n) \n\n위치인자: ([1, 1, 1], [2, 2, 2])\n가변위치인자: ([3, 3, 3],)\n키워드인자: 0\n가변키워드인자: {'vb1': True, 'vb2': True, 'vb3': True, 'vb4': True}\n\n\narray([[1, 1, 1],\n       [2, 2, 2],\n       [3, 3, 3]])\n\n\n#\n# 예제5 – 위치인자를 키워드인자보다 뒤에 넣을 경우?\n\nbind(axis=0,[1,2,3],[2,3,4])\n\nSyntaxError: positional argument follows keyword argument (3063801598.py, line 1)\n\n\n\nbind([1,2,3],[2,3,4],axis=0)\n\narray([[1, 2, 3],\n       [2, 3, 4]])\n\n\n\nbind([1,2,3],[2,3,4],axis=0,[3,4,5])\n\nSyntaxError: positional argument follows keyword argument (3465570716.py, line 1)\n\n\n#\n# 예제6 – 가변키워드인자가 존재할 때, 키워드인자의 키를 잘못 입력할 경우?\n\nbind([1,2,3],[2,3,4],ax=0,vb1=True,vb2=True,vb3=True,vb4=True)\n\n위치인자: ([1, 2, 3], [2, 3, 4])\n가변위치인자: ()\n키워드인자: 1\n가변키워드인자: {'ax': 0, 'vb1': True, 'vb2': True, 'vb3': True, 'vb4': True}\n\n\narray([[1, 2],\n       [2, 3],\n       [3, 4]])\n\n\n\nbind([1,2,3],[2,3,4], verbose = True)\n\narray([[1, 2],\n       [2, 3],\n       [3, 4]])\n\n\n\n아무일없음\n\n\nbind([1,2,3],[2,3,4],axis=3)\n\nAxisError: axis 3 is out of bounds for array of dimension 2\n\n\n\n이건 문제가 있음\n\n- 요약\n\n함수의 입력은 꽤 복잡한 방식으로 동작한다.\n위치인자의 위치를 잘못 넣으면 동작하지 않는다.\n가변키워드 인자가 존재할 때, 키워드인자의 키를 다른이름으로 넣으면 에러가 발생하지 않는다. (그냥 무시)\n\n#\n# 예제7 – 은근히 짜증났던 plt.plot()\n\nplt.plot([1,2,3,4],[2,3,4,2],'r--')\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,3,4],[2,3,4,2],color='lime','--')\n\nSyntaxError: positional argument follows keyword argument (2277522587.py, line 1)\n\n\n\nplt.plot([1,2,3,4],[2,3,4,2],'--',color='lime')\n\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/13wk-1.html#b.-dictionary-pio.show",
    "href": "posts/13wk-1.html#b.-dictionary-pio.show",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "B. dictionary + pio.show()",
    "text": "B. dictionary + pio.show()\n# 예제1 – dictionary + pio.show()\n\nfig = dict()\nfig['data'] = [\n    {'type':'bar','x':['female'],'y':[0.42]},\n    {'type':'bar','x':['male'],'y':[0.52]},\n]\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n기묘하다.. 마치 pio.show()에 필요한 kwargs를 fig라는 이름의 dict로 전달하는 느낌임!!\n요약: fig는 dictionary와 본질이 비슷하고, 이는 pio.show()에 전달할 kwargs를 모아놓은 집합이다.\n#\n# 예제2 – female의 rate를 0.62로 수정\n- 아래의 그림을 그렸음.\n\nfig = dict()\nfig['data'] = [\n    {'type':'bar','x':['female'],'y':[0.42]},\n    {'type':'bar','x':['male'],'y':[0.52]},\n]\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n- female의 rate을 0.42에서 0.62로 바꾸고 싶음.\n\nfig['data'][0]['y'] = [0.62]\nfig\n\n{'data': [{'x': ['female'], 'y': [0.62], 'type': 'bar'},\n  {'x': ['male'], 'y': [0.52], 'type': 'bar'}],\n 'layout': {'title': {'text': '버클리대학교 성별합격률'}, 'width': 600}}\n\n\n\npio.show(fig)\n\n                                                \n\n\n#\n# 예제3 – fig에 정리된 arg들이 전부는 아님\n- 아래의 그림을 다시 관찰하자.\n\nfig = dict()\nfig['data'] = [\n    {'type':'bar','x':['female'],'y':[0.42]},\n    {'type':'bar','x':['male'],'y':[0.52]},\n]\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n- 아래의 코드는 위와 같은 결과를 준다.\n\nfig = dict()\nfig['data'] = [\n    {'type':'bar','x':['female'],'y':[0.42],'marker':{'color':'#636efa'}},\n    {'type':'bar','x':['male'],'y':[0.52]},\n]\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n- fig에 아무것도 정의하지 않아도 함수는 동작함\n\npio.show(fig=dict())\n\n                                                \n\n\n\n내부적으로 어떠한 값이 저장되어 있는 것임\n\n#"
  },
  {
    "objectID": "posts/13wk-1.html#a.-pio와-go의-연결",
    "href": "posts/13wk-1.html#a.-pio와-go의-연결",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "A. pio와 go의 연결",
    "text": "A. pio와 go의 연결\n\nfig = dict()\nfig['data'] = [\n    {'type':'bar','x':['female'],'y':[0.42]},\n    {'type':'bar','x':['male'],'y':[0.52]},\n]\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n위의 코드와 동일한 효과를 주는 코드를 알아보자.\n# 예제1 – data의 원소를 dict로 정리하여 추가\n\nfig = dict()\nfig['data'] = list()\nbar_female = {'type':'bar','x':['female'],'y':[0.42]}\nbar_male = {'type':'bar','x':['male'],'y':[0.52]}\nfig['data'].append(bar_female)\nfig['data'].append(bar_male)\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n#\n# 예제2 – go.Bar()를 이용\n\nfig = dict()\nfig['data'] = list()\nbar_female = go.Bar({'x':['female'],'y':[0.42]}) # bar_female = {'type':'bar','x':['female'],'y':[0.42]}\nbar_male = go.Bar({'x':['male'],'y':[0.52]}) # bar_male = {'type':'bar','x':['male'],'y':[0.52]}\nfig['data'].append(bar_female)\nfig['data'].append(bar_male)\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\npio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n#\n# 예제3 – go.Bar()를 이용, go.Figure()+add_trace()이용\n\nfig = go.Figure() # fig = dict()\nfig['data'] = tuple()\nbar_female = go.Bar({'x':['female'],'y':[0.42]}) # bar_female = {'type':'bar','x':['female'],'y':[0.42]}\nbar_male = go.Bar({'x':['male'],'y':[0.52]}) # bar_male = {'type':'bar','x':['male'],'y':[0.52]}\nfig.add_trace(bar_female) # fig['data'].append(bar_female)\nfig.add_trace(bar_male) # fig['data'].append(bar_male)\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\nfig # fig.show() # pio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n# 예제4 – go.Bar()를 다르게 선언하여 이용, go.Figure()+add_trace()이용\n\nfig = go.Figure() # fig = dict()\nbar_female = go.Bar(x=['female'],y=[0.42])  # bar_female = go.Bar({'x':['female'],'y':[0.42]}) \nbar_male = go.Bar(x=['male'],y=[0.52])  # bar_male = go.Bar({'x':['male'],'y':[0.52]}) \nfig.add_trace(bar_female)\nfig.add_trace(bar_male) \nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\nfig # fig.show() # pio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n#\n# 예제5 – go.Bar()를 사용X, go.Figure()+add_trace()이용\n\nfig = go.Figure() # fig = dict()\nbar_female = {'type':'bar','x':['female'],'y':[0.42]}\nbar_male = {'type':'bar','x':['male'],'y':[0.52]}\nfig.add_trace(bar_female)\nfig.add_trace(bar_male) \nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\nfig # fig.show() # pio.show(fig) # pio.show에 필요한 입력들을 fig라는 이름의 딕셔너리로 전달하는 느낌\n\n                                                \n\n\n#\n# 예제6 – go.Bar()를 이용, go.Figure()+add_traces()이용\n\nfig = go.Figure() # fig = dict()\nbar_female = go.Bar(x=['female'],y=[0.42])\nbar_male = go.Bar(x=['male'],y=[0.52])\nfig.add_traces([bar_female,bar_male])\nfig['layout'] = {\n    'title':{'text': '버클리대학교 성별합격률'},\n    'width':600\n}\nfig \n\n                                                \n\n\n#\n# 예제7 – go.Bar()를 이용,go.Figure()+add_traces()이용 ,update_layout()이용\n\nfig = go.Figure() # fig = dict()\nbar_female = go.Bar(x=['female'],y=[0.42])\nbar_male = go.Bar(x=['male'],y=[0.52])\nfig.add_traces([bar_female,bar_male])\nfig.update_layout(\n     {'title':{'text': '버클리대학교 성별합격률'},'width':600}\n)\nfig \n\n                                                \n\n\n#\n# 예제8 – go.Bar()를 이용, go.Figure()+add_traces()이용, update_layout()의 다른이용\n\nfig = go.Figure() # fig = dict()\nbar_female = go.Bar(x=['female'],y=[0.42])\nbar_male = go.Bar(x=['male'],y=[0.52])\nfig.add_traces([bar_female,bar_male])\nfig.update_layout(\n    title={'text': '버클리대학교 성별합격률'},\n    width=600\n)\nfig \n\n                                                \n\n\n#"
  },
  {
    "objectID": "posts/13wk-1.html#b.-go를-이용하는-추천포맷",
    "href": "posts/13wk-1.html#b.-go를-이용하는-추천포맷",
    "title": "13wk-1: Plotly – pio, go 를 활용한 시각화",
    "section": "B. go를 이용하는 추천포맷",
    "text": "B. go를 이용하는 추천포맷\n\nfig = go.Figure()\nfig.add_traces(\n    [go.Bar(x=['female'], y= [0.42], name='female'),\n     go.Bar(x=['male'], y= [0.52], name='male')]\n)\nfig.update_layout(\n    width = 600,\n    legend = {'title':{'text':'gender'}}\n)"
  },
  {
    "objectID": "posts/03wk-1.html#a.-read-data",
    "href": "posts/03wk-1.html#a.-read-data",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "A. read data",
    "text": "A. read data\n- ref: https://r4ds.had.co.nz/index.html\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/mpg.csv')\ndf\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "posts/03wk-1.html#b.-descriptions",
    "href": "posts/03wk-1.html#b.-descriptions",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "B. descriptions",
    "text": "B. descriptions\n- 컬럼들의 이름을 출력.\n\ndf.columns\n\nIndex(['manufacturer', 'model', 'displ', 'year', 'cyl', 'trans', 'drv', 'cty',\n       'hwy', 'fl', 'class'],\n      dtype='object')\n\n\n- ChatGPT에 문의"
  },
  {
    "objectID": "posts/03wk-1.html#a.-xdispl-yhwy",
    "href": "posts/03wk-1.html#a.-xdispl-yhwy",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "A. x=displ, y=hwy",
    "text": "A. x=displ, y=hwy\n- 예시1: 정직하게 매뉴얼대로..\n\nggplot(data=df) + geom_point(mapping=aes(x='displ',y='hwy'))\n\n\n\n\n\n\n\n\n- 예시2: data=와 mapping=은 생략가능하다.\n\nggplot(df)+geom_point(aes(x='displ',y='hwy'))"
  },
  {
    "objectID": "posts/03wk-1.html#b.-rpy2-코랩-아닌-경우-실습금지",
    "href": "posts/03wk-1.html#b.-rpy2-코랩-아닌-경우-실습금지",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "B. rpy2 – 코랩 아닌 경우 실습금지",
    "text": "B. rpy2 – 코랩 아닌 경우 실습금지\n- 예시: R에서도 거의 똑같은 문법으로 그릴수 있음 (1타2피..)\n\nimport rpy2\n%load_ext rpy2.ipython\n\n\n%%R\nlibrary(tidyverse)\ndf = mpg\nggplot(df)+geom_point(aes(x=displ,y=hwy))\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/03wk-1.html#a.-xdispl-yhwy-shapeclass",
    "href": "posts/03wk-1.html#a.-xdispl-yhwy-shapeclass",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "A. x=displ, y=hwy, shape=class",
    "text": "A. x=displ, y=hwy, shape=class\n- 예시1\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',shape='class'))"
  },
  {
    "objectID": "posts/03wk-1.html#b.-xdispl-yhwy-colorclass",
    "href": "posts/03wk-1.html#b.-xdispl-yhwy-colorclass",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "B. x=displ, y=hwy, color=class",
    "text": "B. x=displ, y=hwy, color=class\n- 예시1\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',color='class'))"
  },
  {
    "objectID": "posts/03wk-1.html#c.-xdispl-yhwy-colorclass-shapeclass",
    "href": "posts/03wk-1.html#c.-xdispl-yhwy-colorclass-shapeclass",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "C. x=displ, y=hwy, color=class, shape=class",
    "text": "C. x=displ, y=hwy, color=class, shape=class\n- 예시1\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',color='class',shape='class'))\n\n\n\n\n\n\n\n\n- 예시2: 전체적으로 size를 크게..\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',color='class',shape='class'),size=5)\n\n\n\n\n\n\n\n\n- 예시3: 겹치는 부분이 있으니 좀 더 투명하게..\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',color='class',shape='class'),size=5,alpha=0.5)"
  },
  {
    "objectID": "posts/03wk-1.html#a.-xdispl-yhwy-colordrv-shapeclass",
    "href": "posts/03wk-1.html#a.-xdispl-yhwy-colordrv-shapeclass",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "A. x=displ, y=hwy, color=drv, shape=class",
    "text": "A. x=displ, y=hwy, color=drv, shape=class\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',color='drv',shape='class'),size=5,alpha=0.5)"
  },
  {
    "objectID": "posts/03wk-1.html#b.-xdispl-yhwy-colordrv-shapeclass-sizecyl",
    "href": "posts/03wk-1.html#b.-xdispl-yhwy-colordrv-shapeclass-sizecyl",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "B. x=displ, y=hwy, color=drv, shape=class, size=cyl",
    "text": "B. x=displ, y=hwy, color=drv, shape=class, size=cyl\n\nggplot(df) + geom_point(aes(x='displ',y='hwy',color='drv',shape='class',size='cyl'),alpha=0.5)"
  },
  {
    "objectID": "posts/03wk-1.html#a.-fig",
    "href": "posts/03wk-1.html#a.-fig",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "A. fig",
    "text": "A. fig\n\nfig = ggplot(df) # ggplot은 클래스, fig는 ggplot에서 찍힌 인스턴스\nfig"
  },
  {
    "objectID": "posts/03wk-1.html#b.-geom_point",
    "href": "posts/03wk-1.html#b.-geom_point",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "B. geom_point()",
    "text": "B. geom_point()\n\npoint = geom_point(aes(x='displ',y='hwy'))\npoint\n\n&lt;plotnine.geoms.geom_point.geom_point at 0x7f393731b090&gt;\n\n\n\nfig+point"
  },
  {
    "objectID": "posts/03wk-1.html#c.-geom_smooth",
    "href": "posts/03wk-1.html#c.-geom_smooth",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "C. geom_smooth()",
    "text": "C. geom_smooth()\n\nsmooth = geom_smooth(aes(x='displ',y='hwy'))\n\n\nfig+smooth\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/03wk-1.html#d.-geom_point-geom_smooth",
    "href": "posts/03wk-1.html#d.-geom_point-geom_smooth",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "D. geom_point() + geom_smooth()",
    "text": "D. geom_point() + geom_smooth()\n\nfig + point + smooth\nggplot(df)+geom_point(aes(x='displ',y='hwy'))+geom_smooth(aes(x='displ',y='hwy'))\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/03wk-1.html#e.-geom_point-better",
    "href": "posts/03wk-1.html#e.-geom_point-better",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "E. geom_point() – better",
    "text": "E. geom_point() – better\n\n# ggplot(df) + geom_point(aes(x='displ',y='hwy',color='drv',size='cyl'),alpha=0.5)\npoint_better = geom_point(aes(x='displ',y='hwy',color='drv',size='cyl'),alpha=0.5)\n\n\nfig + point_better"
  },
  {
    "objectID": "posts/03wk-1.html#f.-geom_smooth-better",
    "href": "posts/03wk-1.html#f.-geom_smooth-better",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "F. geom_smooth() – better",
    "text": "F. geom_smooth() – better\n\nfig = ggplot(df) \nsmooth_better = geom_smooth(aes(x='displ',y='hwy',color='drv'),linetype='dashed')\nfig+smooth_better\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/03wk-1.html#g.-다양한-조합",
    "href": "posts/03wk-1.html#g.-다양한-조합",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "G. 다양한 조합",
    "text": "G. 다양한 조합\n- 예시1: fig, point, smooth\n\nfig + point + smooth\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n\n\n\n\n\n\n\n\n\n- 예시2: fig, point_better, smooth_better\n\nfig + point_better + smooth_better\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n\n\n\n\n\n\n\n\n\n- 예시3: fig, point_better, smooth_better, smooth\n\nfig + point_better + smooth_better + smooth\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/03wk-1.html#a.-책-읽어보세요",
    "href": "posts/03wk-1.html#a.-책-읽어보세요",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "A. 책 읽어보세요",
    "text": "A. 책 읽어보세요\n- ref: https://product.kyobobook.co.kr/detail/S000000597846\n\n구매할만한 책입니다.\n수업에 필요한 내용은 여기에..\n\n- 내용요약 - 여름 \\(\\to\\) 수영장 \\(\\to\\) 소아마비 - 여름 \\(\\to\\) 아이스크림 - 아이스크림과 소아마비는 상관관계가 높다: 아이스크림 성분중에서 소아마비를 유발하는 유해물질이 있을 것이다 (?)"
  },
  {
    "objectID": "posts/03wk-1.html#b.-기상자료-다운로드",
    "href": "posts/03wk-1.html#b.-기상자료-다운로드",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "B. 기상자료 다운로드",
    "text": "B. 기상자료 다운로드\n- 기상자료 다운로드\n\ntemp=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/temp.csv').iloc[:,3].to_numpy()\n#temp\n\n\nplt.plot(temp) # 이럴때는 ggplot 보다 matplotlib 이 훨씬 편함"
  },
  {
    "objectID": "posts/03wk-1.html#c.-숨은진짜상황1-온도-to-아이스크림-판매량",
    "href": "posts/03wk-1.html#c.-숨은진짜상황1-온도-to-아이스크림-판매량",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "C. 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량",
    "text": "C. 숨은진짜상황1: 온도 \\(\\to\\) 아이스크림 판매량\n- 아래와 같은 관계를 가정하자.\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\text{오차}\\]\n\nnp.random.seed(1)\nicecream_sales = 20 + 2 * temp + np.random.randn(len(temp))*10\nplt.plot(temp,icecream_sales,'o',alpha=0.5)"
  },
  {
    "objectID": "posts/03wk-1.html#d.-숨은진짜상황2-온도-to-소아마비-반응수치",
    "href": "posts/03wk-1.html#d.-숨은진짜상황2-온도-to-소아마비-반응수치",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "D. 숨은진짜상황2: 온도 \\(\\to\\) 소아마비 반응수치",
    "text": "D. 숨은진짜상황2: 온도 \\(\\to\\) 소아마비 반응수치\n- 아래와 같은 관계를 가정하자.\n\\[\\text{소아마비 반응수치} = 30 + 0.5 \\times \\text{온도} + \\text{오차}\\]\n\nnp.random.seed(2)\ndisease = 30 + 0.5 * temp + np.random.randn(len(temp))*1\nplt.plot(temp, disease,'o',alpha=0.5)"
  },
  {
    "objectID": "posts/03wk-1.html#e.-우리가-관측한-상황-온도는-은닉되어-있음",
    "href": "posts/03wk-1.html#e.-우리가-관측한-상황-온도는-은닉되어-있음",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "E. 우리가 관측한 상황 (온도는 은닉되어 있음)",
    "text": "E. 우리가 관측한 상황 (온도는 은닉되어 있음)\n\nplt.plot(icecream_sales, disease, 'o', alpha=0.3)"
  },
  {
    "objectID": "posts/03wk-1.html#f.-여름만-뽑아서-플랏한다면",
    "href": "posts/03wk-1.html#f.-여름만-뽑아서-플랏한다면",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "F. 여름만 뽑아서 플랏한다면?",
    "text": "F. 여름만 뽑아서 플랏한다면?\n\nplt.plot(icecream_sales,disease,'o',alpha=0.3)\nplt.plot(icecream_sales[temp&gt;25], disease[temp&gt;25],'o')"
  },
  {
    "objectID": "posts/03wk-1.html#g.-ggplot으로-온도구간을-세분화-하여-시각화하자.",
    "href": "posts/03wk-1.html#g.-ggplot으로-온도구간을-세분화-하여-시각화하자.",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "G. ggplot으로 온도구간을 세분화 하여 시각화하자.",
    "text": "G. ggplot으로 온도구간을 세분화 하여 시각화하자.\n- 데이터를 데이터프레임으로\n\ndf = pd.DataFrame({'temp':temp, 'ice':icecream_sales, 'dis':disease})\ndf\n\n\n\n\n\n\n\n\ntemp\nice\ndis\n\n\n\n\n0\n-0.5\n35.243454\n29.333242\n\n\n1\n1.4\n16.682436\n30.643733\n\n\n2\n2.6\n19.918282\n29.163804\n\n\n3\n2.0\n13.270314\n32.640271\n\n\n4\n2.5\n33.654076\n29.456564\n\n\n...\n...\n...\n...\n\n\n651\n19.9\n68.839992\n39.633906\n\n\n652\n20.4\n76.554679\n38.920443\n\n\n653\n18.3\n68.666079\n39.882650\n\n\n654\n12.8\n42.771364\n36.613159\n\n\n655\n6.7\n30.736731\n34.902513\n\n\n\n\n656 rows × 3 columns\n\n\n\n- 구간별로 나눈변수를 추가\n\ndf.assign(temp_cut = pd.cut(df.temp,bins=5)) \n\n\n\n\n\n\n\n\ntemp\nice\ndis\ntemp_cut\n\n\n\n\n0\n-0.5\n35.243454\n29.333242\n(-3.92, 4.56]\n\n\n1\n1.4\n16.682436\n30.643733\n(-3.92, 4.56]\n\n\n2\n2.6\n19.918282\n29.163804\n(-3.92, 4.56]\n\n\n3\n2.0\n13.270314\n32.640271\n(-3.92, 4.56]\n\n\n4\n2.5\n33.654076\n29.456564\n(-3.92, 4.56]\n\n\n...\n...\n...\n...\n...\n\n\n651\n19.9\n68.839992\n39.633906\n(13.04, 21.52]\n\n\n652\n20.4\n76.554679\n38.920443\n(13.04, 21.52]\n\n\n653\n18.3\n68.666079\n39.882650\n(13.04, 21.52]\n\n\n654\n12.8\n42.771364\n36.613159\n(4.56, 13.04]\n\n\n655\n6.7\n30.736731\n34.902513\n(4.56, 13.04]\n\n\n\n\n656 rows × 4 columns\n\n\n\n- 시각화\n\nfig = ggplot(df.assign(temp_cut = pd.cut(df.temp,bins=7))) \npoint = geom_point(aes(x='ice',y='dis',color='temp_cut'),alpha=0.2)\nsmooth = geom_smooth(aes(x='ice',y='dis',color='temp_cut'),linetype='dashed')\nfig +point+ smooth\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/03wk-1.html#h.-진짜-아이스크림을-먹고-배탈이-났다면",
    "href": "posts/03wk-1.html#h.-진짜-아이스크림을-먹고-배탈이-났다면",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "H. 진짜 아이스크림을 먹고 배탈이 났다면?",
    "text": "H. 진짜 아이스크림을 먹고 배탈이 났다면?\n- 온도는 아이스크림 판매에 여전히 영향을 주지만\n\\[\\text{아이스크림 판매량} = 20 + 2 \\times \\text{온도} + \\text{오차}\\]\n\nnp.random.seed(1)\nicecream_sales = 20 + 2 * temp + np.random.randn(len(temp))*10\n\n- 수영장이 원인이 아니라 진짜 아이스크림을 먹고 소아마비에 걸린상황이라면?\n\\[\\text{소아마비 반응수치} = 30 + 0.0 \\times \\text{온도} + 0.15 \\times \\text{아이스크림 판매량} + \\text{오차}\\]\n\nnp.random.seed(2) \ndisease= 30+ 0*temp + 0.15*icecream_sales + np.random.randn(len(temp))*1\n\n- 그림을 한번 그려보자.\n\ndf2 = pd.DataFrame({'temp':temp,'ice':icecream_sales,'dis':disease})\ndf2.assign(temp_cut=pd.cut(df2.temp,bins=7))\n\n\n\n\n\n\n\n\ntemp\nice\ndis\ntemp_cut\n\n\n\n\n0\n-0.5\n35.243454\n34.869760\n(-6.343, -0.286]\n\n\n1\n1.4\n16.682436\n32.446099\n(-0.286, 5.771]\n\n\n2\n2.6\n19.918282\n30.851546\n(-0.286, 5.771]\n\n\n3\n2.0\n13.270314\n33.630818\n(-0.286, 5.771]\n\n\n4\n2.5\n33.654076\n33.254676\n(-0.286, 5.771]\n\n\n...\n...\n...\n...\n...\n\n\n651\n19.9\n68.839992\n40.009905\n(17.886, 23.943]\n\n\n652\n20.4\n76.554679\n40.203645\n(17.886, 23.943]\n\n\n653\n18.3\n68.666079\n41.032562\n(17.886, 23.943]\n\n\n654\n12.8\n42.771364\n36.628863\n(11.829, 17.886]\n\n\n655\n6.7\n30.736731\n36.163023\n(5.771, 11.829]\n\n\n\n\n656 rows × 4 columns\n\n\n\n\nfig = ggplot(df2.assign(temp_cut = pd.cut(df2.temp,bins=7))) \npoint = geom_point(aes(x='ice',y='dis',color='temp_cut'),alpha=0.2)\nsmooth = geom_smooth(aes(x='ice',y='dis',color='temp_cut'),linetype='dashed')\nfig + point + smooth\n\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/r/lib/python3.11/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/03wk-1.html#i.-해석",
    "href": "posts/03wk-1.html#i.-해석",
    "title": "03wk-1: mpg data, 아이스크림을 많이 먹으면 걸리는 병",
    "section": "I. 해석",
    "text": "I. 해석\n- 해피앤딩: 아이스크림 먹어도 소아마비 안걸려!\n\n아이스크림을 먹으면 소아마비를 유발한다는 이상한 결론이 나올뻔 했음.\n하지만 우리는 온도라는 흑막1을 잘 찾았고 결과적으로 “온도-&gt;아이스크림판매량,소아마비” 이라는 합리적인 진리를 얻을 수 있었다.\n\n1 우리는 이것을 “은닉변수”라고 부르기로 했어요- 걱정: 또 다른 흑막?\n\n고려할 흑막이 온도뿐이라는 보장이 어디있지?\n사실 흑막2, 흑막3이 있어서 그런 흑막들을 고려하다보니까 아이스크림과 소아마비사이의 상관관계가 다시 보인다면?\n\n- 이론:\n\n이론적으로는 “세상의 모든 은닉변수를 통제하였을 경우에도 corr(X,Y)의 값이 1에 가깝다면 그때는 인과성이 있음” 이라고 주장할 수 있다.2\n즉 모든 흑막을 제거한다면 “상관성=인과성”이다.\n\n2 물론 이 경우에도 무엇이 원인인지는 통계적으로 따지는 것은 불가- 회의론:\n\n세상의 모든 흑막을 제거하는건 사실상 불가능하지 않나?\n\n- 두 가지 연구흐름\n\n실험계획법: 실험계획을 잘하면 흑막을 제거한 효과가 있음.3\n인과추론: 실험계획이 사실상 불가능한 경우가 있음 \\(\\to\\) 모인 데이터에서 최대한 흑막2,3,4,.. 등이 비슷한 그룹끼리 “매칭”을 시킨다!\n\n3 무작위로 사람뽑아서 담배를 피우게 한다든가"
  },
  {
    "objectID": "posts/12wk-2.html#a.-scatter-vendor_idpassenger_counthour",
    "href": "posts/12wk-2.html#a.-scatter-vendor_idpassenger_counthour",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "A. scatter / (vendor_id,passenger_count,hour)",
    "text": "A. scatter / (vendor_id,passenger_count,hour)\n- 시각화\n\ndf_feature.columns\n\nIndex(['id', 'vendor_id', 'pickup_datetime', 'dropoff_datetime',\n       'passenger_count', 'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n       'trip_duration', 'log_trip_duration', 'dist', 'speed', 'pickup_hour',\n       'dropoff_hour', 'dayofweek'],\n      dtype='object')\n\n\n\nfig = px.scatter_mapbox(\n    data_frame=df_feature.sort_values('pickup_hour'),\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    color = 'vendor_id',\n    size = 'passenger_count', size_max = 5,\n    animation_frame = 'pickup_hour',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\nB가 전체적으로 동그라미가 크다. (한 택시에 탑승하는 승객수는 B업체가 더 많은듯)\n시간대별로 확실히 빈도수가 다르다.\n\n- 추가시각화1 – vendor_id별 passenger_count를 barplot으로 시각화\n\ndf_feature.groupby('vendor_id').agg({'passenger_count':'mean'})\\\n.reset_index()\\\n.plot.bar(y='vendor_id',x='passenger_count',color='vendor_id')\n\n                                                \n\n\n\nB가 한 택시당 평균승객이 많다. (B는 대형차량위주로 운행하는 회사이지 않을까?)\n\n- 추가시각화2 – vendor_id별 passenger_count를 boxplot으로 시각화\n\ndf_feature.plot.box(x='vendor_id',y='passenger_count',color='vendor_id')\n\n                                                \n\n\n- 추가시각화3 – vendor_id별 passenger_count를 histogram으로 시각화\n\ndf_feature.plot.hist(x='passenger_count',color='vendor_id', facet_col='vendor_id')\n\n                                                \n\n\n- 추가시각화4 – pickup_hour별 count를 barplot으로 시각화\n\ndf_feature.pickup_hour.value_counts().sort_index().plot.bar()\n\n                                                \n\n\n- 추가시각화5 – (pickup_hour,vendor_id)별 count를 barplot으로 시각화\n\ndf_feature.groupby(['pickup_hour','vendor_id'])\\\n.agg('size').reset_index().rename({0:'count'},axis=1)\\\n.plot.bar(x='pickup_hour',y='count',color='vendor_id',facet_col='vendor_id')\n\n                                                \n\n\n- 추가시각화6 – (pickup_hour,vendor_id)별 count를 areaplot으로 시각화\n\ndf_feature.groupby(['pickup_hour','vendor_id'])\\\n.agg('size').reset_index().rename({0:'count'},axis=1)\\\n.plot.area(x='pickup_hour',y='count',color='vendor_id')\n\n                                                \n\n\n- 추가시각화7 – (pickup_hour,vendor_id)별 count를 lineplot으로 시각화\n\ndf_feature.groupby(['pickup_hour','vendor_id'])\\\n.agg('size').reset_index().rename({0:'count'},axis=1)\\\n.plot.line(x='pickup_hour',y='count',color='vendor_id')"
  },
  {
    "objectID": "posts/12wk-2.html#b.-scatter-vendor_idday_of_week",
    "href": "posts/12wk-2.html#b.-scatter-vendor_idday_of_week",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "B. scatter / (vendor_id,day_of_week)",
    "text": "B. scatter / (vendor_id,day_of_week)\n\nfig = px.scatter_mapbox(\n    data_frame=df_feature.sort_values('dayofweek'),\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    color = 'vendor_id',\n    size = 'passenger_count', size_max = 5,\n    animation_frame = 'dayofweek',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n생각보다 요일별 특징은 그다지 뚜렷하지 않음."
  },
  {
    "objectID": "posts/12wk-2.html#a.-요일시간에-따른-count-시각화",
    "href": "posts/12wk-2.html#a.-요일시간에-따른-count-시각화",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "A. (요일,시간)에 따른 count 시각화",
    "text": "A. (요일,시간)에 따른 count 시각화\n\ntidydata = df_feature.pivot_table(\n    index = 'pickup_hour',\n    columns = 'dayofweek',\n    aggfunc = 'size'\n).stack().reset_index().rename({0:'count'},axis=1)\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='count',\n    nbinsx=24,\n    nbinsy=7,\n    height=300\n)\n\n                                                \n\n\n\n노란색: 불금? 피크타임?"
  },
  {
    "objectID": "posts/12wk-2.html#b.-요일시간에-따른-dist-시각화",
    "href": "posts/12wk-2.html#b.-요일시간에-따른-dist-시각화",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "B. (요일,시간)에 따른 dist 시각화",
    "text": "B. (요일,시간)에 따른 dist 시각화\n\ntidydata = df_feature.pivot_table(\n    index = 'pickup_hour',\n    columns = 'dayofweek',\n    values = 'dist',\n    aggfunc = 'mean'\n).stack().reset_index().rename({0:'dist_mean'},axis=1)\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='dist_mean',\n    nbinsx=24,\n    nbinsy=7,\n    height=300\n)\n\n                                                \n\n\n\n노란색: 일요일 아침부터 장거리.. (여행을 끝나고 복귀하는 사람들이지 않을까?)"
  },
  {
    "objectID": "posts/12wk-2.html#c.-요일시간에-따른-speed-시각화",
    "href": "posts/12wk-2.html#c.-요일시간에-따른-speed-시각화",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "C. (요일,시간)에 따른 speed 시각화",
    "text": "C. (요일,시간)에 따른 speed 시각화\n\ntidydata = df_feature.pivot_table(\n    index = 'pickup_hour',\n    columns = 'dayofweek',\n    values = 'speed',\n    aggfunc = 'mean'\n).stack().reset_index().rename({0:'speed_mean'},axis=1)\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='speed_mean',\n    nbinsx=24,\n    nbinsy=7,\n    height=300\n)\n\n                                                \n\n\n\n남색: 교통체증이 심한 곳 / 노란색: 교통체증이 덜한 곳"
  },
  {
    "objectID": "posts/12wk-2.html#a.-예비학습",
    "href": "posts/12wk-2.html#a.-예비학습",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "A. 예비학습",
    "text": "A. 예비학습\n- 경로그리기\n\ndf_sample = pd.DataFrame(\n    {'path':['A','A','B','B','B'],\n     'lon':[-73.986420,-73.995300,-73.975922,-73.988922,-73.962654],\n     'lat':[40.756569,40.740059,40.754192,40.762859,40.772449]}\n)\n\n\ndf_sample\n\n\n\n\n\n\n\n\npath\nlon\nlat\n\n\n\n\n0\nA\n-73.986420\n40.756569\n\n\n1\nA\n-73.995300\n40.740059\n\n\n2\nB\n-73.975922\n40.754192\n\n\n3\nB\n-73.988922\n40.762859\n\n\n4\nB\n-73.962654\n40.772449\n\n\n\n\n\n\n\n\nfig = px.line_mapbox(\n    data_frame=df_sample,\n    lat = 'lat',\n    lon = 'lon',\n    color = 'path',\n    line_group = 'path',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=12,\n    width = 750,\n    height = 600    \n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n- 산점도로 그리기\n\n_fig = px.scatter_mapbox(\n    data_frame=df_sample,\n    lat = 'lat',\n    lon = 'lon',\n    color = 'path',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=12,\n    width = 750,\n    height = 600    \n)\n_fig.show(config={'scrollZoom':False})\n\n                                                \n\n\n- 합치기\n\nfig = px.line_mapbox(\n    data_frame=df_sample,\n    lat = 'lat',\n    lon = 'lon',\n    color = 'path',\n    line_group = 'path',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=12,\n    width = 750,\n    height = 600    \n)\nscatter_data = px.scatter_mapbox(\n    data_frame=df_sample,\n    lat = 'lat',\n    lon = 'lon',\n    color = 'path',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=12,\n    width = 750,\n    height = 600    \n).data \nfig.add_trace(scatter_data[0])\nfig.add_trace(scatter_data[1])\nfig.show(config={'scrollZoom':False})"
  },
  {
    "objectID": "posts/12wk-2.html#b.-전처리",
    "href": "posts/12wk-2.html#b.-전처리",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "B. 전처리",
    "text": "B. 전처리\n\npcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']\ndcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']\ndef transform(df):\n    pickup = df.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')\n    dropoff = df.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')\n    return pd.concat([pickup,dropoff],axis=0)\ndf_left = df_feature_small.drop(pcol+dcol,axis=1)\ndf_right = pd.concat([transform(df) for i, df in df_feature_small.groupby('id')]).reset_index(drop=True)\ndf_feature_small2 = df_left.merge(df_right)\ndf_feature_small2.head()\n\n\n\n\n\n\n\n\nid\nvendor_id\npassenger_count\nstore_and_fwd_flag\ntrip_duration\nlog_trip_duration\ndist\nspeed\ndayofweek\ndatetime\nlongitude\nlatitude\nhour\ntype\n\n\n\n\n0\nid2875421\nB\n1\nN\n455\n6.120297\n0.017680\n0.000039\n0\n2016-03-14 17:24:55\n-73.982155\n40.767937\n17\npickup\n\n\n1\nid2875421\nB\n1\nN\n455\n6.120297\n0.017680\n0.000039\n0\n2016-03-14 17:32:30\n-73.964630\n40.765602\n17\ndropoff\n\n\n2\nid3667993\nB\n1\nN\n486\n6.186209\n0.023482\n0.000048\n6\n2016-01-03 04:18:57\n-73.980522\n40.730530\n4\npickup\n\n\n3\nid3667993\nB\n1\nN\n486\n6.186209\n0.023482\n0.000048\n6\n2016-01-03 04:27:03\n-73.997993\n40.746220\n4\ndropoff\n\n\n4\nid2002463\nB\n1\nN\n501\n6.216606\n0.012256\n0.000024\n3\n2016-01-14 12:28:56\n-73.965652\n40.768398\n12\npickup"
  },
  {
    "objectID": "posts/12wk-2.html#c.-vendor_id-passenger_count-시각화",
    "href": "posts/12wk-2.html#c.-vendor_id-passenger_count-시각화",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "C. vendor_id, passenger_count 시각화",
    "text": "C. vendor_id, passenger_count 시각화\n\nfig = px.line_mapbox(\n    data_frame=df_feature_small2,\n    lat = 'latitude',\n    lon = 'longitude',\n    color = 'vendor_id',\n    line_group = 'id',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600    \n)\nscatter_data = px.scatter_mapbox(\n    data_frame=df_feature_small2,\n    lat = 'latitude',\n    lon = 'longitude',\n    size = 'passenger_count',\n    size_max = 10,\n    color = 'vendor_id',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600    \n).data \nfor sd in scatter_data: \n    fig.add_trace(sd)\nfig.update_traces(\n    line={\n        'width':1\n    },\n    opacity=0.8\n)    \nfig.show(config={'scrollZoom':False})"
  },
  {
    "objectID": "posts/12wk-2.html#d.-dayofweek별-시각화",
    "href": "posts/12wk-2.html#d.-dayofweek별-시각화",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "D. dayofweek별 시각화",
    "text": "D. dayofweek별 시각화\n\ntidydata = df_feature_small2.assign(dayofweek = lambda df: df.dayofweek.astype(str)).sort_values('dayofweek')\nfig = px.line_mapbox(\n    data_frame=tidydata,\n    lat = 'latitude',\n    lon = 'longitude',\n    line_group = 'id',\n    color = 'dayofweek',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600    \n)\nscatter_data = px.scatter_mapbox(\n    data_frame=tidydata,\n    lat = 'latitude',\n    lon = 'longitude',\n    size = 'passenger_count',\n    size_max = 10,\n    color = 'dayofweek',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600    \n).data \nfor sd in scatter_data: \n    fig.add_trace(sd)\nfig.update_traces(\n    line={\n        'width':1\n    },\n    opacity=0.8\n)\nfig.show(config={'scrollZoom':False})"
  },
  {
    "objectID": "posts/12wk-2.html#e.-speed별-시각화",
    "href": "posts/12wk-2.html#e.-speed별-시각화",
    "title": "12wk-2: NYCTaxi 자료 분석 (2)",
    "section": "E. speed별 시각화",
    "text": "E. speed별 시각화\n\ntidydata = df_feature_small2.assign(\n    speed_cut = pd.qcut(df_feature_small2.speed,4)\n).sort_values('speed_cut')\nfig = px.line_mapbox(\n    data_frame=tidydata,\n    lat = 'latitude',\n    lon = 'longitude',\n    line_group = 'id',\n    color = 'speed_cut',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600    \n)\nscatter_data = px.scatter_mapbox(\n    data_frame=tidydata,\n    lat = 'latitude',\n    lon = 'longitude',\n    size = 'passenger_count',\n    size_max = 10,\n    color = 'speed_cut',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width = 750,\n    height = 600    \n).data \nfor sd in scatter_data: \n    fig.add_trace(sd)\nfig.update_traces(\n    line={\n        'width':1\n    },\n    opacity=0.8\n)\nfig.show(config={'scrollZoom':False})\n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning."
  },
  {
    "objectID": "posts/10wk-1.html#a.-크롤링-데이터정리",
    "href": "posts/10wk-1.html#a.-크롤링-데이터정리",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "A. 크롤링 + 데이터정리",
    "text": "A. 크롤링 + 데이터정리\n- yahoo finance: https://finance.yahoo.com/\nApple: 'AAPL'\n\n\n\nApple 코드\n\n\n삼성전자: '005930.KS'\n\n\n\n삼성전자 코드\n\n\n- 크롤링을 위한 코드\n\nsymbols = ['AMZN','AAPL','GOOG','MSFT','NFLX','NVDA','TSLA']\nstart = '2020-01-01'\nend = '2023-11-06'\ndf = yf.download(symbols,start,end)\ndf\n\n[                       0%%                      ][**************        29%%                      ]  2 of 7 completed[********************* 43%%                      ]  3 of 7 completed[**********************57%%*                     ]  4 of 7 completed[**********************71%%********              ]  5 of 7 completed[**********************86%%***************       ]  6 of 7 completed[*********************100%%**********************]  7 of 7 completed\n\n\n\n\n\n\n\n\n\nAdj Close\nClose\n...\nOpen\nVolume\n\n\n\nAAPL\nAMZN\nGOOG\nMSFT\nNFLX\nNVDA\nTSLA\nAAPL\nAMZN\nGOOG\n...\nNFLX\nNVDA\nTSLA\nAAPL\nAMZN\nGOOG\nMSFT\nNFLX\nNVDA\nTSLA\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2020-01-02\n73.152641\n94.900497\n68.368500\n154.779526\n329.809998\n59.744053\n28.684000\n75.087502\n94.900497\n68.368500\n...\n326.100006\n59.687500\n28.299999\n135480400\n80580000\n28132000\n22622100\n4485800\n23753600\n142981500\n\n\n2020-01-03\n72.441460\n93.748497\n68.032997\n152.852280\n325.899994\n58.787781\n29.534000\n74.357498\n93.748497\n68.032997\n...\n326.779999\n58.775002\n29.366667\n146322800\n75288000\n23728000\n21116200\n3806900\n20538400\n266677500\n\n\n2020-01-06\n73.018692\n95.143997\n69.710503\n153.247360\n335.829987\n59.034309\n30.102667\n74.949997\n95.143997\n69.710503\n...\n323.119995\n58.080002\n29.364668\n118387200\n81236000\n34646000\n20813700\n5663100\n26263600\n151995000\n\n\n2020-01-07\n72.675285\n95.343002\n69.667000\n151.850082\n330.750000\n59.749020\n31.270666\n74.597504\n95.343002\n69.667000\n...\n336.470001\n59.549999\n30.760000\n108872000\n80898000\n30054000\n21634100\n4703200\n31485600\n268231500\n\n\n2020-01-08\n73.844376\n94.598503\n70.216003\n154.268814\n339.260010\n59.861080\n32.809334\n75.797501\n94.598503\n70.216003\n...\n331.489990\n59.939999\n31.580000\n132079200\n70160000\n30560000\n27746500\n7104500\n27710800\n467164500\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-10-30\n170.065933\n132.710007\n125.750000\n336.626770\n410.079987\n411.573792\n197.360001\n170.289993\n132.710007\n125.750000\n...\n402.350006\n410.869995\n209.279999\n51131000\n72485500\n24165600\n22828100\n5317100\n38802800\n136448200\n\n\n2023-10-31\n170.545319\n133.089996\n125.300003\n337.425140\n411.690002\n407.764130\n200.839996\n170.770004\n133.089996\n125.300003\n...\n409.239990\n404.500000\n196.119995\n44846000\n51589400\n21123400\n20265300\n3877600\n51796900\n118068300\n\n\n2023-11-01\n173.741104\n137.000000\n127.570000\n345.369019\n420.190002\n423.212799\n205.660004\n173.970001\n137.000000\n127.570000\n...\n414.769989\n408.839996\n204.039993\n56934900\n61529400\n26536600\n28158800\n4806100\n43759300\n121661700\n\n\n2023-11-02\n177.336380\n138.070007\n128.580002\n347.614471\n424.709991\n435.021759\n218.509995\n177.570007\n138.070007\n128.580002\n...\n421.170013\n433.279999\n212.970001\n77334800\n52236700\n24091700\n24348100\n4476000\n40917200\n125987600\n\n\n2023-11-03\n176.417572\n138.600006\n130.369995\n352.085388\n432.359985\n450.010406\n219.960007\n176.649994\n138.600006\n130.369995\n...\n428.760010\n440.200012\n221.149994\n79763700\n44007200\n19517900\n23624000\n3664800\n42385500\n119281000\n\n\n\n\n968 rows × 42 columns\n\n\n\n- 데이터를 살펴보자.\n\ndf.stack()\n\n\n\n\n\n\n\n\n\nAdj Close\nClose\nHigh\nLow\nOpen\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n2020-01-02\nAAPL\n73.152641\n75.087502\n75.150002\n73.797501\n74.059998\n135480400\n\n\nAMZN\n94.900497\n94.900497\n94.900497\n93.207497\n93.750000\n80580000\n\n\nGOOG\n68.368500\n68.368500\n68.406998\n67.077499\n67.077499\n28132000\n\n\nMSFT\n154.779526\n160.619995\n160.729996\n158.330002\n158.779999\n22622100\n\n\nNFLX\n329.809998\n329.809998\n329.980011\n324.779999\n326.100006\n4485800\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-11-03\nGOOG\n130.369995\n130.369995\n130.729996\n129.009995\n129.089996\n19517900\n\n\nMSFT\n352.085388\n352.799988\n354.390015\n347.329987\n349.630005\n23624000\n\n\nNFLX\n432.359985\n432.359985\n434.820007\n425.529999\n428.760010\n3664800\n\n\nNVDA\n450.010406\n450.049988\n453.089996\n437.230011\n440.200012\n42385500\n\n\nTSLA\n219.960007\n219.960007\n226.369995\n218.399994\n221.149994\n119281000\n\n\n\n\n6776 rows × 6 columns\n\n\n\n\n\n\n\n\n\nChatGPT\n\n\n\n“Adj Close”는 “Adjusted Closing Price”를 의미합니다. 주식 시장에서 각 거래일의 마감 가격을 조정하여 나타낸 값입니다. “조정”이라는 용어는 주식 분할, 배당금 지급, 자본 변동과 같은 기업 활동을 반영하여 가격을 수정한 것을 의미합니다. 이는 투자자들이 시간이 지나면서 주식의 실제 성과를 더 정확히 비교할 수 있게 해줍니다.\n“Close”는 해당 거래일에 주식 시장이 닫힐 때의 주식 가격입니다.\n다른 열은 다음을 의미합니다:\n\n“High”는 해당 거래일에 주식이 거래된 최고 가격입니다.\n“Low”는 해당 거래일에 주식이 거래된 최저 가격입니다.\n“Open”은 주식 시장이 개장했을 때의 주식 가격입니다.\n“Volume”은 그 날에 거래된 주식의 총 수량입니다.\n\n표는 다양한 날짜에 대한 여러 주요 기술 회사들(예: AAPL - Apple Inc., AMZN - Amazon.com Inc., GOOG - Alphabet Inc., MSFT - Microsoft Corporation, NFLX - Netflix Inc., NVDA - NVIDIA Corporation, TSLA - Tesla Inc.)의 주식 정보를 보여줍니다.\n\n\n- Adj Close만을 선택\n\ndf.stack().loc[:,'Adj Close']\n\nDate            \n2020-01-02  AAPL     73.152641\n            AMZN     94.900497\n            GOOG     68.368500\n            MSFT    154.779526\n            NFLX    329.809998\n                       ...    \n2023-11-03  GOOG    130.369995\n            MSFT    352.085388\n            NFLX    432.359985\n            NVDA    450.010406\n            TSLA    219.960007\nName: Adj Close, Length: 6776, dtype: float64\n\n\n- Adj Close만을 선택 – 또 다른 방법 (일단 이거로 할게요)\n\ndf.loc[:,'Adj Close']\n\n\n\n\n\n\n\n\nAAPL\nAMZN\nGOOG\nMSFT\nNFLX\nNVDA\nTSLA\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n2020-01-02\n73.152641\n94.900497\n68.368500\n154.779526\n329.809998\n59.744053\n28.684000\n\n\n2020-01-03\n72.441460\n93.748497\n68.032997\n152.852280\n325.899994\n58.787781\n29.534000\n\n\n2020-01-06\n73.018692\n95.143997\n69.710503\n153.247360\n335.829987\n59.034309\n30.102667\n\n\n2020-01-07\n72.675285\n95.343002\n69.667000\n151.850082\n330.750000\n59.749020\n31.270666\n\n\n2020-01-08\n73.844376\n94.598503\n70.216003\n154.268814\n339.260010\n59.861080\n32.809334\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2023-10-30\n170.065933\n132.710007\n125.750000\n336.626770\n410.079987\n411.573792\n197.360001\n\n\n2023-10-31\n170.545319\n133.089996\n125.300003\n337.425140\n411.690002\n407.764130\n200.839996\n\n\n2023-11-01\n173.741104\n137.000000\n127.570000\n345.369019\n420.190002\n423.212799\n205.660004\n\n\n2023-11-02\n177.336380\n138.070007\n128.580002\n347.614471\n424.709991\n435.021759\n218.509995\n\n\n2023-11-03\n176.417572\n138.600006\n130.369995\n352.085388\n432.359985\n450.010406\n219.960007\n\n\n\n\n968 rows × 7 columns"
  },
  {
    "objectID": "posts/10wk-1.html#b.-시각화",
    "href": "posts/10wk-1.html#b.-시각화",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "B. 시각화",
    "text": "B. 시각화\n- tidydata를 생성\n\ndf.loc[:,'Adj Close'].stack().reset_index()\\\n.set_axis(['Date','Company','Price'],axis=1)\n\n\n\n\n\n\n\n\nDate\nCompany\nPrice\n\n\n\n\n0\n2020-01-02\nAAPL\n73.152641\n\n\n1\n2020-01-02\nAMZN\n94.900497\n\n\n2\n2020-01-02\nGOOG\n68.368500\n\n\n3\n2020-01-02\nMSFT\n154.779526\n\n\n4\n2020-01-02\nNFLX\n329.809998\n\n\n...\n...\n...\n...\n\n\n6771\n2023-11-03\nGOOG\n130.369995\n\n\n6772\n2023-11-03\nMSFT\n352.085388\n\n\n6773\n2023-11-03\nNFLX\n432.359985\n\n\n6774\n2023-11-03\nNVDA\n450.010406\n\n\n6775\n2023-11-03\nTSLA\n219.960007\n\n\n\n\n6776 rows × 3 columns\n\n\n\n- 바로 이어서 시각화! – x='Date', y='Price', color='Company'\n\ndf.loc[:,'Adj Close'].stack().reset_index()\\\n.set_axis(['Date','Company','Price'],axis=1)\\\n.plot.line(x='Date',y='Price',color='Company',backend='plotly')\n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/_plotly_utils/basevalidators.py:105: FutureWarning:\n\nThe behavior of DatetimeProperties.to_pydatetime is deprecated, in a future version this will return a Series containing python datetime objects instead of an ndarray. To retain the old behavior, call `np.array` on the result"
  },
  {
    "objectID": "posts/10wk-1.html#a.-크롤링-데이터정리-1",
    "href": "posts/10wk-1.html#a.-크롤링-데이터정리-1",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "A. 크롤링 + 데이터정리",
    "text": "A. 크롤링 + 데이터정리\n- 대한민국의 저출산문제\nref: https://ko.wikipedia.org/wiki/대한민국의_저출산\n- 위의 url에서 5번째 테이블을 읽고싶다.\n\n5번째 테이블: 시도별 출생아 수\n\n\ndf_lst = pd.read_html('https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%98_%EC%A0%80%EC%B6%9C%EC%82%B0')\ndf = df_lst[4]\ndf\n\n\n\n\n\n\n\n\n지역/연도[6]\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\n서울\n93266\n91526\n93914.000\n84066.000\n83711.000\n83005\n75.536\n65389\n58074\n53.673\n47400\n45531\n\n\n1\n부산\n27415\n27759\n28673.000\n25831.000\n26190.000\n26645\n24906.000\n21480\n19152\n17049.000\n15100\n14446\n\n\n2\n대구\n20557\n20758\n21472.000\n19340.000\n19361.000\n19438\n18298.000\n15946\n14400\n13233.000\n11200\n10661\n\n\n3\n인천\n25752\n20758\n21472.000\n25560.000\n25786.000\n25491\n23609.000\n20445\n20087\n18522.000\n16000\n14947\n\n\n4\n광주\n13979\n13916\n14392.000\n12729.000\n12729.000\n12441\n11580.000\n10120\n9105\n8364.000\n7300\n7956\n\n\n5\n대전\n14314\n14808\n15279.000\n14099.000\n13962.000\n13774\n12436.000\n10851\n9337\n8410.000\n7500\n7414\n\n\n6\n울산\n11432\n11542\n12160.000\n11330.000\n11556.000\n11732\n10910.000\n9381\n8149\n7539.000\n6600\n6127\n\n\n7\n세종\n-\n-\n1054.000\n1111.000\n1344.000\n2708\n3297.000\n3504\n3703\n3819.000\n3500\n3570\n\n\n8\n경기\n121753\n122027\n124746.000\n112129.000\n112.169\n113495\n105643.000\n94088\n83198\n83.198\n77800\n76139\n\n\n9\n강원\n12477\n12408\n12426.000\n10980.000\n10662.000\n10929\n10058.000\n9958\n8351\n8283.000\n7800\n7357\n\n\n10\n충북\n14670\n14804\n15139.000\n13658.000\n13366.000\n13563\n12742.000\n11394\n10586\n9333.000\n8600\n8190\n\n\n11\n충남\n20.242\n20.398\n20.448\n18.628\n18200.000\n18604\n17302.000\n15670\n14380\n13228.000\n11900\n10984\n\n\n12\n전북\n16100\n16175\n16238.000\n14555.000\n14231.000\n14087\n12698.000\n11348\n10001\n8971.000\n8200\n7745\n\n\n13\n전남\n16654\n16612\n16990.000\n15401.000\n14817.000\n15061\n13980.000\n12354\n11238\n10832.000\n9700\n8430\n\n\n14\n경북\n23700\n24250\n24635.000\n22206.000\n22062.000\n22310\n20616.000\n17957\n16079\n14472.000\n12900\n12045\n\n\n15\n경남\n32203\n32536\n33211.000\n29504.000\n29763.000\n29537\n27138.000\n23849\n21224\n19250.000\n16800\n15562\n\n\n16\n제주\n5657\n5628\n5992.000\n5328.000\n5526.000\n5600\n5494.000\n5037\n4781\n4500.000\n4000\n3728\n\n\n17\n전국\n470171\n471265\n484550.000\n436455.000\n435435.000\n438420\n406243.000\n357771\n326822\n302676.000\n272400\n260562\n\n\n\n\n\n\n\n- '-'로 표현된 값을 0으로 처리하는게 좋겠음\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).reset_index()\n\n/tmp/ipykernel_179455/1737303492.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\n\n지역\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\n서울\n93266.000\n91526.000\n93914.000\n84066.000\n83711.000\n83005.0\n75.536\n65389.0\n58074.0\n53.673\n47400.0\n45531.0\n\n\n1\n부산\n27415.000\n27759.000\n28673.000\n25831.000\n26190.000\n26645.0\n24906.000\n21480.0\n19152.0\n17049.000\n15100.0\n14446.0\n\n\n2\n대구\n20557.000\n20758.000\n21472.000\n19340.000\n19361.000\n19438.0\n18298.000\n15946.0\n14400.0\n13233.000\n11200.0\n10661.0\n\n\n3\n인천\n25752.000\n20758.000\n21472.000\n25560.000\n25786.000\n25491.0\n23609.000\n20445.0\n20087.0\n18522.000\n16000.0\n14947.0\n\n\n4\n광주\n13979.000\n13916.000\n14392.000\n12729.000\n12729.000\n12441.0\n11580.000\n10120.0\n9105.0\n8364.000\n7300.0\n7956.0\n\n\n5\n대전\n14314.000\n14808.000\n15279.000\n14099.000\n13962.000\n13774.0\n12436.000\n10851.0\n9337.0\n8410.000\n7500.0\n7414.0\n\n\n6\n울산\n11432.000\n11542.000\n12160.000\n11330.000\n11556.000\n11732.0\n10910.000\n9381.0\n8149.0\n7539.000\n6600.0\n6127.0\n\n\n7\n세종\n0.000\n0.000\n1054.000\n1111.000\n1344.000\n2708.0\n3297.000\n3504.0\n3703.0\n3819.000\n3500.0\n3570.0\n\n\n8\n경기\n121753.000\n122027.000\n124746.000\n112129.000\n112.169\n113495.0\n105643.000\n94088.0\n83198.0\n83.198\n77800.0\n76139.0\n\n\n9\n강원\n12477.000\n12408.000\n12426.000\n10980.000\n10662.000\n10929.0\n10058.000\n9958.0\n8351.0\n8283.000\n7800.0\n7357.0\n\n\n10\n충북\n14670.000\n14804.000\n15139.000\n13658.000\n13366.000\n13563.0\n12742.000\n11394.0\n10586.0\n9333.000\n8600.0\n8190.0\n\n\n11\n충남\n20.242\n20.398\n20.448\n18.628\n18200.000\n18604.0\n17302.000\n15670.0\n14380.0\n13228.000\n11900.0\n10984.0\n\n\n12\n전북\n16100.000\n16175.000\n16238.000\n14555.000\n14231.000\n14087.0\n12698.000\n11348.0\n10001.0\n8971.000\n8200.0\n7745.0\n\n\n13\n전남\n16654.000\n16612.000\n16990.000\n15401.000\n14817.000\n15061.0\n13980.000\n12354.0\n11238.0\n10832.000\n9700.0\n8430.0\n\n\n14\n경북\n23700.000\n24250.000\n24635.000\n22206.000\n22062.000\n22310.0\n20616.000\n17957.0\n16079.0\n14472.000\n12900.0\n12045.0\n\n\n15\n경남\n32203.000\n32536.000\n33211.000\n29504.000\n29763.000\n29537.0\n27138.000\n23849.0\n21224.0\n19250.000\n16800.0\n15562.0\n\n\n16\n제주\n5657.000\n5628.000\n5992.000\n5328.000\n5526.000\n5600.0\n5494.000\n5037.0\n4781.0\n4500.000\n4000.0\n3728.0\n\n\n17\n전국\n470171.000\n471265.000\n484550.000\n436455.000\n435435.000\n438420.0\n406243.000\n357771.0\n326822.0\n302676.000\n272400.0\n260562.0"
  },
  {
    "objectID": "posts/10wk-1.html#b.-시각화1-전국-출생아수-시각화",
    "href": "posts/10wk-1.html#b.-시각화1-전국-출생아수-시각화",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "B. 시각화1: 전국 출생아수 시각화",
    "text": "B. 시각화1: 전국 출생아수 시각화\n- 전국으로 집계가 되어있던 정보를 남겨도 좋지만, groupy+agg 조합으로 새롭게 계산해보자.\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.groupby('년도').agg({'출생아수':'sum'}).reset_index()\\\n.plot.line(x='년도',y='출생아수',backend='plotly')\n\n/tmp/ipykernel_179455/1805618332.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead."
  },
  {
    "objectID": "posts/10wk-1.html#c.-시각화2-시도별-출생아수-시각화-line",
    "href": "posts/10wk-1.html#c.-시각화2-시도별-출생아수-시각화-line",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "C. 시각화2: 시도별 출생아수 시각화 (line)",
    "text": "C. 시각화2: 시도별 출생아수 시각화 (line)\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.line(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_179455/277281482.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead."
  },
  {
    "objectID": "posts/10wk-1.html#d.-시각화3-시도별-출생아수-시각화-area",
    "href": "posts/10wk-1.html#d.-시각화3-시도별-출생아수-시각화-area",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "D. 시각화3: 시도별 출생아수 시각화 (area)",
    "text": "D. 시각화3: 시도별 출생아수 시각화 (area)\n- 시각화1,시각화2의 정보가 적절히 혼합되어있는 시각화는 없을까?\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.area(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_179455/70633050.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n                                                \n\n\n\n기묘하다..\n\n- 해석: 2014년 경기, 2016년 서울, 2019년 경기에 애를 낳지 않는다.\n- 데이터와 비교\n\ndf\n\n\n\n\n\n\n\n\n지역/연도[6]\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\n서울\n93266\n91526\n93914.000\n84066.000\n83711.000\n83005\n75.536\n65389\n58074\n53.673\n47400\n45531\n\n\n1\n부산\n27415\n27759\n28673.000\n25831.000\n26190.000\n26645\n24906.000\n21480\n19152\n17049.000\n15100\n14446\n\n\n2\n대구\n20557\n20758\n21472.000\n19340.000\n19361.000\n19438\n18298.000\n15946\n14400\n13233.000\n11200\n10661\n\n\n3\n인천\n25752\n20758\n21472.000\n25560.000\n25786.000\n25491\n23609.000\n20445\n20087\n18522.000\n16000\n14947\n\n\n4\n광주\n13979\n13916\n14392.000\n12729.000\n12729.000\n12441\n11580.000\n10120\n9105\n8364.000\n7300\n7956\n\n\n5\n대전\n14314\n14808\n15279.000\n14099.000\n13962.000\n13774\n12436.000\n10851\n9337\n8410.000\n7500\n7414\n\n\n6\n울산\n11432\n11542\n12160.000\n11330.000\n11556.000\n11732\n10910.000\n9381\n8149\n7539.000\n6600\n6127\n\n\n7\n세종\n-\n-\n1054.000\n1111.000\n1344.000\n2708\n3297.000\n3504\n3703\n3819.000\n3500\n3570\n\n\n8\n경기\n121753\n122027\n124746.000\n112129.000\n112.169\n113495\n105643.000\n94088\n83198\n83.198\n77800\n76139\n\n\n9\n강원\n12477\n12408\n12426.000\n10980.000\n10662.000\n10929\n10058.000\n9958\n8351\n8283.000\n7800\n7357\n\n\n10\n충북\n14670\n14804\n15139.000\n13658.000\n13366.000\n13563\n12742.000\n11394\n10586\n9333.000\n8600\n8190\n\n\n11\n충남\n20.242\n20.398\n20.448\n18.628\n18200.000\n18604\n17302.000\n15670\n14380\n13228.000\n11900\n10984\n\n\n12\n전북\n16100\n16175\n16238.000\n14555.000\n14231.000\n14087\n12698.000\n11348\n10001\n8971.000\n8200\n7745\n\n\n13\n전남\n16654\n16612\n16990.000\n15401.000\n14817.000\n15061\n13980.000\n12354\n11238\n10832.000\n9700\n8430\n\n\n14\n경북\n23700\n24250\n24635.000\n22206.000\n22062.000\n22310\n20616.000\n17957\n16079\n14472.000\n12900\n12045\n\n\n15\n경남\n32203\n32536\n33211.000\n29504.000\n29763.000\n29537\n27138.000\n23849\n21224\n19250.000\n16800\n15562\n\n\n16\n제주\n5657\n5628\n5992.000\n5328.000\n5526.000\n5600\n5494.000\n5037\n4781\n4500.000\n4000\n3728\n\n\n17\n전국\n470171\n471265\n484550.000\n436455.000\n435435.000\n438420\n406243.000\n357771\n326822\n302676.000\n272400\n260562"
  },
  {
    "objectID": "posts/10wk-1.html#e.-시각화123-수정",
    "href": "posts/10wk-1.html#e.-시각화123-수정",
    "title": "10wk-1: 야후 finance, 출산율 자료 시각화",
    "section": "E. 시각화1,2,3 수정",
    "text": "E. 시각화1,2,3 수정\n- 시각화1의 수정\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.applymap(lambda x: x*1000 if x&lt;1000 else x)\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.groupby('년도').agg({'출생아수':'sum'}).reset_index()\\\n.plot.line(x='년도',y='출생아수',backend='plotly')\n\n/tmp/ipykernel_179455/1274971694.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n/tmp/ipykernel_179455/1274971694.py:4: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n                                                \n\n\n- 시각화2의 수정\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.applymap(lambda x: x*1000 if x&lt;1000 else x)\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.line(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_179455/1526382732.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n/tmp/ipykernel_179455/1526382732.py:4: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n                                                \n\n\n- 시각화3의 수정\n\ndf.rename({'지역/연도[6]':'지역'},axis=1)\\\n.set_index(['지역'])\\\n.applymap(lambda x: 0 if '-' in str(x) else float(x)).drop('전국')\\\n.applymap(lambda x: x*1000 if x&lt;1000 else x)\\\n.stack().reset_index().rename({'level_1':'년도',0:'출생아수'},axis=1)\\\n.plot.area(x='년도',y='출생아수',color='지역',backend='plotly')\n\n/tmp/ipykernel_179455/3339566067.py:3: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n/tmp/ipykernel_179455/3339566067.py:4: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead."
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html",
    "href": "posts/10wk-supp-mid-sol.html",
    "title": "supp-4: 중간고사 풀이",
    "section": "",
    "text": "import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom plotnine import * \n#---#\nimport PIL\nimport io \nimport requests\nimport cv2"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#에너지-사용-추세-10점",
    "href": "posts/10wk-supp-mid-sol.html#에너지-사용-추세-10점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(1) 에너지 사용 추세 – 10점",
    "text": "(1) 에너지 사용 추세 – 10점\n2018년부터 2021년까지 에너지사용량을 dot-connected plot으로 시각화 하라.\n시각화 예시\n\n세부지침\n1. plotnine으로 생성된 fig1에 .draw()메소드를 사용하여 matplotlib.figure.Figure 자료형으로 변환할것\n1 type이 plotnine.ggplot.ggplot 인 오브젝트2. 변환된 자료형에 fig.suptitle() method를 사용하여 제목을 설정할것.\n\n(풀이)\n\ntidydata = df.loc[:,['Year','Elec','Gas','Heat']]\\\n.eval('EnergyUse = Elec + Gas + Heat')\\\n.pivot_table(index= 'Year', values = 'EnergyUse', aggfunc='sum').reset_index()\n#---#\nfig = ggplot(tidydata)\npoint = geom_point(aes(x='Year',y='EnergyUse'))\nline = geom_line(aes(x='Year',y='EnergyUse'))\nfig = (fig + line + point).draw()\nfig.suptitle(\"Energy Usage Trend from 2018 to 2021\")\nfig"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#에너지-종류별-사용-추세-10점",
    "href": "posts/10wk-supp-mid-sol.html#에너지-종류별-사용-추세-10점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(2) 에너지 종류별 사용 추세 – 10점",
    "text": "(2) 에너지 종류별 사용 추세 – 10점\n2018년부터 2021년까지 에너지사용량을 dot-connected plot으로 시각화 하라. 에너지의 유형은 색상으로 구분하라.\n시각화 예시\n\n세부지침\n1 geom_point의 color와 shape을 EneryType으로 설정할 것.\n2 geom_line의 color와 linetype을 EneryType으로 설정할 것\n\n(풀이)\n\ntidydata = df.loc[:,['Year','Elec','Gas','Heat']]\\\n.melt(id_vars='Year').rename({'variable':'EnergyType','value':'EnergyUse'},axis=1)\\\n.groupby(['Year','EnergyType']).agg({'EnergyUse':'sum'}).reset_index()\n#---#\nfig = ggplot(tidydata)\npoint = geom_point(aes(x='Year',y='EnergyUse',color='EnergyType',shape='EnergyType'))\nline = geom_line(aes(x='Year',y='EnergyUse',color='EnergyType',linetype='EnergyType'))\nfig + line + point"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#년-대비-2021년의-전기에너지-사용량-증가-20점",
    "href": "posts/10wk-supp-mid-sol.html#년-대비-2021년의-전기에너지-사용량-증가-20점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(3) 2020년 대비 2021년의 전기에너지 사용량 증가 – 20점",
    "text": "(3) 2020년 대비 2021년의 전기에너지 사용량 증가 – 20점\n2020년 대비 2021년의 전기에너지 사용량이 증가한 상위 5개의 지역을 아래와 같이 시각화하라.\n시각화 예시\n\n세부지침\n1. 2020년 대비 2021년의 전기에너지 사용 증가량은 아래와 같이 구한다.\n\\[\\text{서울의 전기에너지 사용 증가량} = \\frac{\\text{2021년 서울 전기에너지 사용량}-\\text{2020년 서울 전기에너지 사용량}}{\\text{2020년 서울 전기에너지 사용량}}\\]\n\n\\(\\text{서울의 2021년 전기에너지 사용 증가량}= \\text{2021년 강남구의 전기에너지 사용량} + \\dots + \\text{2021년 중랑구의 전기에너지 사용량}\\)\n\\(\\text{서울의 2020년 전기에너지 사용 증가량}= \\text{2020년 강남구의 전기에너지 사용량} + \\dots + \\text{2020년 중랑구의 전기에너지 사용량}\\)\n\n2. 전기에너지의 사용량이 증가한 상위5개의 지역 중 가장 많이 증가한 2개의 지역은 색깔과 투명도로 하이라이팅 한다. (구체적 코드는 hint를 참고할 것)\n힌트\n- 정리된 자료의 형태는 아래와 같아야 한다.\n\n- 그림안에 text를 넣기위해서 geom_text를 시용한다. 위의 데이터가 정리되었다는 전제하에 구체적인 시각화 코드는 아래와 같다.\nfig = ggplot(tidydata.query('Rank&lt;5'))\ncol = geom_col(aes(x='Rank',y='ElecUseInc',fill='Top2',alpha='Top2'))\ntext = geom_text(aes(x='Rank',y='ElecUseInc',label='Prov'))\nfig + col + text + scale_alpha_manual(values={True: 1, False: 0.2})\n\n(풀이)\n\ndf.pivot_table(index='Prov',columns='Year',values='Elec',aggfunc='sum')\n\n\n\n\n\n\n\nYear\n2018\n2019\n2020\n2021\n\n\nProv\n\n\n\n\n\n\n\n\nBusan\n613522\n602980\n601071\n1043425\n\n\nChungcheongbuk-do\n361490\n351235\n347927\n352396\n\n\nChungcheongnam-do\n456260\n444046\n440752\n454891\n\n\nDaegu\n457556\n445745\n447380\n451326\n\n\nDaejeon\n309660\n302359\n300984\n308426\n\n\nGangwon-do\n386183\n370390\n365168\n369819\n\n\nGwangju\n288191\n285831\n287894\n292585\n\n\nGyeonggi-do\n2264803\n2236781\n2250687\n2332201\n\n\nGyeongsangbuk-do\n521896\n505723\n504694\n513491\n\n\nGyeongsangnam-do\n622126\n609041\n608268\n611001\n\n\nIncheon\n500591\n492754\n489258\n505623\n\n\nJeju-do\n129862\n130855\n134722\n141101\n\n\nJeollabuk-do\n356715\n350862\n351573\n357058\n\n\nJeollanam-do\n338234\n330685\n334805\n338032\n\n\nSejongsi\n60932\n64564\n67545\n70915\n\n\nSeoul\n1990158\n1945093\n1910076\n3486022\n\n\nUlsan\n197002\n192580\n193846\n196412\n\n\n\n\n\n\n\n\ntidydata = df.pivot_table(index='Prov',columns='Year',values='Elec',aggfunc='sum')\\\n.assign(ElecUseInc = lambda df: (df[2021]-df[2020])/df[2020]).loc[:,'ElecUseInc'].reset_index()\\\n.sort_values('ElecUseInc',ascending=False).reset_index(drop=True)\\\n.eval('Rank=index').eval('Top2= Rank&lt;2')\n#---#\nfig = ggplot(tidydata.query('Rank&lt;5'))\ncol = geom_col(aes(x='Rank',y='ElecUseInc',fill='Top2',alpha='Top2'))\ntext = geom_text(aes(x='Rank',y='ElecUseInc',label='Prov'))\nfig + col + text + scale_alpha_manual(values={True: 1, False: 0.2})"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#건물당-에너지-소비량-연도별-상위-15구-비교-20점",
    "href": "posts/10wk-supp-mid-sol.html#건물당-에너지-소비량-연도별-상위-15구-비교-20점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(4) 건물당 에너지 소비량: 연도별 상위 15구 비교 – 20점",
    "text": "(4) 건물당 에너지 소비량: 연도별 상위 15구 비교 – 20점\n건물당 에너지소비량이 가장 큰 15개의 구를 연도별로 시각화하라.\n시각화 예시\n\n세부지침\n1. 건물당 에너지 사용량(=EUB)을 아래와 같은 방식으로 구할 것\n\\[\\text{EUB}_{강남구,2018}=\\frac{\\text{강남구의 2018년도 전기에너지 사용량}+ \\text{강남구의 2018년도 도시가스 사용량} +\\text{강남구의 2018년도 지역난방 사용량}}{\\text{강남구의 2018년도 건물동수}}\\]\n2. 연도별로 EUB가 높은 15개의 구를 정렬할 것. (따라서 매년도마다 순위가 다를수 있음)\n\n(풀이)\n\ng = df.eval('EUB = (Elec + Gas + Heat)/BldgCount').loc[:,['Year','Prov','Reg','EUB']].groupby(['Year'])\ntidydata = pd.concat([df.sort_values('EUB',ascending=False).iloc[:15].reset_index(drop=True).eval('Rank=index') for k,df in g]).reset_index(drop=True)\n#---#\nfig = ggplot(tidydata)\ncol = geom_col(aes(x='Rank',y='EUB',fill='Prov'))\nfacet = facet_wrap('Year')\nfig + col + facet"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#수도권과-비수도권의-전기-에너지-사용량-및-사용-비율-20점",
    "href": "posts/10wk-supp-mid-sol.html#수도권과-비수도권의-전기-에너지-사용량-및-사용-비율-20점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(5) 수도권과 비수도권의 전기 에너지 사용량 및 사용 비율 – 20점",
    "text": "(5) 수도권과 비수도권의 전기 에너지 사용량 및 사용 비율 – 20점\n수도권과 비수도권의 전기에너지 사용량 및 사용비율을 계산하고 시각화 하라.\n시각화예시\n\n세부지침\n1. ['Seoul','Gyeonggi-do','Incheon']은 수도권으로 그 외의 지역은 비수도권으로 분리한다.\n2. 수도권의 전기에너지 사용비율은 아래와 같이 구한다.\n\\[\\text{2018년 수도권의 전기에너지 사용비율} = \\frac{\\text{2018년 수도권의 전기 사용량}}{\\text{2018년 수도권의 전기 사용량}+\\text{2018년 수도권의 도시가스 사용량}+\\text{2018년 수도권의 지역난방 사용량}}\\]\n3. facet_wrap 사용시 scales='free' 옵션을 사용할 것\n\n(풀이)\n\ntidydata = df.assign(Metro = df.Prov.apply(lambda x: x in ['Seoul','Gyeonggi-do','Incheon']))\\\n.pivot_table(index=['Metro','Year'],values=['Elec','Gas','Heat'],aggfunc='sum')\\\n.eval('ElecRate = Elec/(Elec+Gas+Heat)').rename({'Elec':'ElecUse'},axis=1)\\\n.loc[:,['ElecUse','ElecRate']].stack().reset_index()\\\n.set_axis(['Metro','Year','MsrType','Amount'],axis=1)\n# #---#\nfig = ggplot(tidydata)\nline = geom_line(aes(x='Year',y='Amount',color='Metro'))\npoint = geom_point(aes(x='Year',y='Amount',color='Metro'))\nfacet = facet_wrap('MsrType',scales='free')\nfig + line + point + facet"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#나이와-포지션에-따른-선수-가치-및-급여-분석-10점",
    "href": "posts/10wk-supp-mid-sol.html#나이와-포지션에-따른-선수-가치-및-급여-분석-10점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(1) 나이와 포지션에 따른 선수 가치 및 급여 분석 – 10점",
    "text": "(1) 나이와 포지션에 따른 선수 가치 및 급여 분석 – 10점\n나이에 따른 선수가치(Value)와 급여(Wage)의 산점도를 포지션별로 시각화 하고 추세선을 그려라.\n시각화 예시\n\n세부지침\n1. Value와 Wage는 log값을 취하여 시각화 하라.\n2. geom_point를 사용할 시alpha=0.2, size=0.1, position='jitter'로 설정하라.\n3. SUB와 RES 포지션은 제외하고 시각화 할 것\n\n(풀이)\n\ntidydata = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).eval('logValue = log(Value)').eval('logWage = log(Wage)')\\\n.loc[:,['Position','Age','logValue','logWage']].melt(id_vars=['Position','Age'])\\\n.set_axis(['Position','Age','FinancialMetric','LogAmount'],axis=1)\n#---#\nfig = ggplot(tidydata.query(\"(Position != 'SUB') and (Position != 'RES')\"))\npoint = geom_point(aes(x='Age',y='LogAmount',color='FinancialMetric'),alpha=0.2,size=0.1,position='jitter')\nsmooth = geom_smooth(aes(x='Age',y='LogAmount',color='FinancialMetric'))\nfacet = facet_wrap('Position')\nfig + point + smooth + facet"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#골키퍼-능력치별-로그급여-추세-10점",
    "href": "posts/10wk-supp-mid-sol.html#골키퍼-능력치별-로그급여-추세-10점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(2) 골키퍼 능력치별 로그급여 추세 – 10점",
    "text": "(2) 골키퍼 능력치별 로그급여 추세 – 10점\n아래의 리스트는 골키퍼와 관련된 능력치이다.\n\ngkstats = ['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ngkstats\n\n['GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\n\ngkstats 에 해당하는 능력치와 로그급여(logWage)를 산점도로 시각화하고 추세선을 추가하라.\n시각화예시\n\n세부지침\n1. 포지션이 “골키퍼”인 선수에 한정하여 시각화 할 것\n2. geom_point를 사용할 시 alpha=0.5,size=0.5,position='jitter' 를 설정하라.\n\n(풀이)\n\ntidydata = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).eval('logWage = log(Wage)').query(\"Position=='GOALKEEPER'\")\\\n.loc[:,['Age','logWage']+gkstats]\\\n.melt(id_vars=['Age','logWage'])\\\n.set_axis(['Age','logWage','AbilType','Abil'],axis=1)\ntidydata\n#---#\nfig = ggplot(tidydata)\npoint = geom_point(aes(x='Abil',y='logWage',color='AbilType'),alpha=0.5,size=0.5,position='jitter')\nsmooth = geom_smooth(aes(x='Abil',y='logWage',color='AbilType'))\nfacet = facet_wrap('AbilType')\nfig + point + facet + smooth \n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings."
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#gkability에-따른-골키퍼의-overall-예측-20점",
    "href": "posts/10wk-supp-mid-sol.html#gkability에-따른-골키퍼의-overall-예측-20점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(3) “GKAbility”에 따른 골키퍼의 Overall 예측 – 20점",
    "text": "(3) “GKAbility”에 따른 골키퍼의 Overall 예측 – 20점\n아래의 리스트는 골키퍼와 관련된 능력치이다.\n\ngkstats = ['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ngkstats\n\n['GKDiving', 'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\n\ngkstats 에 해당하는 능력치의 평균을 계산하고 GKAbility라는 변수에 저장하라. 골키퍼 포지션과 공격수 포지션을 가지는 선수들에 한정하여 GKAbility와 OveraAll(=선수의 전반적 능력치)의 관계를 산점도로 시각화하라.\n시각화 예시\n\n세부지침\n1. ID=212198인 선수 Bruno Fernandes의 경우 GKAbility를 아래와 같이 계산할 수 있다.\n\\[\\text{Bruno Fernandes의 GKAbility} = \\frac{\\text{Bruno Fernandes의 GKDiving} + \\dots + \\text{Bruno Fernandes의 GKReflexes}}{5}\\]\n2. 시각화를 위한 세부옵션은 아래의 코드를 참고하라.\nfig = ggplot(tidydata)\npoint = geom_point(aes(x='GKAbility',y='Overall',size='logWage',alpha='logWage',color='Position'),position='jitter')\nsmooth = geom_smooth(aes(x='GKAbility',y='Overall'),linetype='dashed')\nfacet = facet_wrap('Position',scales='free')\nfig + point + smooth + facet\n\n(풀이)\n\ntidydata = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).eval('logWage = log(Wage)')\\\n.query(\"Position=='GOALKEEPER' or Position=='FORWARD'\")\\\n.loc[:,['Position','logWage','Overall']+gkstats]\\\n.assign(GKAbility = lambda df: df.loc[:,'GKDiving':'GKReflexes'].sum(axis=1))\n#---#\nfig = ggplot(tidydata)\npoint = geom_point(aes(x='GKAbility',y='Overall',size='logWage',alpha='logWage',color='Position'),position='jitter')\nsmooth = geom_smooth(aes(x='GKAbility',y='Overall'),linetype='dashed')\nfacet = facet_wrap('Position',scales='free')\nfig + point + smooth + facet"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#포워드와-수비수의-기술별-가치-평가-25점",
    "href": "posts/10wk-supp-mid-sol.html#포워드와-수비수의-기술별-가치-평가-25점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(4) 포워드와 수비수의 기술별 가치 평가 – 25점",
    "text": "(4) 포워드와 수비수의 기술별 가치 평가 – 25점\n아래는 축구선수의 능력치와 관련이 있는 column들의 리스트이다. (골키퍼 관련 능력치는 제외하였음)\n\nabilities_list = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure', 'StandingTackle', 'SlidingTackle']\n\n아래는 위의 abilities_list을 적당한 카테고리로 묶은 것이다.\n\nabilities_categories = {\n    \"FinishingSkills\": ['Finishing', 'HeadingAccuracy', 'Volleys', 'LongShots', 'Positioning', 'Vision', 'Penalties', 'ShotPower', 'Jumping'],\n    \"BallControl_Passing\": ['Dribbling', 'Curve', 'Crossing','ShortPassing', 'LongPassing', 'BallControl','FKAccuracy'],\n    \"Speed_Stamina\": ['Acceleration', 'SprintSpeed', 'Agility', 'Stamina'],\n    \"Reactions_PhysicalAttributes\": ['Reactions', 'Balance', 'Strength', 'Composure'],\n    \"DefensiveSkills\": ['Aggression', 'Interceptions', 'StandingTackle', 'SlidingTackle']\n}\n\n선수들의 여러 능력치를 abilities_categories에 따라 통합하고 각 스킬 카테고리별로 선수의 능력치의 평균을 구하여 SkillValueCategories값에 저장하라. 정리된 자료의 예시는 아래와 같다.\n\n위의 자료를 바탕으로 SkillValueCategories와 logValue의 산점도를 포지션별로 시각화 하라.\n시각화 예시\n\n힌트\n- 아래의 데이터프레임에서\n\n마지막 row의 SkillValueCategories의 값은 아래와 같이 구하였다.\n\\[14.250 = \\frac{\\text{259646선수의 Aggression}+\\dots+\\text{259646선수의 SlidingTackle}}{4}=\\frac{24+6+14+13}{4} \\]\n\n(24+6+14+13)/4\n\n14.25\n\n\n- 시각화를 위해 아래의 코드를 참고하라.\nfig = ggplot(tidydata.query(\"Position=='FORWARD' or Position=='DEFENDER'\"))\npoint = geom_point(aes(x='SkillValueCategories',y='logValue',color='Position'),alpha=0.05,size=0.05)\nsmooth = geom_smooth(aes(x='SkillValueCategories',y='logValue',color='Position'))\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + point + smooth + facet).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig\n\n\n\n\n\n\n문제4에 대한 추가설명\n\n\n\n많은 학생들이 지적하였는데요, 이 문제의 경우는 각 능력치 통합에 필요한 열의 개수가 차이가 있어서 문제예시에 표현된 데이터프레임을 그대로 사용하기 보다 SkillType, SkillValue 열을 제거한뒤 중복된 row를 제거하고 시각화하는 것이 더 올바릅니다. 즉 표에 보이는 데이터가 tidydata로 되어있다면\ntidydata.drop(['SkillType','SkillValue'],axis=1).drop_duplicates() \n와 같이 변환해준뒤에 시각화를 하는게 더 정확합니다.\n제가 문제를 낼때\n\\[14.250 = \\frac{\\text{259646선수의 Aggression}+\\dots+\\text{259646선수의 SlidingTackle}}{4}=\\frac{24+6+14+13}{4} \\]\n와 같은 계산예시를 좀 더 명확하게 설명하고자 하다보니 이런일이.. 아무튼 시험문항은 중복값을 제거하든 제거하지 않든 만점으로 채점하였습니다.\n\n\n\n(풀이1)\n\nbig = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).eval('logValue=log(Value)')\\\n.loc[:,['ID','Position','logValue']+abilities_list]\\\n.melt(id_vars=['Position','ID','logValue'])\\\n.rename({'variable':'SkillType','value':'SkillValue'},axis=1)\\\n.assign(\n     SkillTypeCategories = lambda df: df.SkillType.apply(lambda x: [k for k,v in abilities_categories.items() if x in v].pop())\n)\nsmall = big.groupby(['ID','SkillTypeCategories']).agg({'SkillValue':'mean'},axis=1).reset_index().rename({'SkillValue':'SkillValueCategories'},axis=1)\ntidydata = big.merge(small)#.drop(['SkillType','SkillValue'],axis=1).drop_duplicates() \n#---#\nfig = ggplot(tidydata.query(\"Position=='FORWARD' or Position=='DEFENDER'\"))\npoint = geom_point(aes(x='SkillValueCategories',y='logValue',color='Position'),alpha=0.05,size=0.05)\nsmooth = geom_smooth(aes(x='SkillValueCategories',y='logValue',color='Position'))\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + point + smooth + facet).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig\n\n\n\n\n\n\n\n\n(풀이2) – merge를 죽어도 쓰기 싫다면..\n\ntidydata = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).eval('logValue=log(Value)')\\\n.loc[:,['ID','Position','logValue']+abilities_list]\\\n.melt(id_vars=['Position','ID','logValue'])\\\n.rename({'variable':'SkillType','value':'SkillValue'},axis=1)\\\n.assign(\n     SkillTypeCategories = lambda df: df.SkillType.apply(lambda x: [k for k,v in abilities_categories.items() if x in v].pop())\n).pivot_table(index=['ID','logValue','Position','SkillTypeCategories'],values='SkillValue')\\\n.reset_index().rename({'SkillValue':'SkillValueCategories'},axis=1)\n#---#\nfig = ggplot(tidydata.query(\"Position=='FORWARD' or Position=='DEFENDER'\"))\npoint = geom_point(aes(x='SkillValueCategories',y='logValue',color='Position'),alpha=0.3,size=0.05)\nsmooth = geom_smooth(aes(x='SkillValueCategories',y='logValue',color='Position'))\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + point + smooth + facet).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#스킬-카테고리별-선수의-로그-연봉-분석-25점",
    "href": "posts/10wk-supp-mid-sol.html#스킬-카테고리별-선수의-로그-연봉-분석-25점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(5) 스킬 카테고리별 선수의 로그 연봉 분석 – 25점",
    "text": "(5) 스킬 카테고리별 선수의 로그 연봉 분석 – 25점\n공격수 포지션을 가진 선수들의 특정 능력치가 그들의 Value에 얼마나 영향을 주는지 알아보고자 한다. 선수들의 logValue를 10개의 구간으로 나눈 후, 각 구간별로 [‘FinishingSkills’,…,‘DefensiveSkills’]의 통합능력치 평균을 바 플롯(bar plot)으로 시각화하라.\n시각화 예시\n\n세부지침\n1. logValue는 pd.qcut을 이용하여 분할하고 이때 q=10으로 설정하라.\n2. 시각화를 위해 아래의 코드를 사용하라.\nfig = ggplot(tidydata.query(\"Position=='FORWARD'\")) \ncol = geom_col(aes(x='logValueCut',y='SkillValueCategories',fill='logValueCut'),position='dodge')\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + col + facet + theme(axis_text_x=element_blank(), axis_ticks=element_blank())).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig\n\n(풀이1)\n\nbig = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).assign(logValueCut= lambda df: pd.qcut(np.log(df.Value),q=10))\\\n.loc[:,['ID','Position','logValueCut']+abilities_list]\\\n.melt(id_vars=['Position','ID','logValueCut'])\\\n.rename({'variable':'SkillType','value':'SkillValue'},axis=1)\\\n.assign(\n     SkillTypeCategories = lambda df: df.SkillType.apply(lambda x: [k for k,v in abilities_categories.items() if x in v].pop())\n)\nsmall = big.groupby(['ID','SkillTypeCategories']).agg({'SkillValue':'mean'}).reset_index().rename({'SkillValue':'SkillValueCategories'},axis=1)\ntidydata = big.merge(small)#.drop(['SkillType','SkillValue'],axis=1).drop_duplicates()\n#---#\nfig = ggplot(tidydata.query(\"Position=='FORWARD'\")) \ncol = geom_col(aes(x='logValueCut',y='SkillValueCategories',fill='logValueCut'),position='dodge')\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + col + facet + theme(axis_text_x=element_blank(), axis_ticks=element_blank())).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig\n\n\n\n\n\n\n\n\n(풀이2) – merge를 죽어도 쓰기 싫다면..\n\ntidydata = df.assign(\n    Position = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()),\n    Value = df.Value.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval),\n    Wage = df.Wage.str[1:].str.replace('M','*1000000').str.replace('K','*1000').apply(eval)\n).assign(logValueCut= lambda df: pd.qcut(np.log(df.Value),q=10))\\\n.loc[:,['ID','Position','logValueCut']+abilities_list]\\\n.melt(id_vars=['Position','ID','logValueCut'])\\\n.rename({'variable':'SkillType','value':'SkillValue'},axis=1)\\\n.assign(\n     SkillTypeCategories = lambda df: df.SkillType.apply(lambda x: [k for k,v in abilities_categories.items() if x in v].pop())\n).pivot_table(index=['ID','Position','logValueCut','SkillTypeCategories'],values='SkillValue')\\\n.reset_index().rename({'SkillValue':'SkillValueCategories'},axis=1)\n#---#\nfig = ggplot(tidydata.query(\"Position=='FORWARD'\")) \ncol = geom_col(aes(x='logValueCut',y='SkillValueCategories',fill='logValueCut'),position='dodge')\nfacet = facet_wrap('SkillTypeCategories')\nfig = (fig + col + facet + theme(axis_text_x=element_blank(), axis_ticks=element_blank())).draw()\nfig.set_dpi(150)\nfig.set_size_inches(8,5)\nfig"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#심슨의-역설-10점",
    "href": "posts/10wk-supp-mid-sol.html#심슨의-역설-10점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(1) 심슨의 역설 – 10점",
    "text": "(1) 심슨의 역설 – 10점\n다음은 농구선수 A,B 의 시즌별 자유투 성공률이다.\n\ndf = pd.DataFrame({\n    'Player': ['A','A','A','A','B','B','B','B'], \n    'Season': [1,1,2,2]*2,\n    'Status': ['Success','Failure']*4,\n    'Count': [7,3,None,None,None,None,4,0]\n})\ndf\n\n\n\n\n\n\n\n\nPlayer\nSeason\nStatus\nCount\n\n\n\n\n0\nA\n1\nSuccess\n7.0\n\n\n1\nA\n1\nFailure\n3.0\n\n\n2\nA\n2\nSuccess\nNaN\n\n\n3\nA\n2\nFailure\nNaN\n\n\n4\nB\n1\nSuccess\nNaN\n\n\n5\nB\n1\nFailure\nNaN\n\n\n6\nB\n2\nSuccess\n4.0\n\n\n7\nB\n2\nFailure\n0.0\n\n\n\n\n\n\n\n적절한 값을 채워 시즌 1,2 모두 B선수의 자유투 성공률이 높지만 시즌1-2를 전체 합치면 A선수의 자유투 성공률이 더 높도록 하라. (즉 적절한 값을 채워 심슨의 역설을 설명하기 위한 자료를 구성하라.) 만들어진 자료를 바탕으로 심슨의 역설을 시각화하라. (즉 시즌별 자유투 성공률과 전체 자유투 성공률을 barplot으로 시각화하라)\n(풀이)\nStep1: 예시만들기\n\ndf = pd.DataFrame({\n    'Player': ['A','A','A','A','B','B','B','B'], \n    'Season': [1,1,2,2]*2,\n    'Status': ['Success','Failure']*4,\n    'Count': [7,3,950,50,8,2,4,0]\n})\n\n\ndf.pivot_table(index='Player',columns=['Season','Status'],values='Count')\n\n\n\n\n\n\n\nSeason\n1\n2\n\n\nStatus\nFailure\nSuccess\nFailure\nSuccess\n\n\nPlayer\n\n\n\n\n\n\n\n\nA\n3.0\n7.0\n50.0\n950.0\n\n\nB\n2.0\n8.0\n0.0\n4.0\n\n\n\n\n\n\n\n시즌별 성공률은 A가 낮지만\n\n# 시즌1\n{'A':7/(3+7), 'B':8/(2+8)}\n\n{'A': 0.7, 'B': 0.8}\n\n\n\n# 시즌2\n{'A':950/(50+950), 'B':4/(0+4)}\n\n{'A': 0.95, 'B': 1.0}\n\n\n전체 성공률은 A가 높다.\n\n{'A':(7+950)/(3+7+50+950), 'B':(8+4)/(2+8+0+4)}\n\n{'A': 0.9475247524752475, 'B': 0.8571428571428571}\n\n\nStep2: 시각화\n\ntidydata = df.pivot_table(index=['Player','Season'],columns='Status',values='Count')\\\n.eval('Rate = Success/(Failure+Success)')['Rate'].reset_index()\nggplot(tidydata) + geom_col(aes(x='Player',y='Rate',fill='Player'))+facet_wrap('Season')\n\n\n\n\n\n\n\n\n\ntidydata = df.pivot_table(index='Player',columns='Status',values='Count',aggfunc='sum')\\\n.eval('Rate = Success/(Failure+Success)')['Rate'].reset_index()\ntidydata\nggplot(tidydata) + geom_col(aes(x='Player',y='Rate',fill='Player'))"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#histogram-equalization-5점",
    "href": "posts/10wk-supp-mid-sol.html#histogram-equalization-5점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(2) Histogram Equalization – 5점",
    "text": "(2) Histogram Equalization – 5점\n\nurl = 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Unequalized_Hawkes_Bay_NZ.jpg/300px-Unequalized_Hawkes_Bay_NZ.jpg'\nimg_before = np.array(PIL.Image.open(io.BytesIO(requests.get(url).content)))\nimg_after = cv2.equalizeHist(img_before)\nfig,ax = plt.subplots(2,2)\nax[0,0].imshow(img_before,cmap='gray',vmax=255,vmin=0); ax[0,0].set_title(\"(a) before: image\")\nax[0,1].imshow(img_after,cmap='gray',vmax=255,vmin=0); ax[0,1].set_title(\"(b) after: image\")\nax[1,0].hist(img_before.reshape(-1), bins=255); ax[1,0].set_title(\"(c) before: histogram\")\nax[1,1].hist(img_after.reshape(-1), bins=255); ax[1,1].set_title(\"(d) after: histogram\")\nfig.tight_layout()\n\n\n\n\n\n\n\n\n위의 그림을 올바르게 해석한 사람을 모두 고르라. (모두 맞출 경우만 정답으로 인정)\n\n유진: (a) 이미지의 값들은 (b) 이미지의 값들 보다 분산이 작을 것이다.\n레이: (a) 이미지의 값은 대부분 130~150근처에 모여있어서 회색으로 보인다.\n원영: 130~150 사이의 값들은 (b) 이미지 보다 (a) 이미지에서 훨씬 많은 빈도로 나타난다.\n리즈: (a) 이미지를 (b) 이미지로 바꾸는 기법을 histogram equalization 이라고 하며, 그 원리는 (c)와 같은 히스토그램을 (d)와 같은 히스토그램으로 바꾸는 것이다.\n\n\n\n\n\n\n\n답\n\n\n\n모두 정답~"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#엔스콤의-플랏-5점",
    "href": "posts/10wk-supp-mid-sol.html#엔스콤의-플랏-5점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(3) 엔스콤의 플랏 – 5점",
    "text": "(3) 엔스콤의 플랏 – 5점\n\nx = [10, 8, 13, 9, 11, 14, 6, 4, 12, 7, 5]\ny1 = [8.04, 6.95, 7.58, 8.81, 8.33, 9.96, 7.24, 4.26, 10.84, 4.82, 5.68]\ny2 = [9.14, 8.14, 8.74, 8.77, 9.26, 8.10, 6.13, 3.10, 9.13, 7.26, 4.74]\ny3 = [7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73]\nx4 = [8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8]\ny4 = [6.58, 5.76, 7.71, 8.84, 8.47, 7.04, 5.25, 12.50, 5.56, 7.91, 6.89]\nfig, ((ax1,ax2),(ax3,ax4)) = plt.subplots(2,2)\nax1.plot(x,y1,'.') \nax1.set_title(\"(a)\")\nax2.plot(x,y2,'.') \nax2.set_title(\"(b)\")\nax3.plot(x,y3,'.'); ax3.plot(x[2],y3[2],'o',color='C1') \nax3.set_title(\"(c)\")\nax4.plot(x4,y4,'.'); ax4.plot(x4[-4],y4[-4],'o',color='C1')\nax4.set_title(\"(d)\")\nfig.suptitle(\"Anscombe's quartet\",size=15)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n위의 그림을 올바르게 해석한 사람을 모두 고르라. (모두 맞출경우만 정답으로 인정)\n\n유진: (a)-(d) 모두 양의 상관계수를 가진다.\n레이: 이 중 상관계수값의 해석이 가장 적절한 자료는 (a)이다.\n원영: (b)가 적절하지 않은 이유는 선형성이 가정되어 있지 않기 때문이며, (c)가 적절하지 않은 이유는 주황색점으로 표시된 점이 계수값을 크게 바꾸기 때문이다.\n리즈: (d)의 경우 주황색점의 값 \\((x,y)\\)을 \\((-x,y)\\)로 바꾸게 된다면 상관계수의 부호가 음수가 될 것이다.\n\n\n\n\n\n\n\n답\n\n\n\n모두 정답~"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#아이스크림을-많이-먹으면-걸리는-병-5점",
    "href": "posts/10wk-supp-mid-sol.html#아이스크림을-많이-먹으면-걸리는-병-5점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(4) 아이스크림을 많이 먹으면 걸리는 병 – 5점",
    "text": "(4) 아이스크림을 많이 먹으면 걸리는 병 – 5점\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/icecream.csv')\nggplot(data=df.assign(temp=pd.cut(df.temp,[-np.inf,0,5,10,15,20,25,30,np.inf])))\\\n+geom_point(aes(x='icecream',y='disease',color='temp'))\\\n+geom_smooth(aes(x='icecream',y='disease',color='temp'))\n\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n/home/cgb2/anaconda3/envs/ag/lib/python3.10/site-packages/plotnine/stats/smoothers.py:330: PlotnineWarning: Confidence intervals are not yet implemented for lowess smoothings.\n\n\n\n\n\n\n\n\n\n아래의 그림을 보고 올바르게 해석한 사람을 모두 고르라. (모두 맞출경우만 정답으로 인정)\n\n그림에 대한 배경설명은 강의노트 “아이스크림을 많이 먹으면 걸리는 병”을 참고\n\n\n원영: (아이스크림 판매량, 소아마비 반응수치)의 상관계수값은 양수이다.\n가을: 온도를 통제하였을 경우 (아이스크림 판매량, 소아마비 반응수치)의 상관계수값은, 온도를 통제하지 않았을 경우 (아이스크림 판매량, 소아마비 반응수치)의 상관계수 값보다 작다.\n이서: (온도, 소아마비 반응수치)의 상관계수 값은 양수이다.\n레이: (온도, 아이스크림 판매량)의 상관계수 값은 양수이다.\n유진: 온도가 유일한 은닉변수라면, 아이스크림 판매량과 소아마비 반응수치 사이에는 인과성이 없다고 볼 수 있다.\n\n\n\n\n\n\n\n답\n\n\n\n모두 정답~"
  },
  {
    "objectID": "posts/10wk-supp-mid-sol.html#산점도의-해석들-5점",
    "href": "posts/10wk-supp-mid-sol.html#산점도의-해석들-5점",
    "title": "supp-4: 중간고사 풀이",
    "section": "(5) 산점도의 해석들 – 5점",
    "text": "(5) 산점도의 해석들 – 5점\n아래는 문제 4에 제시된 산점도와 그 해석들이다. 옳은 해석을 모두 골라라.\n4-(1)\n\n\n\n4-(1)의 그림\n\n\n해석1: 모든 포지션에 대하여, (Age,logValue)는 음의 상관계수값을 가지며 (Age,logWage)는 양의 상관계수값을 가진다.\n4-(2)\n\n\n\n4-(2)의 그림\n\n\n해석2: [GKDiving,…,GKReflexes]는 모두 logWage와 양의 상관계수값을 가진다.\n4-(3)\n\n\n\n4-(3)의 그림\n\n\n해석3: GOALKEEPER 포지션의 경우 GKAbility를 이용하여 Overall을 추정하는 것이 합리적이지만 FORWARD 포지션의 경우 GKAbility를 이용하여 Overall을 추정하는 것은 합리적이지 않다.\n4-(4)\n\n\n\n4-(4)의 그림\n\n\n해석4: 수비수 포지션의 경우 FinishingSkills 과 logValue 사이의 상관계수 값은 거의 0에 가깝다.\n\n답: 해석1, 해석2, 해석3\n\n\n\n\n\n\n\n답\n\n\n\n해석1,해석2,해석3이 옳다.\n해석4가 틀린이유: 상관계수가 0근처라면 FinishingSkill의 붉은 추세선이 x축과 거의 평행해야 한다."
  },
  {
    "objectID": "posts/06wk-2.html#a.-geom_col",
    "href": "posts/06wk-2.html#a.-geom_col",
    "title": "06wk-2: 막대그래프, 심슨의 역설 (1)",
    "section": "A. geom_col()",
    "text": "A. geom_col()\n- 예시1: 기본적인 막대그래프\n\ndf = pd.DataFrame({'x':[0,1],'y':[40,60]})\ndf\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\n0\n40\n\n\n1\n1\n60\n\n\n\n\n\n\n\n\nfig = ggplot(df)\ncol = geom_col(aes(x='x',y='y'))\nfig + col\n\n\n\n\n\n\n\n\n- 예시2: \\(x\\)축이 범주인 경우\n\ndf = pd.DataFrame({'sex':['male','female'],'score':[40,60]})\ndf\n\n\n\n\n\n\n\n\nsex\nscore\n\n\n\n\n0\nmale\n40\n\n\n1\nfemale\n60\n\n\n\n\n\n\n\n\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score'))\nfig + col\n\n\n\n\n\n\n\n\n- 예시3: 예시2에서 색깔로 구분하고 싶은 경우\n\ndf = pd.DataFrame({'sex':['male','female'],'score':[40,60]})\ndf\n\n\n\n\n\n\n\n\nsex\nscore\n\n\n\n\n0\nmale\n40\n\n\n1\nfemale\n60\n\n\n\n\n\n\n\n\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score',fill='sex'))\nfig + col\n\n\n\n\n\n\n\n\n- 예시4: 예시3에서 scale_fill_manual()을 이용하여 색상변경 하기\n\ndf = pd.DataFrame({'sex':['male','female'],'score':[40,60]})\ndf\n\n\n\n\n\n\n\n\nsex\nscore\n\n\n\n\n0\nmale\n40\n\n\n1\nfemale\n60\n\n\n\n\n\n\n\n\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score',fill='sex'))\nfig + col + scale_fill_manual(['red','blue'])"
  },
  {
    "objectID": "posts/06wk-2.html#b.-facet_wrap",
    "href": "posts/06wk-2.html#b.-facet_wrap",
    "title": "06wk-2: 막대그래프, 심슨의 역설 (1)",
    "section": "B. facet_wrap()",
    "text": "B. facet_wrap()\n- 예시1: facet_wrap()을 이용한 면분할 – 반별로 면분할\n\ndf = pd.DataFrame({'sex':['male','female','male','female'],'score':[40,60,50,20],'class':['A','A','B','B']})\ndf\n\n\n\n\n\n\n\n\nsex\nscore\nclass\n\n\n\n\n0\nmale\n40\nA\n\n\n1\nfemale\n60\nA\n\n\n2\nmale\n50\nB\n\n\n3\nfemale\n20\nB\n\n\n\n\n\n\n\n\nfig = ggplot(df)\ncol = geom_col(aes(x='sex',y='score',fill='sex')) \nfig + col + facet_wrap('class')\n\n\n\n\n\n\n\n\n- 예시2: facet_wrap()을 이용한 면분할 – 성별로 면분할\n\ndf = pd.DataFrame({'sex':['male','female','male','female'],'score':[40,60,50,20],'class':['A','A','B','B']})\ndf\n\n\n\n\n\n\n\n\nsex\nscore\nclass\n\n\n\n\n0\nmale\n40\nA\n\n\n1\nfemale\n60\nA\n\n\n2\nmale\n50\nB\n\n\n3\nfemale\n20\nB\n\n\n\n\n\n\n\n\nfig = ggplot(df)\ncol = geom_col(aes(x='class',y='score',fill='sex')) \nfig + col + facet_wrap('sex')"
  },
  {
    "objectID": "posts/06wk-2.html#a.-시각화1-전체합격률-시각화-pandas-초보",
    "href": "posts/06wk-2.html#a.-시각화1-전체합격률-시각화-pandas-초보",
    "title": "06wk-2: 막대그래프, 심슨의 역설 (1)",
    "section": "A. 시각화1: 전체합격률 시각화 – pandas 초보",
    "text": "A. 시각화1: 전체합격률 시각화 – pandas 초보\n- 여성지원자의 합격률\n\ndf.query('gender == \"female\" and result ==\"pass\"')['count'].sum() / df.query('gender == \"female\"')['count'].sum()\n\n0.420708446866485\n\n\n- 남성지원자의 합격률\n\ndf.query('gender == \"male\" and result ==\"pass\"')['count'].sum() / df.query('gender == \"male\"')['count'].sum()\n\n0.5202526941657376\n\n\n- 시각화\n\ntidydata = pd.DataFrame({'male':[0.5202526941657376],'female':[0.420708446866485]})\ntidydata\n\n\n\n\n\n\n\n\nmale\nfemale\n\n\n\n\n0\n0.520253\n0.420708\n\n\n\n\n\n\n\n\n이렇게 데이터 프레임을 만들면 망해요\n\n\ntidydata = pd.DataFrame({'sex':['male','female'],'rate':[0.5202526941657376,0.420708446866485]})\ntidydata\n\n\n\n\n\n\n\n\nsex\nrate\n\n\n\n\n0\nmale\n0.520253\n\n\n1\nfemale\n0.420708\n\n\n\n\n\n\n\n\nfig = ggplot(tidydata)\ncol = geom_col(aes(x='sex',y='rate',fill='sex'))\nfig + col"
  },
  {
    "objectID": "posts/06wk-2.html#b.-시각화1-전체합격률-시각화-pandas-고수",
    "href": "posts/06wk-2.html#b.-시각화1-전체합격률-시각화-pandas-고수",
    "title": "06wk-2: 막대그래프, 심슨의 역설 (1)",
    "section": "B. 시각화1: 전체합격률 시각화 – pandas 고수",
    "text": "B. 시각화1: 전체합격률 시각화 – pandas 고수\n\ndf.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\n\n/tmp/ipykernel_3693597/1414298521.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\nresult\nfail\npass\n\n\ngender\n\n\n\n\n\n\nfemale\n1063\n772\n\n\nmale\n1291\n1400\n\n\n\n\n\n\n\n\ndf.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass'] / (_df['fail'] + _df['pass']))\\\n.reset_index()\n\n/tmp/ipykernel_3693597/3036569198.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\nresult\ngender\nfail\npass\nrate\n\n\n\n\n0\nfemale\n1063\n772\n0.420708\n\n\n1\nmale\n1291\n1400\n0.520253\n\n\n\n\n\n\n\n\ntidydata = df.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass'] / (_df['fail'] + _df['pass']))\\\n.reset_index()\n\nfig = ggplot(tidydata) \ncol = geom_col(aes(x='gender',y='rate',fill='gender'))\nfig + col \n\n/tmp/ipykernel_3693597/1840989269.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead."
  },
  {
    "objectID": "posts/01wk-2.html#a.-기본플랏",
    "href": "posts/01wk-2.html#a.-기본플랏",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "A. 기본플랏",
    "text": "A. 기본플랏\n\nplt.plot([1,2,3,2])"
  },
  {
    "objectID": "posts/01wk-2.html#b.-모양변경",
    "href": "posts/01wk-2.html#b.-모양변경",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "B. 모양변경",
    "text": "B. 모양변경\n\nplt.plot([1,2,3,2],'--')"
  },
  {
    "objectID": "posts/01wk-2.html#c.-색상변경",
    "href": "posts/01wk-2.html#c.-색상변경",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "C. 색상변경",
    "text": "C. 색상변경\n- 예시1\n\nplt.plot([1,2,3,2],'r')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,3,2],'b')"
  },
  {
    "objectID": "posts/01wk-2.html#d.-모양-색상변경",
    "href": "posts/01wk-2.html#d.-모양-색상변경",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "D. 모양 + 색상변경",
    "text": "D. 모양 + 색상변경\n- 예시1\n\nplt.plot([1,2,3,2],'--r')\n\n\n\n\n\n\n\n\n- 예시2: 순서변경 가능\n\nplt.plot([1,2,3,2],'r--')"
  },
  {
    "objectID": "posts/01wk-2.html#e.-원리",
    "href": "posts/01wk-2.html#e.-원리",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "E. 원리?",
    "text": "E. 원리?\n- r--등의 옵션은 Markers + Line Styles + Colors 의 조합으로 표현가능\nref: https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html\n\n--r: 점선(dashed)스타일 + 빨간색\nr--: 빨간색 + 점선(dashed)스타일\n:k: 점선(dotted)스타일 + 검은색\nk:: 검은색 + 점선(dotted)스타일\n\n- 우선 Marker를 무시하면 Line Styles + Color로 표현가능한 조합은 \\(4\\times 8=32\\) 개\n\nLine StylesColorsMarkers\n\n\n\n\n\ncharacter\ndescription\n\n\n\n\n‘-’\nsolid line style\n\n\n‘–’\ndashed line style\n\n\n‘-.’\ndash-dot line style\n\n\n‘:’\ndotted line style\n\n\n\n\n\n\n\n\ncharacter\ncolor\n\n\n\n\n‘b’\nblue\n\n\n‘g’\ngreen\n\n\n‘r’\nred\n\n\n‘c’\ncyan\n\n\n‘m’\nmagenta\n\n\n‘y’\nyellow\n\n\n‘k’\nblack\n\n\n‘w’\nwhite\n\n\n\n\n\n\n\n\ncharacter\ndescription\n\n\n\n\n‘.’\npoint marker\n\n\n‘,’\npixel marker\n\n\n‘o’\ncircle marker\n\n\n‘v’\ntriangle_down marker\n\n\n‘^’\ntriangle_up marker\n\n\n‘&lt;’\ntriangle_left marker\n\n\n‘&gt;’\ntriangle_right marker\n\n\n‘1’\ntri_down marker\n\n\n‘2’\ntri_up marker\n\n\n‘3’\ntri_left marker\n\n\n‘4’\ntri_right marker\n\n\n‘8’\noctagon marker\n\n\n‘s’\nsquare marker\n\n\n‘p’\npentagon marker\n\n\n‘P’\nplus (filled) marker\n\n\n’*’\nstar marker\n\n\n‘h’\nhexagon1 marker\n\n\n‘H’\nhexagon2 marker\n\n\n‘+’\nplus marker\n\n\n‘x’\nx marker\n\n\n‘X’\nx (filled) marker\n\n\n‘D’\ndiamond marker\n\n\n‘d’\nthin_diamond marker\n\n\n‘|’\nvline marker\n\n\n’_’\nhline marker\n\n\n\n\n\n\n- 예시1\n\nplt.plot([1,2,4,3],'b-.')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],'k:')\n\n\n\n\n\n\n\n\n- 예시3: line style + color 조합으로 사용하든 color + line style 조합으로 사용하든 상관없음\n\nplt.plot([1,2,4,3],'-.b')\n\n\n\n\n\n\n\n\n\nplt.plot([1,2,4,3],':k')\n\n\n\n\n\n\n\n\n- 예시4: line style을 중복으로 사용하거나 color를 중복으로 쓸 수 는 없다.\n\nplt.plot([1,2,4,3],'br')\n\nValueError: 'br' is not a valid format string (two color symbols)\n\n\n\n\n\n\n\n\n\n- 예시5: 색이 사실 8개만 있는건 아니다.\nref: https://matplotlib.org/2.0.2/examples/color/named_colors.html\n\nplt.plot([1,2,4,3],color='lime')\n\n\n\n\n\n\n\n\n- 예시6: 색을 바꾸려면 hex코드를 넣는 방법이 젤 깔끔함\nref: https://htmlcolorcodes.com/\n\nplt.plot([1,2,4,3],color='#7E277E')\n\n\n\n\n\n\n\n\n- 예시7: 당연히 라인스타일도 4개만 있진 않음\nref: https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html\n\nplt.plot([1,2,4,3],linestyle=(0, (10, 1)))"
  },
  {
    "objectID": "posts/01wk-2.html#a.-원리",
    "href": "posts/01wk-2.html#a.-원리",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "A. 원리",
    "text": "A. 원리\n- 그냥 마커를 설정하면 끝!\n\nplt.plot(x,y,'o')"
  },
  {
    "objectID": "posts/01wk-2.html#b.-기본플랏",
    "href": "posts/01wk-2.html#b.-기본플랏",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "B. 기본플랏",
    "text": "B. 기본플랏\n- 예시1\n\nplt.plot([1,2,4,3],'x')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot([1,2,4,3],'D')"
  },
  {
    "objectID": "posts/01wk-2.html#c.-색깔변경",
    "href": "posts/01wk-2.html#c.-색깔변경",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "C. 색깔변경",
    "text": "C. 색깔변경\n- 예시1\n\nplt.plot(x,y,'or')\n\n\n\n\n\n\n\n\n- 예시2\n\nplt.plot(x,y,'db')\n\n\n\n\n\n\n\n\n- 예시3\n\nplt.plot(x,y,'bx')"
  },
  {
    "objectID": "posts/01wk-2.html#d.-dot-connected-plot",
    "href": "posts/01wk-2.html#d.-dot-connected-plot",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "D. dot-connected plot",
    "text": "D. dot-connected plot\n- 예시1: 마커와 라인스타일을 동시에 사용하면 dot-connected plot이 된다.\n\nplt.plot([1,2,4,3],'--o')\n\n\n\n\n\n\n\n\n- 예시2: 당연히 색도 적용가능함\n\nplt.plot([1,2,4,3],'--or')\n\n\n\n\n\n\n\n\n- 예시3: 서로 순서를 바꿔도 상관없다.\n\nplt.plot([1,2,4,3],'r--o')\n\n\n\n\n\n\n\n\n- 예시4: 색만 따로 바꾸고싶다면?\n\nplt.plot([1,2,4,3],'--o',color='lime')"
  },
  {
    "objectID": "posts/01wk-2.html#a.-예비학습",
    "href": "posts/01wk-2.html#a.-예비학습",
    "title": "01wk-2: 라인플랏, 산점도, 객체지향적 시각화 (1)",
    "section": "A. 예비학습",
    "text": "A. 예비학습\n# 예비학습1 – 그림을 저장했다가 꺼내보고 싶다.\n- 그림을 그리고 저장하자.\n\nplt.plot([1,2,4,3])\nfig = plt.gcf()\n\n\n\n\n\n\n\n\n- 다른그림을 그려보자.\n\nplt.plot([1,2,4,3],'--o')\n\n\n\n\n\n\n\n\n- 저장한 그림은 언제든지 꺼내볼 수 있음\n\nfig\n\n\n\n\n\n\n\n\n#\n# 예비학습2 – fig 는 뭐야?\n\n#fig??\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n\nFigure라는 클래스에서 찍힌 인스턴스\n\n- 여러가지 값, 기능이 저장되어 있겠음.\n\nfig.axes\n\n[&lt;Axes: &gt;]\n\n\n\nax = fig.axes[0]\n\n\nyaxis= ax.yaxis\nxaxis= ax.xaxis\n\n\nlines = ax.get_lines()\nline = lines[0]\n\n- 계층구조: Figure \\(\\supset\\) [Axes,…] \\(\\supset\\) YAxis, XAxis, [Line2D,…]\n\ntype(fig)\n\nmatplotlib.figure.Figure\n\n\n1. .axes 로 Axes 를 끄집어냄\n\nax = fig.axes[0]\ntype(ax)\n\nmatplotlib.axes._axes.Axes\n\n\n2. .xaxis, .yaxis 로 Axis 를 끄집어냄\n\nyaxis = ax.yaxis\nxaxis = ax.xaxis\ntype(yaxis), type(xaxis)\n\n(matplotlib.axis.YAxis, matplotlib.axis.XAxis)\n\n\n3. .get_lines()로 Line2D를 끄집어냄\n\nlines = ax.get_lines()\nline=lines[0]\ntype(line)\n\nmatplotlib.lines.Line2D\n\n\n- 오브젝트내용 확인 (그닥 필요 없음)\n\nline.properties()['data']\n\n(array([0., 1., 2., 3.]), array([1, 2, 4, 3]))\n\n\n- matplotlib의 설명\nref: https://matplotlib.org/stable/gallery/showcase/anatomy.html#sphx-glr-gallery-showcase-anatomy-py"
  },
  {
    "objectID": "posts/08wk-2.html#a.-dataframegroupby",
    "href": "posts/08wk-2.html#a.-dataframegroupby",
    "title": "08wk-2: Pandas – groupby, 데이터프레임의 결합",
    "section": "A. DataFrameGroupBy",
    "text": "A. DataFrameGroupBy\n- groupby + agg 의 복습\n\ndf = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\ndf\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1\n\n\n\n\n\n\n\n\ndf.groupby('department').agg({'count':'sum'})\n\n\n\n\n\n\n\n\ncount\n\n\ndepartment\n\n\n\n\n\nA\n3\n\n\nB\n4\n\n\n\n\n\n\n\n- 의문: 위의 코드에서 df.groupby('department')는 어떤 object일까?\n\ng = df.groupby('department')\ng\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f3d9461c9d0&gt;\n\n\n\nset(dir(g)) & {'__iter__'} # g는 반복문을 돌리기 유리하게 설계되어 있음\n\n{'__iter__'}\n\n\n\nlist(g) # for문의 반복인자는 ('A',sub-dataframe)와 같은 형식의 tuple임\n\n[('A',\n    department  gender  count\n  0          A    male      1\n  1          A  female      2),\n ('B',\n    department  gender  count\n  2          B    male      3\n  3          B  female      1)]\n\n\n오브젝트 g는\n\nsub-dataframe 이 모여있는 묶음체이다.\n반복문을 돌리기에 용이하도록 고안되어있다. (이때 각 반복인자는 (묵음기준,sub-dataframe)의 튜플로 이루어져 있음)\n\n- 제가 이해하는 방식\n\ndct = {k:df for k,df in g}\ndct \n\n{'A':   department  gender  count\n 0          A    male      1\n 1          A  female      2,\n 'B':   department  gender  count\n 2          B    male      3\n 3          B  female      1}\n\n\n\ndisplay(dct['A'])\ndisplay(dct['B'])\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1"
  },
  {
    "objectID": "posts/08wk-2.html#b.-g를-이용하는-방법",
    "href": "posts/08wk-2.html#b.-g를-이용하는-방법",
    "title": "08wk-2: Pandas – groupby, 데이터프레임의 결합",
    "section": "B. g를 이용하는 방법",
    "text": "B. g를 이용하는 방법\n# 예시1: g를 이용하여 원래의 df를 복원하라.\n\ndf = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\ng = df.groupby('department')\n\n(풀이)\n\npd.concat([df for _,df in g])\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1\n\n\n\n\n\n\n\n#\n# 예시2: g를 이용하여 아래와 동일한 기능을 하는 코드를 작성하라. (agg 함수 사용금지)\n\ndf = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\ndf.groupby('department').agg({'count':'sum'})\n\n\n\n\n\n\n\n\ncount\n\n\ndepartment\n\n\n\n\n\nA\n3\n\n\nB\n4\n\n\n\n\n\n\n\n(풀이)\n\ng = df.groupby('department')\ng\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f3d9461fdc0&gt;\n\n\n\npd.DataFrame(pd.Series({k:df['count'].sum() for k,df in g}))\n\n\n\n\n\n\n\n\n0\n\n\n\n\nA\n3\n\n\nB\n4\n\n\n\n\n\n\n\n#\n# 예시3: 아래는 데이터프레임이 있다고 치자. 이 데이터프레임을 class 를 기준으로 그룹핑하여 sub-dataframe을 만들고 score가 높은 순서로 정렬하는 코드를 작성하라.\n\ndf = pd.DataFrame({'class':['A']*5+['B']*5, 'id':[0,1,2,3,4]*2, 'score':[60,20,40,60,90,20,30,90,95,95]})\ndf\n\n\n\n\n\n\n\n\nclass\nid\nscore\n\n\n\n\n0\nA\n0\n60\n\n\n1\nA\n1\n20\n\n\n2\nA\n2\n40\n\n\n3\nA\n3\n60\n\n\n4\nA\n4\n90\n\n\n5\nB\n0\n20\n\n\n6\nB\n1\n30\n\n\n7\nB\n2\n90\n\n\n8\nB\n3\n95\n\n\n9\nB\n4\n95\n\n\n\n\n\n\n\n(풀이)\n\npd.concat([df.sort_values('score',ascending=False) for k,df in df.groupby('class')])\n\n\n\n\n\n\n\n\nclass\nid\nscore\n\n\n\n\n4\nA\n4\n90\n\n\n0\nA\n0\n60\n\n\n3\nA\n3\n60\n\n\n2\nA\n2\n40\n\n\n1\nA\n1\n20\n\n\n8\nB\n3\n95\n\n\n9\nB\n4\n95\n\n\n7\nB\n2\n90\n\n\n6\nB\n1\n30\n\n\n5\nB\n0\n20\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/08wk-2.html#a.-가장-빈번하게-사용하는-상황",
    "href": "posts/08wk-2.html#a.-가장-빈번하게-사용하는-상황",
    "title": "08wk-2: Pandas – groupby, 데이터프레임의 결합",
    "section": "A. 가장 빈번하게 사용하는 상황",
    "text": "A. 가장 빈번하게 사용하는 상황\n# 예시1 – big dataframe에 groupby+agg를 사용하여 small dataframe이 생긴경우\n\nbig = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\nsmall = pd.DataFrame({'department':['A','B'], 'count_sum':[3,4]})\n\n\ndisplay(\"big\",big)\ndisplay(\"small\",small)\n\n'big'\n\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1\n\n\n\n\n\n\n\n'small'\n\n\n\n\n\n\n\n\n\ndepartment\ncount_sum\n\n\n\n\n0\nA\n3\n\n\n1\nB\n4\n\n\n\n\n\n\n\n- 정보를 종합하기 위해서는 아래와 같이 하면 된다.\n\npd.merge(big,small)\nbig.merge(small)\n#---#\npd.merge(small,big)\nsmall.merge(big)\n\n\n\n\n\n\n\n\ndepartment\ncount_sum\ngender\ncount\n\n\n\n\n0\nA\n3\nmale\n1\n\n\n1\nA\n3\nfemale\n2\n\n\n2\nB\n4\nmale\n3\n\n\n3\nB\n4\nfemale\n1\n\n\n\n\n\n\n\n- merge에 대한 약간의 개념\n\n상황: 두 데이터프레임은 특정한 IndexLabel에 대하여 서로 다른 정보를 각각 정리한 상황\n원리: (1) 연결고리파악: 두 데이터프레임에서 공통인 열(IndexLabel)을 찾는다. (2) 병합: 연결고리를 기준으로 데이터의 정보를 병합한다.\n\n이 예시의 경우\n\nIndexLabel = 연결고리 = 공통의열 = department\n서로다른정보들: 이 예제에서 big은 department에 대한 gender와 count를 정리하고 있음. 그리고 small은 department에 대한 count_sum을 정리하고 있음. 이는 서로 다른 정보임.\n\n배울게 좀 더 남음: 사실 아래는 같은 코드이다.\n\npd.merge(big,small)\npd.merge(big,small, on='department')\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\ncount_sum\n\n\n\n\n0\nA\nmale\n1\n3\n\n\n1\nA\nfemale\n2\n3\n\n\n2\nB\nmale\n3\n4\n\n\n3\nB\nfemale\n1\n4\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/08wk-2.html#b.-여러가지-파라메터",
    "href": "posts/08wk-2.html#b.-여러가지-파라메터",
    "title": "08wk-2: Pandas – groupby, 데이터프레임의 결합",
    "section": "B. 여러가지 파라메터",
    "text": "B. 여러가지 파라메터\n# 예시1 – on\n\nbig = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\nsmall = big.groupby('department').agg({'count':'sum'}).reset_index()\ndisplay(\"big\",big)\ndisplay(\"small\",small)\n\n'big'\n\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1\n\n\n\n\n\n\n\n'small'\n\n\n\n\n\n\n\n\n\ndepartment\ncount\n\n\n\n\n0\nA\n3\n\n\n1\nB\n4\n\n\n\n\n\n\n\n- 잘못된 코드\n\npd.merge(big,small)\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n\n\n\n\n\n- 올바른 코드\n\npd.merge(big,small,on='department')\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount_x\ncount_y\n\n\n\n\n0\nA\nmale\n1\n3\n\n\n1\nA\nfemale\n2\n3\n\n\n2\nB\nmale\n3\n4\n\n\n3\nB\nfemale\n1\n4\n\n\n\n\n\n\n\n* 더(?) 올바른 코드 – 좀 더 제 스타일의 코드\n\npd.merge(big,small.rename({'count':'count_sum'},axis=1))\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\ncount_sum\n\n\n\n\n0\nA\nmale\n1\n3\n\n\n1\nA\nfemale\n2\n3\n\n\n2\nB\nmale\n3\n4\n\n\n3\nB\nfemale\n1\n4\n\n\n\n\n\n\n\n배울게 좀 더 남음: 사실 아래는 같은 코드이다.\n\npd.merge(big,small,on='department')\npd.merge(big,small,left_on='department', right_on='department')\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount_x\ncount_y\n\n\n\n\n0\nA\nmale\n1\n3\n\n\n1\nA\nfemale\n2\n3\n\n\n2\nB\nmale\n3\n4\n\n\n3\nB\nfemale\n1\n4\n\n\n\n\n\n\n\n#\n# 예시2 – left_on, right_on\n\nbig = pd.DataFrame({'department':['A','A','B','B'], 'gender':['male','female','male','female'],'count':[1,2,3,1]})\nsmall = pd.DataFrame({'dept':['A','B'], 'count':[3,4]})\ndisplay(\"big\",big)\ndisplay(\"small\",small)\n\n'big'\n\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nmale\n1\n\n\n1\nA\nfemale\n2\n\n\n2\nB\nmale\n3\n\n\n3\nB\nfemale\n1\n\n\n\n\n\n\n\n'small'\n\n\n\n\n\n\n\n\n\ndept\ncount\n\n\n\n\n0\nA\n3\n\n\n1\nB\n4\n\n\n\n\n\n\n\n\n공통의 열이 오히려 ‘count’ 이고 서로 다른 정보들은 ‘gender’,‘department’,‘dept’ 이다.\n\n- 잘못된 코드\n\npd.merge(big,small)\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\ndept\n\n\n\n\n0\nB\nmale\n3\nA\n\n\n\n\n\n\n\n- 올바른 코드\n\npd.merge(big,small,left_on='department',right_on='dept')\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount_x\ndept\ncount_y\n\n\n\n\n0\nA\nmale\n1\nA\n3\n\n\n1\nA\nfemale\n2\nA\n3\n\n\n2\nB\nmale\n3\nB\n4\n\n\n3\nB\nfemale\n1\nB\n4\n\n\n\n\n\n\n\n* 좀 더 제 스타일의 코드\n\npd.merge(big,small.set_axis(['department','count_sum'],axis=1))\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\ncount_sum\n\n\n\n\n0\nA\nmale\n1\n3\n\n\n1\nA\nfemale\n2\n3\n\n\n2\nB\nmale\n3\n4\n\n\n3\nB\nfemale\n1\n4\n\n\n\n\n\n\n\n#\n# 예제3: how\n\ndf1 = pd.DataFrame({\n    'dept':['통계','수학','과학','IAB'], \n    'count':[20,30,25,50]\n})\ndf2 = pd.DataFrame({\n    'dept':['통계','수학','과학','신설학과'], \n    'desc':['통계학과는...','수학과는...','과학학과는...','이 학과는 내년에 신설될 예정이고...']\n})\ndisplay(\"df1\",df1)\ndisplay(\"df2\",df2)\n\n'df1'\n\n\n\n\n\n\n\n\n\ndept\ncount\n\n\n\n\n0\n통계\n20\n\n\n1\n수학\n30\n\n\n2\n과학\n25\n\n\n3\nIAB\n50\n\n\n\n\n\n\n\n'df2'\n\n\n\n\n\n\n\n\n\ndept\ndesc\n\n\n\n\n0\n통계\n통계학과는...\n\n\n1\n수학\n수학과는...\n\n\n2\n과학\n과학학과는...\n\n\n3\n신설학과\n이 학과는 내년에 신설될 예정이고...\n\n\n\n\n\n\n\n\n공통의열인 dept와 서로다른 정보인 count, desc 들의 이름이 예쁘게 정리되어 있어 on, left_on, right_on 와 같은 파라메터를 사용할 필요가 없다.\n\n\npd.merge(df1,df2) # IAB, 신설학과는 사라짐\n\n\n\n\n\n\n\n\ndept\ncount\ndesc\n\n\n\n\n0\n통계\n20\n통계학과는...\n\n\n1\n수학\n30\n수학과는...\n\n\n2\n과학\n25\n과학학과는...\n\n\n\n\n\n\n\n- 상황: IAB 학과는 df1에만, 신설학과는 df2에만 존재한다. \\(\\to\\) IAB와 신설학과를 처리하는 방식에 따라서 4가지 경우로 나누어진다.\n\n# 경우1: 두 학과 모두 제거 = 두 데이터프레임의 공통만 취함\npd.merge(df1,df2)\npd.merge(df1,df2,how='inner')\n\n\n\n\n\n\n\n\ndept\ncount\ndesc\n\n\n\n\n0\n통계\n20\n통계학과는...\n\n\n1\n수학\n30\n수학과는...\n\n\n2\n과학\n25\n과학학과는...\n\n\n\n\n\n\n\n\n# 경우2: IAB만 살림 = 왼쪽 데이터프레임에 포함된 모든 학과는 살림\npd.merge(df1,df2)\npd.merge(df1,df2,how='left')\n\n\n\n\n\n\n\n\ndept\ncount\ndesc\n\n\n\n\n0\n통계\n20\n통계학과는...\n\n\n1\n수학\n30\n수학과는...\n\n\n2\n과학\n25\n과학학과는...\n\n\n3\nIAB\n50\nNaN\n\n\n\n\n\n\n\n\n# 경우3: 신설학과만 살람 = 오른쪽 데이터프레임에 포함된 모든학과를 살람\npd.merge(df1,df2)\npd.merge(df1,df2,how='right')\n\n\n\n\n\n\n\n\ndept\ncount\ndesc\n\n\n\n\n0\n통계\n20.0\n통계학과는...\n\n\n1\n수학\n30.0\n수학과는...\n\n\n2\n과학\n25.0\n과학학과는...\n\n\n3\n신설학과\nNaN\n이 학과는 내년에 신설될 예정이고...\n\n\n\n\n\n\n\n\n# 경우4: 두 학과 모두 살림\npd.merge(df1,df2)\npd.merge(df1,df2,how='outer')\n\n\n\n\n\n\n\n\ndept\ncount\ndesc\n\n\n\n\n0\n통계\n20.0\n통계학과는...\n\n\n1\n수학\n30.0\n수학과는...\n\n\n2\n과학\n25.0\n과학학과는...\n\n\n3\nIAB\n50.0\nNaN\n\n\n4\n신설학과\nNaN\n이 학과는 내년에 신설될 예정이고..."
  },
  {
    "objectID": "posts/06wk-supp.html#a.-시각화1-전체합격률-시각화-pandas-초보",
    "href": "posts/06wk-supp.html#a.-시각화1-전체합격률-시각화-pandas-초보",
    "title": "supp-2: 심슨의 역설 (2)",
    "section": "A. 시각화1: 전체합격률 시각화 – pandas 초보",
    "text": "A. 시각화1: 전체합격률 시각화 – pandas 초보"
  },
  {
    "objectID": "posts/06wk-supp.html#b.-시각화1-전체합격률-시각화-pandas-고수",
    "href": "posts/06wk-supp.html#b.-시각화1-전체합격률-시각화-pandas-고수",
    "title": "supp-2: 심슨의 역설 (2)",
    "section": "B. 시각화1: 전체합격률 시각화 – pandas 고수",
    "text": "B. 시각화1: 전체합격률 시각화 – pandas 고수\n\ntidydata = df.pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass'] / (_df['fail'] + _df['pass']))\\\n.reset_index()\n\nfig = ggplot(tidydata) \ncol = geom_col(aes(x='gender',y='rate',fill='gender'))\nfig + col \n\n/tmp/ipykernel_1831005/1840989269.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead."
  },
  {
    "objectID": "posts/06wk-supp.html#c.-시각화2-학과별합격률-시각화-pandas-고수",
    "href": "posts/06wk-supp.html#c.-시각화2-학과별합격률-시각화-pandas-고수",
    "title": "supp-2: 심슨의 역설 (2)",
    "section": "C. 시각화2: 학과별합격률 시각화 – pandas 고수",
    "text": "C. 시각화2: 학과별합격률 시각화 – pandas 고수\n\ndf.pivot_table(index=['gender','department'], columns='result',values='count',aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass']/(_df['fail']+_df['pass']))\\\n.reset_index()\n\n/tmp/ipykernel_1831005/1491763288.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\nresult\ngender\ndepartment\nfail\npass\nrate\n\n\n\n\n0\nfemale\nA\n19\n89\n0.824074\n\n\n1\nfemale\nB\n7\n18\n0.720000\n\n\n2\nfemale\nC\n391\n202\n0.340641\n\n\n3\nfemale\nD\n244\n131\n0.349333\n\n\n4\nfemale\nE\n299\n94\n0.239186\n\n\n5\nfemale\nF\n103\n238\n0.697947\n\n\n6\nmale\nA\n314\n511\n0.619394\n\n\n7\nmale\nB\n208\n352\n0.628571\n\n\n8\nmale\nC\n204\n121\n0.372308\n\n\n9\nmale\nD\n279\n138\n0.330935\n\n\n10\nmale\nE\n137\n54\n0.282723\n\n\n11\nmale\nF\n149\n224\n0.600536\n\n\n\n\n\n\n\n\ntidydata = df.pivot_table(index=['gender','department'], columns='result',values='count',aggfunc=sum)\\\n.assign(rate = lambda _df: _df['pass']/(_df['fail']+_df['pass']))\\\n.reset_index()\n\nfig = ggplot(tidydata) \nfacet = facet_wrap('department')\ncol = geom_col(aes(x='gender',y='rate',fill='gender'))\nfig + facet + col \n\n/tmp/ipykernel_1831005/2462720722.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead."
  },
  {
    "objectID": "posts/06wk-supp.html#d.-해석",
    "href": "posts/06wk-supp.html#d.-해석",
    "title": "supp-2: 심슨의 역설 (2)",
    "section": "D. 해석",
    "text": "D. 해석\n- 시각화1: 남자의 합격률이 더 높다. \\(\\to\\) 성차별이 있어보인다(?)\n- 시각화2: 학과별로 살펴보니 오히려 A,B,F,D의 경우 여성의 합격률이 높다.\n- 교재에서 설명한 이유: 여성이 합격률이 낮은 학과에만 많이 지원하였기 때문\n\ndf.pivot_table(index='department', columns='gender', values='count',aggfunc='sum')\\\n.stack().reset_index().rename({0:'count'},axis=1)\n\n\n\n\n\n\n\n\ndepartment\ngender\ncount\n\n\n\n\n0\nA\nfemale\n108\n\n\n1\nA\nmale\n825\n\n\n2\nB\nfemale\n25\n\n\n3\nB\nmale\n560\n\n\n4\nC\nfemale\n593\n\n\n5\nC\nmale\n325\n\n\n6\nD\nfemale\n375\n\n\n7\nD\nmale\n417\n\n\n8\nE\nfemale\n393\n\n\n9\nE\nmale\n191\n\n\n10\nF\nfemale\n341\n\n\n11\nF\nmale\n373\n\n\n\n\n\n\n\n\ntidydata = df.pivot_table(index='department', columns='gender', values='count',aggfunc='sum')\\\n.stack().reset_index().rename({0:'count'},axis=1)\n\n \nfig = ggplot(tidydata) \ncol = geom_col(aes(x='department',y='count',fill='gender'),position='dodge')\nfig+col"
  },
  {
    "objectID": "posts/04wk-1.html#a.-열의-이름-변경",
    "href": "posts/04wk-1.html#a.-열의-이름-변경",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "A. 열의 이름 변경",
    "text": "A. 열의 이름 변경\n- 방법1: df.columns에 대입\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.columns = ['A','B']\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1.015321\n-1.491732\n\n\n1\n-1.466425\n-0.289752\n\n\n2\n-0.294463\n0.641726\n\n\n\n\n\n\n\n- 방법2: df.set_axis()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.set_axis(['A','B'],axis=1)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n-0.575323\n-1.315989\n\n\n1\n0.077248\n1.518059\n\n\n2\n0.018996\n-0.818822\n\n\n\n\n\n\n\n- 방법3: df.rename()\n\ndf = pd.DataFrame(np.random.randn(3,2))\n#df.rename(columns={0:'AA',1:'BB'})\ndf.rename({0:'AA',1:'BB'},axis=1)\n\n\n\n\n\n\n\n\nAA\nBB\n\n\n\n\n0\n-0.824893\n0.530828\n\n\n1\n-0.964862\n0.081930\n\n\n2\n-0.384178\n-0.283328"
  },
  {
    "objectID": "posts/04wk-1.html#b.-행의-이름-변경",
    "href": "posts/04wk-1.html#b.-행의-이름-변경",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "B. 행의 이름 변경",
    "text": "B. 행의 이름 변경\n- 방법1: df.index에 대입\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n-1.140659\n0.197573\n\n\n1\n-1.006808\n0.495207\n\n\n2\n-0.546562\n-0.263687\n\n\n\n\n\n\n\n\ndf.index = ['guebin','jiyoon','boram']\ndf\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\nguebin\n-1.140659\n0.197573\n\n\njiyoon\n-1.006808\n0.495207\n\n\nboram\n-0.546562\n-0.263687\n\n\n\n\n\n\n\n- 방법2: df.set_axis()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.set_axis([11,22,33],axis=0)\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n11\n0.003062\n0.005044\n\n\n22\n0.915182\n0.303740\n\n\n33\n1.665422\n-0.164989\n\n\n\n\n\n\n\n- 방법3: df.rename()\n\ndf = pd.DataFrame(np.random.randn(3,2))\ndf.rename({1:'guebin'},axis=0)\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n0.937158\n0.504850\n\n\nguebin\n-0.891393\n0.592022\n\n\n2\n1.386969\n0.773002\n\n\n\n\n\n\n\n- 방법4: 임의의 열을 행이름 으로 지정!\n\ndf = pd.DataFrame({'id':['2021-43052','2021-43052'], 'hour':[3,2], 'height':[176,172]})\ndf.set_index('id')\n\n\n\n\n\n\n\n\nhour\nheight\n\n\nid\n\n\n\n\n\n\n2021-43052\n3\n176\n\n\n2021-43052\n2\n172"
  },
  {
    "objectID": "posts/04wk-1.html#ab에-대한-연습문제",
    "href": "posts/04wk-1.html#ab에-대한-연습문제",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "# A~B에 대한 연습문제",
    "text": "# A~B에 대한 연습문제\n- 데이터 load\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n# 예제1: 열의 이름 출력하고, 열의 이름중 공백()이 있을 경우 언더바(_) 로 바꾸자.\n컬럼출력\n\ndf.columns\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'Club Logo', 'Value', 'Wage', 'Special',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position',\n       'Joined', 'Loaned From', 'Contract Valid Until', 'Height', 'Weight',\n       'Release Clause', 'Kit Number', 'Best Overall Rating'],\n      dtype='object')\n\n\n\ndf.columns에 직접대입\n\n\nnew_colnames = [l.replace(' ','_') for l in df.columns]\n\n\n# df.columns = new_colnames\n# df\n\n\nset_axis() 이용\n\n\ndf.set_axis(new_colnames,axis=1)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub_Logo\n...\nReal_Face\nPosition\nJoined\nLoaned_From\nContract_Valid_Until\nHeight\nWeight\nRelease_Clause\nKit_Number\nBest_Overall_Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\nrename() 이용 – 안중요함\n\n\ndct = {l:l.replace(' ','_') for l in df.columns}\ndf.rename(dct,axis=1)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub_Logo\n...\nReal_Face\nPosition\nJoined\nLoaned_From\nContract_Valid_Until\nHeight\nWeight\nRelease_Clause\nKit_Number\nBest_Overall_Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n#\n예제2: ID를 row-index로 지정하라.\n\n직접지정\n\n\n# df.index = df.ID\n# df\n\n\nset_axis()\n\n\ndf.set_axis(df.ID,axis=0)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\nID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n209658\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n212198\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n224334\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n192985\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n224232\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n269526\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n267946\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n270567\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n256624\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n256376\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\nrename() – 안중요함\n\n\ndct = {idx:ID for idx, ID in zip(df.index,df.ID)}\n\n\ndf.rename(dct,axis=0)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n209658\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n212198\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n224334\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n192985\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n224232\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n269526\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n267946\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n270567\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n256624\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n256376\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\nset_index()\n\n\ndf.set_index('ID')\n\n\n\n\n\n\n\n\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\nValue\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\nID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n€91M\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n€78.5M\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n€46.5M\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n€107.5M\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n€89.5M\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n€100K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n€100K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n€70K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n€90K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n€90K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 28 columns\n\n\n\n#"
  },
  {
    "objectID": "posts/04wk-1.html#c.-df.t",
    "href": "posts/04wk-1.html#c.-df.t",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "C. df.T",
    "text": "C. df.T\n- 데이터 load\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n- df.T를 이용하여 데이터를 살피면 편리함\n\ndf.T.iloc[:,0:2]\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\nID\n209658\n212198\n\n\nName\nL. Goretzka\nBruno Fernandes\n\n\nAge\n27\n27\n\n\nPhoto\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nhttps://cdn.sofifa.net/players/212/198/23_60.png\n\n\nNationality\nGermany\nPortugal\n\n\nFlag\nhttps://cdn.sofifa.net/flags/de.png\nhttps://cdn.sofifa.net/flags/pt.png\n\n\nOverall\n87\n86\n\n\nPotential\n88\n87\n\n\nClub\nFC Bayern München\nManchester United\n\n\nClub Logo\nhttps://cdn.sofifa.net/teams/21/30.png\nhttps://cdn.sofifa.net/teams/11/30.png\n\n\nValue\n€91M\n€78.5M\n\n\nWage\n€115K\n€190K\n\n\nSpecial\n2312\n2305\n\n\nPreferred Foot\nRight\nRight\n\n\nInternational Reputation\n4.0\n3.0\n\n\nWeak Foot\n4.0\n3.0\n\n\nSkill Moves\n3.0\n4.0\n\n\nWork Rate\nHigh/ Medium\nHigh/ High\n\n\nBody Type\nUnique\nUnique\n\n\nReal Face\nYes\nYes\n\n\nPosition\n&lt;span class=\"pos pos28\"&gt;SUB\n&lt;span class=\"pos pos15\"&gt;LCM\n\n\nJoined\nJul 1, 2018\nJan 30, 2020\n\n\nLoaned From\nNaN\nNaN\n\n\nContract Valid Until\n2026\n2026\n\n\nHeight\n189cm\n179cm\n\n\nWeight\n82kg\n69kg\n\n\nRelease Clause\n€157M\n€155M\n\n\nKit Number\n8.0\n8.0\n\n\nBest Overall Rating\nNaN\nNaN\n\n\n\n\n\n\n\n- 출력옵션 조정\n\npd.options.display.max_rows = 12\ndisplay(df.T.iloc[:,:3])\npd.reset_option(\"display.max_rows\")\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\nID\n209658\n212198\n224334\n\n\nName\nL. Goretzka\nBruno Fernandes\nM. Acuña\n\n\nAge\n27\n27\n30\n\n\nPhoto\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nhttps://cdn.sofifa.net/players/224/334/23_60.png\n\n\nNationality\nGermany\nPortugal\nArgentina\n\n\n...\n...\n...\n...\n\n\nHeight\n189cm\n179cm\n172cm\n\n\nWeight\n82kg\n69kg\n69kg\n\n\nRelease Clause\n€157M\n€155M\n€97.7M\n\n\nKit Number\n8.0\n8.0\n19.0\n\n\nBest Overall Rating\nNaN\nNaN\nNaN\n\n\n\n\n29 rows × 3 columns\n\n\n\n\n이 예제에서는 줄이는 옵션을 사용했지만 보통은 늘려서 사용함"
  },
  {
    "objectID": "posts/04wk-1.html#d.-df.dtypes-s.dtype",
    "href": "posts/04wk-1.html#d.-df.dtypes-s.dtype",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "D. df.dtypes, s.dtype",
    "text": "D. df.dtypes, s.dtype\n- df.dtypes\n\ndf.dtypes\n\nID                            int64\nName                         object\nAge                           int64\nPhoto                        object\nNationality                  object\nFlag                         object\nOverall                       int64\nPotential                     int64\nClub                         object\nClub Logo                    object\nValue                        object\nWage                         object\nSpecial                       int64\nPreferred Foot               object\nInternational Reputation    float64\nWeak Foot                   float64\nSkill Moves                 float64\nWork Rate                    object\nBody Type                    object\nReal Face                    object\nPosition                     object\nJoined                       object\nLoaned From                  object\nContract Valid Until         object\nHeight                       object\nWeight                       object\nRelease Clause               object\nKit Number                  float64\nBest Overall Rating          object\ndtype: object\n\n\n- s.dtype\n\ndf.Name.dtype\n\ndtype('O')\n\n\n- ==를 이용한 자료형 체크\n\ndf.Name.dtype == np.object_\n\nTrue\n\n\n\ndf.Age.dtype == np.int64\n\nTrue\n\n\n# 예제: df에서 int64 자료형만 출력\n- (풀이1)\n\npd.Series(list(df.dtypes))\n\n0       int64\n1      object\n2       int64\n3      object\n4      object\n5      object\n6       int64\n7       int64\n8      object\n9      object\n10     object\n11     object\n12      int64\n13     object\n14    float64\n15    float64\n16    float64\n17     object\n18     object\n19     object\n20     object\n21     object\n22     object\n23     object\n24     object\n25     object\n26     object\n27    float64\n28     object\ndtype: object\n\n\n\ndf.iloc[:,[0,2,6,7,12]]\n\n\n\n\n\n\n\n\nID\nAge\nOverall\nPotential\nSpecial\n\n\n\n\n0\n209658\n27\n87\n88\n2312\n\n\n1\n212198\n27\n86\n87\n2305\n\n\n2\n224334\n30\n85\n85\n2303\n\n\n3\n192985\n31\n91\n91\n2303\n\n\n4\n224232\n25\n86\n89\n2296\n\n\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\n19\n48\n61\n762\n\n\n17656\n267946\n17\n48\n64\n761\n\n\n17657\n270567\n25\n51\n56\n759\n\n\n17658\n256624\n18\n50\n65\n758\n\n\n17659\n256376\n20\n50\n61\n749\n\n\n\n\n17660 rows × 5 columns\n\n\n\n- (풀이2)\n\ndf.loc[:,[o == np.int64 for o in df.dtypes]]\n\n\n\n\n\n\n\n\nID\nAge\nOverall\nPotential\nSpecial\n\n\n\n\n0\n209658\n27\n87\n88\n2312\n\n\n1\n212198\n27\n86\n87\n2305\n\n\n2\n224334\n30\n85\n85\n2303\n\n\n3\n192985\n31\n91\n91\n2303\n\n\n4\n224232\n25\n86\n89\n2296\n\n\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\n19\n48\n61\n762\n\n\n17656\n267946\n17\n48\n64\n761\n\n\n17657\n270567\n25\n51\n56\n759\n\n\n17658\n256624\n18\n50\n65\n758\n\n\n17659\n256376\n20\n50\n61\n749\n\n\n\n\n17660 rows × 5 columns\n\n\n\n#"
  },
  {
    "objectID": "posts/04wk-1.html#e.-df.sort_values",
    "href": "posts/04wk-1.html#e.-df.sort_values",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "E. df.sort_values()",
    "text": "E. df.sort_values()\n- 예시1: 나이가 어린 순서대로 정렬\n\ndf.sort_values(by='Age')\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n17636\n263636\n22 D. Oncescu\n15\nhttps://cdn.sofifa.net/players/263/636/22_60.png\nRomania\nhttps://cdn.sofifa.net/flags/ro.png\n50\n72\nFC Dinamo 1948 Bucureşti\nhttps://cdn.sofifa.net/teams/100757/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 1, 2021\nNaN\n2025\n190cm\n77kg\n€306K\n34.0\nNaN\n\n\n13712\n271072\nE. Topcu\n16\nhttps://cdn.sofifa.net/players/271/072/23_60.png\nRepublic of Ireland\nhttps://cdn.sofifa.net/flags/ie.png\n48\n58\nDrogheda United\nhttps://cdn.sofifa.net/teams/1572/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 8, 2022\nNaN\n2022\n183cm\n65kg\n€175K\n20.0\nNaN\n\n\n13078\n259442\n22 R. van den Berg\n16\nhttps://cdn.sofifa.net/players/259/442/22_60.png\nNetherlands\nhttps://cdn.sofifa.net/flags/nl.png\n60\n81\nPEC Zwolle\nhttps://cdn.sofifa.net/teams/1914/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nMay 24, 2020\nNaN\n2024\n190cm\n73kg\n€1.8M\n33.0\nNaN\n\n\n11257\n266205\n22 Y. Koré\n16\nhttps://cdn.sofifa.net/players/266/205/22_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n59\n74\nParis FC\nhttps://cdn.sofifa.net/teams/111817/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nAug 11, 2022\nNaN\n2025\n187cm\n75kg\n€1.1M\n34.0\nNaN\n\n\n11278\n261873\n21 H. Kumagai\n16\nhttps://cdn.sofifa.net/players/261/873/21_60.png\nJapan\nhttps://cdn.sofifa.net/flags/jp.png\n52\n70\nVegalta Sendai\nhttps://cdn.sofifa.net/teams/112836/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 16, 2021\nNaN\n2023\n174cm\n64kg\n€375K\n48.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16311\n254196\n21 L. Fernández\n42\nhttps://cdn.sofifa.net/players/254/196/21_60.png\nColombia\nhttps://cdn.sofifa.net/flags/co.png\n61\n61\nSociedad Deportiva Aucas\nhttps://cdn.sofifa.net/teams/110987/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nJan 29, 2018\nNaN\n2024\n187cm\n82kg\n€75K\n1.0\nNaN\n\n\n16036\n216692\nS. Torrico\n42\nhttps://cdn.sofifa.net/players/216/692/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n72\n72\nSan Lorenzo de Almagro\nhttps://cdn.sofifa.net/teams/1013/30.png\n...\nNo\n&lt;span class=\"pos pos0\"&gt;GK\nApr 25, 2013\nNaN\n2022\n183cm\n84kg\n€375K\n12.0\nNaN\n\n\n17257\n645\n17 D. Andersson\n43\nhttps://cdn.sofifa.net/players/000/645/17_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n57\n57\nHelsingborgs IF\nhttps://cdn.sofifa.net/teams/432/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nApr 21, 2016\nNaN\n2022\n187cm\n85kg\nNaN\n39.0\nNaN\n\n\n15375\n1179\nG. Buffon\n44\nhttps://cdn.sofifa.net/players/001/179/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n79\n79\nParma\nhttps://cdn.sofifa.net/teams/50/30.png\n...\nYes\n&lt;span class=\"pos pos0\"&gt;GK\nJul 1, 2021\nNaN\n2024\n192cm\n92kg\n€3M\n1.0\nNaN\n\n\n15272\n254704\n22 K. Miura\n54\nhttps://cdn.sofifa.net/players/254/704/22_60.png\nJapan\nhttps://cdn.sofifa.net/flags/jp.png\n56\n56\nYokohama FC\nhttps://cdn.sofifa.net/teams/113197/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2005\nNaN\n2022\n177cm\n72kg\nNaN\n11.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n- 예시2: 나이가 많은 순서대로 정렬\n\ndf.sort_values(by='Age',ascending=False)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n15272\n254704\n22 K. Miura\n54\nhttps://cdn.sofifa.net/players/254/704/22_60.png\nJapan\nhttps://cdn.sofifa.net/flags/jp.png\n56\n56\nYokohama FC\nhttps://cdn.sofifa.net/teams/113197/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2005\nNaN\n2022\n177cm\n72kg\nNaN\n11.0\nNaN\n\n\n15375\n1179\nG. Buffon\n44\nhttps://cdn.sofifa.net/players/001/179/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n79\n79\nParma\nhttps://cdn.sofifa.net/teams/50/30.png\n...\nYes\n&lt;span class=\"pos pos0\"&gt;GK\nJul 1, 2021\nNaN\n2024\n192cm\n92kg\n€3M\n1.0\nNaN\n\n\n17257\n645\n17 D. Andersson\n43\nhttps://cdn.sofifa.net/players/000/645/17_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n57\n57\nHelsingborgs IF\nhttps://cdn.sofifa.net/teams/432/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nApr 21, 2016\nNaN\n2022\n187cm\n85kg\nNaN\n39.0\nNaN\n\n\n16036\n216692\nS. Torrico\n42\nhttps://cdn.sofifa.net/players/216/692/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n72\n72\nSan Lorenzo de Almagro\nhttps://cdn.sofifa.net/teams/1013/30.png\n...\nNo\n&lt;span class=\"pos pos0\"&gt;GK\nApr 25, 2013\nNaN\n2022\n183cm\n84kg\n€375K\n12.0\nNaN\n\n\n16311\n254196\n21 L. Fernández\n42\nhttps://cdn.sofifa.net/players/254/196/21_60.png\nColombia\nhttps://cdn.sofifa.net/flags/co.png\n61\n61\nSociedad Deportiva Aucas\nhttps://cdn.sofifa.net/teams/110987/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nJan 29, 2018\nNaN\n2024\n187cm\n82kg\n€75K\n1.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17360\n261023\n21 H. Broun\n16\nhttps://cdn.sofifa.net/players/261/023/21_60.png\nScotland\nhttps://cdn.sofifa.net/flags/gb-sct.png\n52\n72\nKilmarnock\nhttps://cdn.sofifa.net/teams/82/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nSep 17, 2020\nNaN\n2022\n182cm\n70kg\n€523K\n40.0\nNaN\n\n\n15536\n263639\n22 M. Pavel\n16\nhttps://cdn.sofifa.net/players/263/639/22_60.png\nRomania\nhttps://cdn.sofifa.net/flags/ro.png\n51\n69\nFC Dinamo 1948 Bucureşti\nhttps://cdn.sofifa.net/teams/100757/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2021\nNaN\n2023\n178cm\n66kg\n€277K\n77.0\nNaN\n\n\n11398\n256405\n21 W. Essanoussi\n16\nhttps://cdn.sofifa.net/players/256/405/21_60.png\nNetherlands\nhttps://cdn.sofifa.net/flags/nl.png\n59\n75\nVVV-Venlo\nhttps://cdn.sofifa.net/teams/100651/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJul 1, 2019\nNaN\n2022\n178cm\n70kg\n€1.1M\n24.0\nNaN\n\n\n15030\n270594\nT. Walczak\n16\nhttps://cdn.sofifa.net/players/270/594/23_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n54\n68\nWisła Płock\nhttps://cdn.sofifa.net/teams/1569/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nSep 7, 2021\nNaN\n2023\n191cm\n88kg\n€494K\n99.0\nNaN\n\n\n17636\n263636\n22 D. Oncescu\n15\nhttps://cdn.sofifa.net/players/263/636/22_60.png\nRomania\nhttps://cdn.sofifa.net/flags/ro.png\n50\n72\nFC Dinamo 1948 Bucureşti\nhttps://cdn.sofifa.net/teams/100757/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 1, 2021\nNaN\n2025\n190cm\n77kg\n€306K\n34.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n- 예시3: 능력치가 좋은 순서대로 정렬\n\ndf.sort_values(by = 'Overall',ascending=False)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n41\n188545\nR. Lewandowski\n33\nhttps://cdn.sofifa.net/players/188/545/23_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n91\n91\nFC Barcelona\nhttps://cdn.sofifa.net/teams/241/30.png\n...\nYes\n&lt;span class=\"pos pos25\"&gt;ST\nJul 18, 2022\nNaN\n2025\n185cm\n81kg\n€172.2M\n9.0\nNaN\n\n\n124\n165153\nK. Benzema\n34\nhttps://cdn.sofifa.net/players/165/153/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n91\n91\nReal Madrid CF\nhttps://cdn.sofifa.net/teams/243/30.png\n...\nYes\n&lt;span class=\"pos pos21\"&gt;CF\nJul 9, 2009\nNaN\n2023\n185cm\n81kg\n€131.2M\n9.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n56\n158023\nL. Messi\n35\nhttps://cdn.sofifa.net/players/158/023/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n91\n91\nParis Saint-Germain\nhttps://cdn.sofifa.net/teams/73/30.png\n...\nYes\n&lt;span class=\"pos pos23\"&gt;RW\nAug 10, 2021\nNaN\n2023\n169cm\n67kg\n€99.9M\n30.0\nNaN\n\n\n75\n231747\nK. Mbappé\n23\nhttps://cdn.sofifa.net/players/231/747/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n91\n95\nParis Saint-Germain\nhttps://cdn.sofifa.net/teams/73/30.png\n...\nYes\n&lt;span class=\"pos pos25\"&gt;ST\nJul 1, 2018\nNaN\n2025\n182cm\n73kg\n€366.7M\n7.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n15513\n266751\n22 Jung Ho Yeon\n20\nhttps://cdn.sofifa.net/players/266/751/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n45\n53\nGwangJu FC\nhttps://cdn.sofifa.net/teams/112258/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 20, 2022\nNaN\n2026\n180cm\n73kg\n€145K\n23.0\nNaN\n\n\n16215\n268279\n22 J. Looschen\n24\nhttps://cdn.sofifa.net/players/268/279/22_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n44\n47\nSV Meppen\nhttps://cdn.sofifa.net/teams/110597/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nMar 19, 2022\nNaN\n2026\n178cm\n78kg\n€92K\n42.0\nNaN\n\n\n16042\n255283\n20 Kim Yeong Geun\n22\nhttps://cdn.sofifa.net/players/255/283/20_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n44\n49\nGyeongnam FC\nhttps://cdn.sofifa.net/teams/111588/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 9, 2020\nNaN\n2020\n174cm\n71kg\n€53K\n43.0\nNaN\n\n\n14634\n269038\n22 Zhang Wenxuan\n16\nhttps://cdn.sofifa.net/players/269/038/22_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n44\n59\nGuangzhou FC\nhttps://cdn.sofifa.net/teams/111839/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nMay 1, 2022\nNaN\n2022\n175cm\n70kg\n€239K\n29.0\nNaN\n\n\n17618\n168933\n07 I. Paskov\n33\nhttps://cdn.sofifa.net/players/168/933/07_60.png\nBulgaria\nhttps://cdn.sofifa.net/flags/bg.png\n43\n42\nNaN\nhttps://cdn.sofifa.net/flags/bg.png\n...\nNaN\n&lt;span class=\"pos pos28\"&gt;SUB\nNaN\nNaN\nNaN\n184cm\n79kg\nNaN\n24.0\nNaN\n\n\n\n\n17660 rows × 29 columns"
  },
  {
    "objectID": "posts/04wk-1.html#f.-df.info",
    "href": "posts/04wk-1.html#f.-df.info",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "F. df.info()",
    "text": "F. df.info()\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 17660 entries, 0 to 17659\nData columns (total 29 columns):\n #   Column                    Non-Null Count  Dtype  \n---  ------                    --------------  -----  \n 0   ID                        17660 non-null  int64  \n 1   Name                      17660 non-null  object \n 2   Age                       17660 non-null  int64  \n 3   Photo                     17660 non-null  object \n 4   Nationality               17660 non-null  object \n 5   Flag                      17660 non-null  object \n 6   Overall                   17660 non-null  int64  \n 7   Potential                 17660 non-null  int64  \n 8   Club                      17449 non-null  object \n 9   Club Logo                 17660 non-null  object \n 10  Value                     17660 non-null  object \n 11  Wage                      17660 non-null  object \n 12  Special                   17660 non-null  int64  \n 13  Preferred Foot            17660 non-null  object \n 14  International Reputation  17660 non-null  float64\n 15  Weak Foot                 17660 non-null  float64\n 16  Skill Moves               17660 non-null  float64\n 17  Work Rate                 17660 non-null  object \n 18  Body Type                 17622 non-null  object \n 19  Real Face                 17622 non-null  object \n 20  Position                  17625 non-null  object \n 21  Joined                    16562 non-null  object \n 22  Loaned From               694 non-null    object \n 23  Contract Valid Until      17299 non-null  object \n 24  Height                    17660 non-null  object \n 25  Weight                    17660 non-null  object \n 26  Release Clause            16509 non-null  object \n 27  Kit Number                17625 non-null  float64\n 28  Best Overall Rating       21 non-null     object \ndtypes: float64(4), int64(5), object(20)\nmemory usage: 3.9+ MB"
  },
  {
    "objectID": "posts/04wk-1.html#g.-df.isna",
    "href": "posts/04wk-1.html#g.-df.isna",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "G. df.isna()",
    "text": "G. df.isna()\n- 예시1: 열별로 결측치 count\n\ndf.isna().sum(axis=0)\n\nID                              0\nName                            0\nAge                             0\nPhoto                           0\nNationality                     0\nFlag                            0\nOverall                         0\nPotential                       0\nClub                          211\nClub Logo                       0\nValue                           0\nWage                            0\nSpecial                         0\nPreferred Foot                  0\nInternational Reputation        0\nWeak Foot                       0\nSkill Moves                     0\nWork Rate                       0\nBody Type                      38\nReal Face                      38\nPosition                       35\nJoined                       1098\nLoaned From                 16966\nContract Valid Until          361\nHeight                          0\nWeight                          0\nRelease Clause               1151\nKit Number                     35\nBest Overall Rating         17639\ndtype: int64\n\n\n- 예시2: 결측치가 50% 이상인 열 출력\n\ndf.loc[:,df.isna().sum(axis=0) / len(df) &gt; 0.5] \n\n\n\n\n\n\n\n\nLoaned From\nBest Overall Rating\n\n\n\n\n0\nNaN\nNaN\n\n\n1\nNaN\nNaN\n\n\n2\nNaN\nNaN\n\n\n3\nNaN\nNaN\n\n\n4\nNaN\nNaN\n\n\n...\n...\n...\n\n\n17655\nNaN\nNaN\n\n\n17656\nNaN\nNaN\n\n\n17657\nNaN\nNaN\n\n\n17658\nNaN\nNaN\n\n\n17659\nNaN\nNaN\n\n\n\n\n17660 rows × 2 columns\n\n\n\n\naxis 사용하기 어렵다면 https://guebin.github.io/PP2023/posts/02_DataScience/2023-04-12-6wk-2.html 를 복습할 것!"
  },
  {
    "objectID": "posts/04wk-1.html#h.-df.drop",
    "href": "posts/04wk-1.html#h.-df.drop",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "H. df.drop()",
    "text": "H. df.drop()\n- 예시1: [0,1,2,3] 행을 drop\n\ndf.drop([0,1,2,3],axis=0)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n5\n212622\nJ. Kimmich\n27\nhttps://cdn.sofifa.net/players/212/622/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n89\n90\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos9\"&gt;RDM\nJul 1, 2015\nNaN\n2025\n177cm\n75kg\n€182M\n6.0\nNaN\n\n\n6\n197445\nD. Alaba\n30\nhttps://cdn.sofifa.net/players/197/445/23_60.png\nAustria\nhttps://cdn.sofifa.net/flags/at.png\n86\n86\nReal Madrid CF\nhttps://cdn.sofifa.net/teams/243/30.png\n...\nYes\n&lt;span class=\"pos pos6\"&gt;LCB\nJul 1, 2021\nNaN\n2026\n180cm\n78kg\n€113.8M\n4.0\nNaN\n\n\n7\n187961\n22 Paulinho\n32\nhttps://cdn.sofifa.net/players/187/961/22_60.png\nBrazil\nhttps://cdn.sofifa.net/flags/br.png\n83\n83\nAl Ahli\nhttps://cdn.sofifa.net/teams/112387/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJul 22, 2021\nNaN\n2024\n183cm\n80kg\n€48.5M\n15.0\nNaN\n\n\n8\n208333\nE. Can\n28\nhttps://cdn.sofifa.net/players/208/333/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n82\n82\nBorussia Dortmund\nhttps://cdn.sofifa.net/teams/22/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nFeb 18, 2020\nNaN\n2024\n186cm\n86kg\n€51.9M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17656 rows × 29 columns\n\n\n\n- 예시2: [‘Name’, ‘Age’] 열을 drop\n\ndf.drop(['Name','Age'],axis=1)\n\n\n\n\n\n\n\n\nID\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\nValue\nWage\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n€91M\n€115K\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n€78.5M\n€190K\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n€46.5M\n€46K\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n€107.5M\n€350K\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n€89.5M\n€110K\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n€100K\n€500\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n€100K\n€500\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n€70K\n€2K\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n€90K\n€500\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n€90K\n€500\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 27 columns"
  },
  {
    "objectID": "posts/04wk-1.html#gh-에-대한-연습문제",
    "href": "posts/04wk-1.html#gh-에-대한-연습문제",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "# G~H 에 대한 연습문제",
    "text": "# G~H 에 대한 연습문제\n# 예제: 결측치가 50퍼 이상인 열을 제외하라.\n- (풀이1)\n\ndf.isna().mean(axis=0) &gt; 0.5\n\nID                          False\nName                        False\nAge                         False\nPhoto                       False\nNationality                 False\nFlag                        False\nOverall                     False\nPotential                   False\nClub                        False\nClub Logo                   False\nValue                       False\nWage                        False\nSpecial                     False\nPreferred Foot              False\nInternational Reputation    False\nWeak Foot                   False\nSkill Moves                 False\nWork Rate                   False\nBody Type                   False\nReal Face                   False\nPosition                    False\nJoined                      False\nLoaned From                  True\nContract Valid Until        False\nHeight                      False\nWeight                      False\nRelease Clause              False\nKit Number                  False\nBest Overall Rating          True\ndtype: bool\n\n\n\ndf.drop(['Loaned From','Best Overall Rating'],axis=1)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nWork Rate\nBody Type\nReal Face\nPosition\nJoined\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nHigh/ Medium\nUnique\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\n2026\n189cm\n82kg\n€157M\n8.0\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\n2026\n179cm\n69kg\n€155M\n8.0\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nHigh/ High\nStocky (170-185)\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\n2024\n172cm\n69kg\n€97.7M\n19.0\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\n2025\n181cm\n70kg\n€198.9M\n17.0\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nHigh/ High\nNormal (170-)\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\n2026\n172cm\n68kg\n€154.4M\n23.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\n2027\n190cm\n78kg\n€218K\n35.0\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\n2026\n195cm\n84kg\n€188K\n21.0\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\n2023\n190cm\n82kg\n€142K\n12.0\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\n2021\n187cm\n79kg\n€214K\n40.0\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\n2021\n186cm\n78kg\n€131K\n30.0\n\n\n\n\n17660 rows × 27 columns\n\n\n\n- (풀이2)\n\ndf.loc[:,df.isna().mean() &lt; 0.5]\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nWork Rate\nBody Type\nReal Face\nPosition\nJoined\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nHigh/ Medium\nUnique\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\n2026\n189cm\n82kg\n€157M\n8.0\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\n2026\n179cm\n69kg\n€155M\n8.0\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nHigh/ High\nStocky (170-185)\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\n2024\n172cm\n69kg\n€97.7M\n19.0\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nHigh/ High\nUnique\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\n2025\n181cm\n70kg\n€198.9M\n17.0\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nHigh/ High\nNormal (170-)\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\n2026\n172cm\n68kg\n€154.4M\n23.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\n2027\n190cm\n78kg\n€218K\n35.0\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\n2026\n195cm\n84kg\n€188K\n21.0\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nMedium/ Medium\nLean (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\n2023\n190cm\n82kg\n€142K\n12.0\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\n2021\n187cm\n79kg\n€214K\n40.0\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nMedium/ Medium\nNormal (185+)\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\n2021\n186cm\n78kg\n€131K\n30.0\n\n\n\n\n17660 rows × 27 columns\n\n\n\n#"
  },
  {
    "objectID": "posts/04wk-1.html#a.-numpy",
    "href": "posts/04wk-1.html#a.-numpy",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "A. Numpy",
    "text": "A. Numpy\n- 발생: np.nan\n\nnp.nan\n\nnan\n\n\n\n[1,2,3,np.nan]\n\n[1, 2, 3, nan]\n\n\n\narr = np.array([1,2,3,np.nan])\narr\n\narray([ 1.,  2.,  3., nan])\n\n\n- np.array에 nan이 있으면 연산결과도 nan\n\narr.mean()\n\nnan\n\n\n- type\n\ntype(np.nan) \n\nfloat\n\n\n\ntype(arr[-1])\n\nnumpy.float64"
  },
  {
    "objectID": "posts/04wk-1.html#b.-pandas",
    "href": "posts/04wk-1.html#b.-pandas",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "B. Pandas",
    "text": "B. Pandas\n- 발생: np.nan, pd.NA\n\npd.Series([np.nan,1,2,3])\n\n0    NaN\n1    1.0\n2    2.0\n3    3.0\ndtype: float64\n\n\n\npd.Series([pd.NA,1,2,3])\n\n0    &lt;NA&gt;\n1       1\n2       2\n3       3\ndtype: object\n\n\n- pd.Series에 NaN 혹은 &lt;NA&gt; 가 있다면 연산할때 제외함\n\npd.Series([np.nan,1,2,3]).mean()\n\n2.0\n\n\n\npd.Series([pd.NA,1,2,3]).mean()\n\n2.0\n\n\n- type\n\ns1 = pd.Series([np.nan,1,2,3])\ntype(s1[0])\n\nnumpy.float64\n\n\n\ns2 = pd.Series([pd.NA,1,2,3])\ntype(s2[0])\n\npandas._libs.missing.NAType\n\n\n- 검출 (\\(\\star\\))\n\ns1.isna()\n\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n\n\ns2.isna()\n\n0     True\n1    False\n2    False\n3    False\ndtype: bool\n\n\n\ns1[0]\n\nnan\n\n\n\npd.isna(s1[0]), pd.isnull(s1[0])\n\n(True, True)\n\n\n\npd.isna(s2[0]), pd.isnull(s2[0])\n\n(True, True)\n\n\n\nid(pd.isna), id(pd.isnull) # 같은함수\n\n(140619808936864, 140619808936864)"
  },
  {
    "objectID": "posts/04wk-1.html#a.-기본-query",
    "href": "posts/04wk-1.html#a.-기본-query",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "A. 기본 query",
    "text": "A. 기본 query\n- 예시1: A&gt;0 and B&lt;0\n\nts.query('A&gt;0 and B&lt;0')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-27\n1.878222\n-0.363973\n0.652147\n-2.757448\nA\n\n\n2023-01-02\n0.270796\n-0.336293\n-0.877458\n-1.190673\nA\n\n\n2023-01-03\n0.824015\n-0.478758\n0.062818\n-0.985841\nA\n\n\n2023-01-10\n1.496267\n-1.620263\n0.255344\n0.003755\nB\n\n\n2023-01-11\n1.372299\n-0.081760\n-1.924613\n0.311614\nB\n\n\n2023-01-13\n0.998978\n-1.223152\n-0.623063\n-0.271440\nB\n\n\n2023-01-14\n0.291082\n-0.536917\n-0.768778\n0.470998\nB\n\n\n\n\n\n\n\n- 예시2: A&lt;B&lt;C\n\nts.query('A&lt;B&lt;C')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-31\n0.120938\n0.524992\n1.233363\n-2.521042\nA\n\n\n\n\n\n\n\n- 예시3: (A+B)/2 &gt; 0\n\nts.query('(A+B)/2&gt;0')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-27\n1.878222\n-0.363973\n0.652147\n-2.757448\nA\n\n\n2022-12-28\n-1.632762\n3.049806\n-0.708102\n-1.493035\nA\n\n\n2022-12-30\n0.120598\n0.394019\n-0.380788\n0.303970\nA\n\n\n2022-12-31\n0.120938\n0.524992\n1.233363\n-2.521042\nA\n\n\n2023-01-03\n0.824015\n-0.478758\n0.062818\n-0.985841\nA\n\n\n2023-01-04\n-0.436274\n0.991324\n-0.641292\n1.461917\nA\n\n\n2023-01-08\n0.332219\n1.901141\n-0.052167\n-0.064043\nB\n\n\n2023-01-09\n0.144748\n0.428578\n-1.241336\n-0.107484\nB\n\n\n2023-01-11\n1.372299\n-0.081760\n-1.924613\n0.311614\nB\n\n\n2023-01-12\n1.973132\n0.242329\n1.320583\n-1.615392\nB\n\n\n\n\n\n\n\n- 예시4: (A+B)/2 &gt; 0 and E=='A'\n\nts.query('(A+B)/2&gt;0 and E==\"A\"')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-27\n1.878222\n-0.363973\n0.652147\n-2.757448\nA\n\n\n2022-12-28\n-1.632762\n3.049806\n-0.708102\n-1.493035\nA\n\n\n2022-12-30\n0.120598\n0.394019\n-0.380788\n0.303970\nA\n\n\n2022-12-31\n0.120938\n0.524992\n1.233363\n-2.521042\nA\n\n\n2023-01-03\n0.824015\n-0.478758\n0.062818\n-0.985841\nA\n\n\n2023-01-04\n-0.436274\n0.991324\n-0.641292\n1.461917\nA\n\n\n\n\n\n\n\n\nts.query(\"(A+B)/2&gt;0 and E=='A'\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-27\n1.878222\n-0.363973\n0.652147\n-2.757448\nA\n\n\n2022-12-28\n-1.632762\n3.049806\n-0.708102\n-1.493035\nA\n\n\n2022-12-30\n0.120598\n0.394019\n-0.380788\n0.303970\nA\n\n\n2022-12-31\n0.120938\n0.524992\n1.233363\n-2.521042\nA\n\n\n2023-01-03\n0.824015\n-0.478758\n0.062818\n-0.985841\nA\n\n\n2023-01-04\n-0.436274\n0.991324\n-0.641292\n1.461917\nA"
  },
  {
    "objectID": "posts/04wk-1.html#b.-외부변수를-이용",
    "href": "posts/04wk-1.html#b.-외부변수를-이용",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "B. 외부변수를 이용",
    "text": "B. 외부변수를 이용\n- 예시: A &gt; mean(A)\n\nvalue = np.percentile(ts.A,77) # ts.A 에서 77 percentile에 해당하는 숫자\nts.query(\"A &gt; @value\")\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-27\n1.878222\n-0.363973\n0.652147\n-2.757448\nA\n\n\n2023-01-10\n1.496267\n-1.620263\n0.255344\n0.003755\nB\n\n\n2023-01-11\n1.372299\n-0.081760\n-1.924613\n0.311614\nB\n\n\n2023-01-12\n1.973132\n0.242329\n1.320583\n-1.615392\nB\n\n\n2023-01-13\n0.998978\n-1.223152\n-0.623063\n-0.271440\nB\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n명확한 전달을 위해서 영상에서 설명한 예제를 조금 바꿨습니다."
  },
  {
    "objectID": "posts/04wk-1.html#c.-index로-query",
    "href": "posts/04wk-1.html#c.-index로-query",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "C. Index로 query",
    "text": "C. Index로 query\n- 예시: (2022년 12월30일 보다 이전 날짜) \\(\\cup\\) (2023년 1월10일)\n\nts.query('index &lt; \"2022-12-30\" or index == \"2023-01-10\"')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n2022-12-26\n-0.442492\n0.068711\n-0.088430\n-0.598197\nA\n\n\n2022-12-27\n1.878222\n-0.363973\n0.652147\n-2.757448\nA\n\n\n2022-12-28\n-1.632762\n3.049806\n-0.708102\n-1.493035\nA\n\n\n2022-12-29\n-0.466743\n-0.837421\n-0.951080\n0.754957\nA\n\n\n2023-01-10\n1.496267\n-1.620263\n0.255344\n0.003755\nB"
  },
  {
    "objectID": "posts/04wk-1.html#d.-열의-이름에-공백이-있을-경우",
    "href": "posts/04wk-1.html#d.-열의-이름에-공백이-있을-경우",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "D. 열의 이름에 공백이 있을 경우",
    "text": "D. 열의 이름에 공백이 있을 경우\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ndf.head()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n- 예시: Skill Moves &gt; 4\n\ndf.query('`Skill Moves` &gt; 4')\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n19\n193082\nJ. Cuadrado\n34\nhttps://cdn.sofifa.net/players/193/082/23_60.png\nColombia\nhttps://cdn.sofifa.net/flags/co.png\n83\n83\nJuventus\nhttps://cdn.sofifa.net/teams/45/30.png\n...\nYes\n&lt;span class=\"pos pos3\"&gt;RB\nJul 1, 2017\nNaN\n2023\n179cm\n72kg\n€23M\n11.0\nNaN\n\n\n27\n189509\nThiago\n31\nhttps://cdn.sofifa.net/players/189/509/23_60.png\nSpain\nhttps://cdn.sofifa.net/flags/es.png\n86\n86\nLiverpool\nhttps://cdn.sofifa.net/teams/9/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nSep 18, 2020\nNaN\n2024\n174cm\n70kg\n€102.7M\n6.0\nNaN\n\n\n44\n232411\nC. Nkunku\n24\nhttps://cdn.sofifa.net/players/232/411/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n86\n89\nRB Leipzig\nhttps://cdn.sofifa.net/teams/112172/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nNaN\nNaN\nNaN\n175cm\n73kg\n€166.9M\n12.0\nNaN\n\n\n62\n233927\nLucas Paquetá\n24\nhttps://cdn.sofifa.net/players/233/927/23_60.png\nBrazil\nhttps://cdn.sofifa.net/flags/br.png\n82\n87\nOlympique Lyonnais\nhttps://cdn.sofifa.net/teams/66/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nOct 1, 2020\nNaN\n2025\n180cm\n72kg\n€90.9M\n10.0\nNaN\n\n\n75\n231747\nK. Mbappé\n23\nhttps://cdn.sofifa.net/players/231/747/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n91\n95\nParis Saint-Germain\nhttps://cdn.sofifa.net/teams/73/30.png\n...\nYes\n&lt;span class=\"pos pos25\"&gt;ST\nJul 1, 2018\nNaN\n2025\n182cm\n73kg\n€366.7M\n7.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4516\n253755\nTalles Magno\n20\nhttps://cdn.sofifa.net/players/253/755/23_60.png\nBrazil\nhttps://cdn.sofifa.net/flags/br.png\n71\n83\nNew York City FC\nhttps://cdn.sofifa.net/teams/112828/30.png\n...\nNo\n&lt;span class=\"pos pos16\"&gt;LM\nMay 18, 2021\nNaN\n2026\n186cm\n70kg\n€7.7M\n43.0\nNaN\n\n\n4643\n246548\nO. Sahraoui\n21\nhttps://cdn.sofifa.net/players/246/548/23_60.png\nNorway\nhttps://cdn.sofifa.net/flags/no.png\n67\n78\nVålerenga Fotball\nhttps://cdn.sofifa.net/teams/920/30.png\n...\nNo\n&lt;span class=\"pos pos27\"&gt;LW\nMay 15, 2019\nNaN\n2023\n170cm\n65kg\n€3.3M\n10.0\nNaN\n\n\n4872\n251570\nR. Cherki\n18\nhttps://cdn.sofifa.net/players/251/570/23_60.png\nFrance\nhttps://cdn.sofifa.net/flags/fr.png\n73\n88\nOlympique Lyonnais\nhttps://cdn.sofifa.net/teams/66/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 7, 2019\nNaN\n2023\n176cm\n71kg\n€17.7M\n18.0\nNaN\n\n\n5361\n225712\nD. Bahamboula\n27\nhttps://cdn.sofifa.net/players/225/712/23_60.png\nCongo\nhttps://cdn.sofifa.net/flags/cg.png\n63\n63\nLivingston FC\nhttps://cdn.sofifa.net/teams/621/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 9, 2022\nNaN\n2024\n185cm\n70kg\n€875K\n7.0\nNaN\n\n\n10452\n212455\n17 H. Mastour\n18\nhttps://cdn.sofifa.net/players/212/455/17_60.png\nMorocco\nhttps://cdn.sofifa.net/flags/ma.png\n65\n76\nPEC Zwolle\nhttps://cdn.sofifa.net/teams/1914/30.png\n...\nNo\n&lt;span class=\"pos pos28\"&gt;SUB\nNaN\n&lt;a href=\"/team/47/ac-milan/\"&gt;AC Milan&lt;/a&gt;\nJun 30, 2017\n175cm\n63kg\nNaN\n98.0\nNaN\n\n\n\n\n65 rows × 29 columns"
  },
  {
    "objectID": "posts/04wk-1.html#a.-df.assign",
    "href": "posts/04wk-1.html#a.-df.assign",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "A. df.assign()",
    "text": "A. df.assign()\n- 예시: total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35 를 계산하여 할당\n\ndf.assign(total = df.att*0.1 + df.rep*0.2 + df.mid*0.35 + df.fin*0.35)\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ntotal\n\n\n\n\n0\n65\n55\n50\n40\n49.00\n\n\n1\n95\n100\n50\n80\n75.00\n\n\n2\n65\n90\n60\n30\n56.00\n\n\n3\n55\n80\n75\n80\n75.75\n\n\n4\n80\n30\n30\n100\n59.50\n\n\n5\n75\n40\n100\n15\n55.75\n\n\n6\n65\n45\n45\n90\n62.75\n\n\n7\n60\n60\n25\n0\n26.75\n\n\n8\n95\n65\n20\n10\n33.00\n\n\n9\n90\n80\n80\n20\n60.00\n\n\n10\n55\n75\n35\n25\n41.50\n\n\n11\n95\n95\n45\n0\n44.25\n\n\n12\n95\n55\n15\n35\n38.00\n\n\n13\n50\n80\n40\n30\n45.50\n\n\n14\n50\n55\n15\n85\n51.00\n\n\n15\n95\n30\n30\n95\n59.25\n\n\n16\n50\n50\n45\n10\n34.25\n\n\n17\n65\n55\n15\n45\n38.50\n\n\n18\n70\n70\n40\n35\n47.25\n\n\n19\n90\n90\n80\n90\n86.50\n\n\n\n\n\n\n\n\nNote: 이 방법은 df를 일시적으로 변화시킴"
  },
  {
    "objectID": "posts/04wk-1.html#b.-df.eval",
    "href": "posts/04wk-1.html#b.-df.eval",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "B. df.eval()",
    "text": "B. df.eval()\n- 예시: total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35 를 계산하여 할당\n\ndf.eval('total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35')\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ntotal\n\n\n\n\n0\n65\n55\n50\n40\n49.00\n\n\n1\n95\n100\n50\n80\n75.00\n\n\n2\n65\n90\n60\n30\n56.00\n\n\n3\n55\n80\n75\n80\n75.75\n\n\n4\n80\n30\n30\n100\n59.50\n\n\n5\n75\n40\n100\n15\n55.75\n\n\n6\n65\n45\n45\n90\n62.75\n\n\n7\n60\n60\n25\n0\n26.75\n\n\n8\n95\n65\n20\n10\n33.00\n\n\n9\n90\n80\n80\n20\n60.00\n\n\n10\n55\n75\n35\n25\n41.50\n\n\n11\n95\n95\n45\n0\n44.25\n\n\n12\n95\n55\n15\n35\n38.00\n\n\n13\n50\n80\n40\n30\n45.50\n\n\n14\n50\n55\n15\n85\n51.00\n\n\n15\n95\n30\n30\n95\n59.25\n\n\n16\n50\n50\n45\n10\n34.25\n\n\n17\n65\n55\n15\n45\n38.50\n\n\n18\n70\n70\n40\n35\n47.25\n\n\n19\n90\n90\n80\n90\n86.50\n\n\n\n\n\n\n\n\nNote: 이 방법은 df를 일시적으로 변화시킴"
  },
  {
    "objectID": "posts/04wk-1.html#c.-dfcolname-xxx",
    "href": "posts/04wk-1.html#c.-dfcolname-xxx",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "C. df[colname] = xxx",
    "text": "C. df[colname] = xxx\n- 예시: total = att*0.1 + rep*0.2 + mid*0.35 + fin*0.35 를 계산하여 할당.\n\ndf['total'] = df.att*0.1 + df.rep*0.2 + df.mid*0.35 + df.fin*0.35\ndf\n\n\n\n\n\n\n\n\natt\nrep\nmid\nfin\ntotal\n\n\n\n\n0\n65\n55\n50\n40\n49.00\n\n\n1\n95\n100\n50\n80\n75.00\n\n\n2\n65\n90\n60\n30\n56.00\n\n\n3\n55\n80\n75\n80\n75.75\n\n\n4\n80\n30\n30\n100\n59.50\n\n\n5\n75\n40\n100\n15\n55.75\n\n\n6\n65\n45\n45\n90\n62.75\n\n\n7\n60\n60\n25\n0\n26.75\n\n\n8\n95\n65\n20\n10\n33.00\n\n\n9\n90\n80\n80\n20\n60.00\n\n\n10\n55\n75\n35\n25\n41.50\n\n\n11\n95\n95\n45\n0\n44.25\n\n\n12\n95\n55\n15\n35\n38.00\n\n\n13\n50\n80\n40\n30\n45.50\n\n\n14\n50\n55\n15\n85\n51.00\n\n\n15\n95\n30\n30\n95\n59.25\n\n\n16\n50\n50\n45\n10\n34.25\n\n\n17\n65\n55\n15\n45\n38.50\n\n\n18\n70\n70\n40\n35\n47.25\n\n\n19\n90\n90\n80\n90\n86.50\n\n\n\n\n\n\n\n\nNote: 이 방법은 df를 영구적으로 변화시킴"
  },
  {
    "objectID": "posts/04wk-1.html#a.-lambda",
    "href": "posts/04wk-1.html#a.-lambda",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "A. lambda",
    "text": "A. lambda\n- 예시1: \\(x \\to x+2\\)\n\nf = lambda x: x+2\nf(1)\n\n3\n\n\n- 예시2: \\(x,y \\to x+y\\)\n\nf = lambda x,y: x+y\nf(1,2)\n\n3\n\n\n- 예시3: ‘2023-09’ \\(\\to\\) 9\n\nf = lambda x: int(x[-2:])\nf('2023-09')\n\n9\n\n\n- 예시4: ‘2023-09’ \\(\\to\\) (2023,9)\n\nf = lambda x: (int(x[:4]),int(x[-2:]))\nf('2023-09')\n\n(2023, 9)\n\n\n- 예시5: 문자열이 ‘cat’이면 1 ’dog’ 이면 0 // ’cat이면 1 ’cat’이 아니면 0\n\nf = lambda x: 1 if x=='cat' else 0\n\n\nf('cat'), f('dog')\n\n(1, 0)\n\n\n- Note: f로 이름을 정하지 않고 직접 사용 가능\n\n(lambda x: x+1)(2)\n\n3"
  },
  {
    "objectID": "posts/04wk-1.html#b.-map",
    "href": "posts/04wk-1.html#b.-map",
    "title": "04wk-1: Pandas – 기본기능, missing, query, 할당, transform column",
    "section": "B. map",
    "text": "B. map\n- 개념: map(f,[x1,x2,...xn])=[f(x1),f(x2),...,f(xn)]\n- 예시1: x-&gt;x+1을 [1,2,3]에 적용\n\nlist(map(lambda x: x+1, [1,-5,3]))\n\n[2, -4, 4]\n\n\n- 예시2 df.Height열 변환하기\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ns = df.Height[:5]\ns\n\n0    189cm\n1    179cm\n2    172cm\n3    181cm\n4    172cm\nName: Height, dtype: object\n\n\n\nx = s[0]\nx\n\n'189cm'\n\n\n\nlist(map(lambda x: int(x.replace('cm','')), s))\n\n[189, 179, 172, 181, 172]\n\n\n# 예시3 df.Height열 변환하기 + 변환된 열 할당하기\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\n\n- (풀이1)\n\ndf.assign(Height= list(map(lambda x: int(x.replace('cm','')), df.Height)))\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n- (풀이2) – 사실 수틀리면 컴프리헨션 쓰면 된다.\n\ndf.assign(Height= [int(height.replace('cm','')) for height in df.Height])\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\n&lt;span class=\"pos pos28\"&gt;SUB\nJul 1, 2018\nNaN\n2026\n189\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\n&lt;span class=\"pos pos15\"&gt;LCM\nJan 30, 2020\nNaN\n2026\n179\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\n&lt;span class=\"pos pos7\"&gt;LB\nSep 14, 2020\nNaN\n2024\n172\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nAug 30, 2015\nNaN\n2025\n181\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\n&lt;span class=\"pos pos13\"&gt;RCM\nSep 1, 2020\nNaN\n2026\n172\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nApr 11, 2022\nNaN\n2027\n190\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2022\nNaN\n2026\n195\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJun 6, 2021\nNaN\n2023\n190\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 1, 2020\nNaN\n2021\n187\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\n&lt;span class=\"pos pos29\"&gt;RES\nJan 8, 2020\nNaN\n2021\n186\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n#\n# 예시4 – df.Position 열에 아래와 같은 변환을 수행하고, 변환된 열을 할당하라.\n\n\n\nbefore\nafter\n\n\n\n\n&lt;span class=\"pos pos28\"&gt;SUB\nSUB\n\n\n&lt;span class=\"pos pos15\"&gt;LCM\nLCM\n\n\n&lt;span class=\"pos pos7\"&gt;LB\nLB\n\n\n&lt;span class=\"pos pos13\"&gt;RCM\nRCM\n\n\n&lt;span class=\"pos pos13\"&gt;RCM\nRCM\n\n\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\n\n- (풀이1)\n\nx = df.Position[0]\nx\n\n'&lt;span class=\"pos pos28\"&gt;SUB'\n\n\n\ndf.assign(Position = list(map(lambda x: x.split('&gt;')[-1] if not pd.isna(x) else 'NA', df.Position)))\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\nSUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\nLCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\nLB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\nRCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\nRCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\nRES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\nRES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\nRES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\nRES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\nRES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n- (풀이2) – 리스트컴프리헨션\n\nf = lambda x: x.split('&gt;')[-1] if not pd.isna(x) else 'NA'\n\n\ndf.assign(Position = [f(x) for x in df.Position])\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nReal Face\nPosition\nJoined\nLoaned From\nContract Valid Until\nHeight\nWeight\nRelease Clause\nKit Number\nBest Overall Rating\n\n\n\n\n0\n209658\nL. Goretzka\n27\nhttps://cdn.sofifa.net/players/209/658/23_60.png\nGermany\nhttps://cdn.sofifa.net/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.net/teams/21/30.png\n...\nYes\nSUB\nJul 1, 2018\nNaN\n2026\n189cm\n82kg\n€157M\n8.0\nNaN\n\n\n1\n212198\nBruno Fernandes\n27\nhttps://cdn.sofifa.net/players/212/198/23_60.png\nPortugal\nhttps://cdn.sofifa.net/flags/pt.png\n86\n87\nManchester United\nhttps://cdn.sofifa.net/teams/11/30.png\n...\nYes\nLCM\nJan 30, 2020\nNaN\n2026\n179cm\n69kg\n€155M\n8.0\nNaN\n\n\n2\n224334\nM. Acuña\n30\nhttps://cdn.sofifa.net/players/224/334/23_60.png\nArgentina\nhttps://cdn.sofifa.net/flags/ar.png\n85\n85\nSevilla FC\nhttps://cdn.sofifa.net/teams/481/30.png\n...\nNo\nLB\nSep 14, 2020\nNaN\n2024\n172cm\n69kg\n€97.7M\n19.0\nNaN\n\n\n3\n192985\nK. De Bruyne\n31\nhttps://cdn.sofifa.net/players/192/985/23_60.png\nBelgium\nhttps://cdn.sofifa.net/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.net/teams/10/30.png\n...\nYes\nRCM\nAug 30, 2015\nNaN\n2025\n181cm\n70kg\n€198.9M\n17.0\nNaN\n\n\n4\n224232\nN. Barella\n25\nhttps://cdn.sofifa.net/players/224/232/23_60.png\nItaly\nhttps://cdn.sofifa.net/flags/it.png\n86\n89\nInter\nhttps://cdn.sofifa.net/teams/44/30.png\n...\nYes\nRCM\nSep 1, 2020\nNaN\n2026\n172cm\n68kg\n€154.4M\n23.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n17655\n269526\nDeng Xiongtao\n19\nhttps://cdn.sofifa.net/players/269/526/23_60.png\nChina PR\nhttps://cdn.sofifa.net/flags/cn.png\n48\n61\nMeizhou Hakka\nhttps://cdn.sofifa.net/teams/114628/30.png\n...\nNo\nRES\nApr 11, 2022\nNaN\n2027\n190cm\n78kg\n€218K\n35.0\nNaN\n\n\n17656\n267946\n22 Lim Jun Sub\n17\nhttps://cdn.sofifa.net/players/267/946/22_60.png\nKorea Republic\nhttps://cdn.sofifa.net/flags/kr.png\n48\n64\nJeju United FC\nhttps://cdn.sofifa.net/teams/1478/30.png\n...\nNo\nRES\nJan 1, 2022\nNaN\n2026\n195cm\n84kg\n€188K\n21.0\nNaN\n\n\n17657\n270567\nA. Demir\n25\nhttps://cdn.sofifa.net/players/270/567/23_60.png\nTurkey\nhttps://cdn.sofifa.net/flags/tr.png\n51\n56\nÜmraniyespor\nhttps://cdn.sofifa.net/teams/113796/30.png\n...\nNo\nRES\nJun 6, 2021\nNaN\n2023\n190cm\n82kg\n€142K\n12.0\nNaN\n\n\n17658\n256624\n21 S. Czajor\n18\nhttps://cdn.sofifa.net/players/256/624/21_60.png\nPoland\nhttps://cdn.sofifa.net/flags/pl.png\n50\n65\nFleetwood Town\nhttps://cdn.sofifa.net/teams/112260/30.png\n...\nNo\nRES\nJan 1, 2020\nNaN\n2021\n187cm\n79kg\n€214K\n40.0\nNaN\n\n\n17659\n256376\n21 F. Jakobsson\n20\nhttps://cdn.sofifa.net/players/256/376/21_60.png\nSweden\nhttps://cdn.sofifa.net/flags/se.png\n50\n61\nIFK Norrköping\nhttps://cdn.sofifa.net/teams/702/30.png\n...\nNo\nRES\nJan 8, 2020\nNaN\n2021\n186cm\n78kg\n€131K\n30.0\nNaN\n\n\n\n\n17660 rows × 29 columns\n\n\n\n\n개인의견: 이미 람다로 함수를 만들어야 해서 그냥 map을 쓰는게 자연스러움"
  },
  {
    "objectID": "posts/07wk-2.html#a.-intro",
    "href": "posts/07wk-2.html#a.-intro",
    "title": "07wk-2: Pandas – pivot_table, groupby+agg",
    "section": "A. intro",
    "text": "A. intro\n- 개념: 그룹화 \\(\\to\\) 집계\n# 예제1: 아래의 예제에서 (학과,성별)로 count의 합계를 구하라.\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1)\ndf\n\n\n\n\n\n\n\n\ndepartment\nresult\ngender\ncount\n\n\n\n\n0\nA\nfail\nmale\n314\n\n\n1\nA\nfail\nfemale\n19\n\n\n2\nA\npass\nmale\n511\n\n\n3\nA\npass\nfemale\n89\n\n\n4\nB\nfail\nmale\n208\n\n\n5\nB\nfail\nfemale\n7\n\n\n6\nB\npass\nmale\n352\n\n\n7\nB\npass\nfemale\n18\n\n\n8\nC\nfail\nmale\n204\n\n\n9\nC\nfail\nfemale\n391\n\n\n10\nC\npass\nmale\n121\n\n\n11\nC\npass\nfemale\n202\n\n\n12\nD\nfail\nmale\n279\n\n\n13\nD\nfail\nfemale\n244\n\n\n14\nD\npass\nmale\n138\n\n\n15\nD\npass\nfemale\n131\n\n\n16\nE\nfail\nmale\n137\n\n\n17\nE\nfail\nfemale\n299\n\n\n18\nE\npass\nmale\n54\n\n\n19\nE\npass\nfemale\n94\n\n\n20\nF\nfail\nmale\n149\n\n\n21\nF\nfail\nfemale\n103\n\n\n22\nF\npass\nmale\n224\n\n\n23\nF\npass\nfemale\n238\n\n\n\n\n\n\n\n\ndf.pivot_table(index=['department','gender'],values='count',aggfunc='sum')\n\n\n\n\n\n\n\n\n\ncount\n\n\ndepartment\ngender\n\n\n\n\n\nA\nfemale\n108\n\n\nmale\n825\n\n\nB\nfemale\n25\n\n\nmale\n560\n\n\nC\nfemale\n593\n\n\nmale\n325\n\n\nD\nfemale\n375\n\n\nmale\n417\n\n\nE\nfemale\n393\n\n\nmale\n191\n\n\nF\nfemale\n341\n\n\nmale\n373\n\n\n\n\n\n\n\n#\n- 예시에서 본 작업은 아래의 작업들로 세분화 할 수 있다.\n\n그룹화(쿼리): 하나의 dataframe을 sub-dataframe으로 나누는 과정 – 전체자료를 (학과,성별)로 묶어 총 10개의 sub-dataframe을 만듦\n각각집계(각각계산): 나누어진 sub-dataframe에서 어떠한 계산을 각각 수행함. – 나누어진 sub-dataframe에서 지원자수의 합계를 각각 구함\n\n- 위의 같은 작업을 하려면 아래와 같은 요소들이 필요하다.\n\n그룹변수1 – 그룹화를 위해 필요한 변수, dataframe을 sub-dataframe으로 나누는 역할.\n집계변수2 – 집계함수의 대상이 되는 변수.\n집계변수 – 그룹화된 데이터프레임에 수행하는 계산을 정의하는 함수.\n\n1 이건 없는 용어에요2 이것도 없는 용어에요"
  },
  {
    "objectID": "posts/07wk-2.html#b.-pivot_table의-문법",
    "href": "posts/07wk-2.html#b.-pivot_table의-문법",
    "title": "07wk-2: Pandas – pivot_table, groupby+agg",
    "section": "B. pivot_table의 문법",
    "text": "B. pivot_table의 문법\n- pivot_table의 문법\ndf.pivot_table(\n    index = 그룹변수\n    colums = 그룹변수 \n    values = 집계변수\n    aggfunc = 집계함수\n)\n- 그룹변수: string, 혹은 list of string 으로 전달한다.\n\n예시: ‘department’, [‘department’], [‘department’,‘gender’]\n\n- 집계변수: string, 혹은 list of string 으로 전달한다.\n\n예시: ‘CANCELLED’, [‘CANCELLED’], [‘CANCELLED’,‘AIR_TIME’]\n\n- 집계함수: 함수자체3를 전달하거나, 함수를 의미하는 문자열4, 혹은 그것들의 리스트형태로 전달한다.\n3 np.mean,sum4 ‘count’, ‘sum’, ‘mean’, ‘median’, ‘min’, ‘max’, ‘std’, ‘var’# 예시: 집계합수를 전달하는 방법\ndata\n\ndf = pd.DataFrame({'category':['A']*5+['B']*5, 'value':np.concatenate([np.random.randn(5), np.random.randn(5)+10])})\ndf\n\n\n\n\n\n\n\n\ncategory\nvalue\n\n\n\n\n0\nA\n-1.522629\n\n\n1\nA\n0.525883\n\n\n2\nA\n0.285563\n\n\n3\nA\n-1.219968\n\n\n4\nA\n1.523162\n\n\n5\nB\n9.942545\n\n\n6\nB\n10.811401\n\n\n7\nB\n9.817500\n\n\n8\nB\n10.062780\n\n\n9\nB\n11.450590\n\n\n\n\n\n\n\n방법1 – 함수자체를 전달\n\ndf.pivot_table(index=['category'],values='value',aggfunc=np.sum) # 함수자체\n\n/tmp/ipykernel_3437616/3923531937.py:1: FutureWarning: The provided callable &lt;function sum at 0x7f2bb810b1c0&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n  df.pivot_table(index=['category'],values='value',aggfunc=np.sum) # 함수자체\n\n\n\n\n\n\n\n\n\nvalue\n\n\ncategory\n\n\n\n\n\nA\n-0.407990\n\n\nB\n52.084817\n\n\n\n\n\n\n\n방법2 – 함수를 의미하는 문자열을 전달\n\ndf.pivot_table(index=['category'],values='value',aggfunc='sum')  # 리스트\n\n\n\n\n\n\n\n\nvalue\n\n\ncategory\n\n\n\n\n\nA\n-0.407990\n\n\nB\n52.084817\n\n\n\n\n\n\n\n방법3 – 리스트를 전달\n\ndf.pivot_table(\n    index=['category'],\n    values='value',\n    aggfunc=['sum','min',np.mean,np.max,'count']\n)\n\n/tmp/ipykernel_3437616/1880687379.py:1: FutureWarning: The provided callable &lt;function mean at 0x7f2bb8110670&gt; is currently using DataFrameGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n  df.pivot_table(\n/tmp/ipykernel_3437616/1880687379.py:1: FutureWarning: The provided callable &lt;function amax at 0x7f2bb810ba30&gt; is currently using DataFrameGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n  df.pivot_table(\n\n\n\n\n\n\n\n\n\nsum\nmin\nmean\namax\ncount\n\n\n\nvalue\nvalue\nvalue\nvalue\nvalue\n\n\ncategory\n\n\n\n\n\n\n\n\n\nA\n-0.407990\n-1.522629\n-0.081598\n1.523162\n5\n\n\nB\n52.084817\n9.817500\n10.416963\n11.450590\n5"
  },
  {
    "objectID": "posts/07wk-2.html#c.-groupby-aggregate-의-문법",
    "href": "posts/07wk-2.html#c.-groupby-aggregate-의-문법",
    "title": "07wk-2: Pandas – pivot_table, groupby+agg",
    "section": "C. groupby + aggregate 의 문법",
    "text": "C. groupby + aggregate 의 문법\n- groupby + aggregate 의 문법\ndf.groupby(그룹변수).aggregate({집계변수:집계함수})"
  },
  {
    "objectID": "posts/03wk-2.html#a.-열의-선택",
    "href": "posts/03wk-2.html#a.-열의-선택",
    "title": "03wk-2: Pandas – 행과 열의 선택",
    "section": "A. 열의 선택",
    "text": "A. 열의 선택\n- 방법1: df.? + str\n\n# df.X1\n\n- 방법2: df[?] + str, [str,str]\n\n# df['X1'] # str \n# df[['X1']] # [str]\n# df[['X1','X3']] # [str,str]\n\n- 방법3: df.iloc[:,?] + int, int:int, [int,int], [bool,bool], range\n\n# df.iloc[:,0] # int\n# df.iloc[:,-2:] # int:int - 슬라이싱\n# df.iloc[:,1::2] # int:int - 스트라이딩\n# df.iloc[:,[0]] # [int]\n# df.iloc[:,[0,1]] # [int,int]\n# df.iloc[:,[True,True,False,False]] # bool의 list \n# df.iloc[:,range(2)] # range\n\n- 방법4: df.loc[:,?] + str, ‘str:str’, [str,str], [bool,bool]\n\n# df.loc[:,'X1'] # str\n# df.loc[:,'X1':'X3'] # 'str':'str' -- 칼럼이름으로 슬라이싱 **\n# df.loc[:,'X1'::2] # 'str':'str' -- 칼럼이름으로 스트라이딩 ** \n# df.loc[:,['X1']] # [str]\n# df.loc[:,['X1','X4']] # [str,str]\n# df.loc[:,[True,False,False,True]] # bool의 list"
  },
  {
    "objectID": "posts/03wk-2.html#b.-행의-선택",
    "href": "posts/03wk-2.html#b.-행의-선택",
    "title": "03wk-2: Pandas – 행과 열의 선택",
    "section": "B. 행의 선택",
    "text": "B. 행의 선택\n- 방법1: df[] + int:int, str:str, [bool,bool], pd.Series([bool,bool]) – \\((\\star\\star\\star\\star\\star)\\)\n\n# df[:2] # int:int -- 슬라이싱 // df.iloc[:2,:], df.iloc[:2] 와 같음\n# df[::2] # int:int -- 스트라이딩 \n# ts['12/30':'01/02'] # str:str -- 슬라이싱\n# ts['12/31'::2] # str:str -- 스트라이딩\n# df[['12' in date for date in df.date]] # [bool,bool]\n# df[df.X1 &lt; 70] # pd.Series([bool,bool])\n\n- 방법2: df.iloc[], df.iloc[,:] + int, int:int, [int,int], [bool,bool], range\n\n# df.iloc[0] # int \n# df.iloc[-2:] # int:int -- 슬라이싱\n# df.iloc[1::2] # int:int -- 스트라이딩\n# df.iloc[[0]] # [int]\n# df.iloc[[0,1]] # [int,int]\n# df.iloc[['12' in date for date in df.date]] # [bool,bool]\n# df.iloc[range(2)] # range\n\n\n# df.iloc[0,:] # int \n# df.iloc[-2:,:] # int:int -- 슬라이싱\n# df.iloc[1::2,:] # int:int -- 스트라이딩\n# df.iloc[[0],:] # [int]\n# df.iloc[[0,1],:] # [int,int]\n# df.iloc[['12' in date for date in df.date],:] # [bool,bool]\n# df.iloc[range(2),:] # range\n\n- 방법3: df.loc[], df.loc[,:] + int, str, int:int, str:str, [int,int], [str,str], [bool,bool], pd.Series([bool,bool])\n\n# df.loc[0] # int \n# ts.loc['12/30'] # str \n# df.loc[:2] # int:int \n# ts.loc[:'01/02'] # str:str \n# df.loc[[0,1]] # [int,int]\n# ts.loc[['12/30','01/01']] # [str,str]\n# df.loc[['12' in date for date in df.date]] # [bool,bool]\n# df.loc[df.X1&gt;70] # pd.Series([bool,bool])"
  },
  {
    "objectID": "posts/03wk-2.html#d.-제-스타일",
    "href": "posts/03wk-2.html#d.-제-스타일",
    "title": "03wk-2: Pandas – 행과 열의 선택",
    "section": "D. 제 스타일",
    "text": "D. 제 스타일\n- 가장 안전한 코드\n\n# df.loc[:,:]\n\n- 상황1: 하나의 col을 뽑으려 할때 좋은 코드\n\n# df.X1 # 최애 \n# df['X1'] # 차애 \n# df[['X1']] # 차애\n\n- 상황2: row 슬라이싱을 할때 좋은 코드 \\((\\star\\star\\star)\\)\n\n# df[:5] # 최애 \n# ts[:'01/02'] # 시계열인 경우 \n\n- 상황3: 조건에 맞는 row를 뽑을때 좋은 코드\n\n# df[df.X1&lt;60] # 최애\n# df.loc[['12' in date for date in df.date]] # 차애\n\n- 상황4: 하나의 row를 뽑으려 할때 좋은 코드\n\n# df.iloc[0] # 최애 \n# df.loc[0] # 차애\n\n- 상황5: (row,col)을 뽑으려 할때 좋은 코드\n\n# 최애: pd.Series를 뽑고 -&gt; 인덱스로접근\n# df.X1[0]\n# df['X1'][0]\n\n# 차애: iloc, loc 으로 한번에 뽑기\n# df.iloc[0,0]\n# df.loc[0,'X1']\n\n위의 상황이외에는 df.loc[:,:]를 사용하는것이 유리하다\n- 상황6: column 슬라이싱을 할때\n\n# df.loc[:,'X1':'X3'] # 끝점포함\n\n- 상황7: row + column 슬라이싱을 하는 가장 좋은 코드\n\ndf.loc[::2,'X1':'X2']\n\n\n\n\n\n\n\n\nX1\nX2\n\n\n\n\n0\n65\n55\n\n\n2\n65\n90\n\n\n4\n80\n30\n\n\n\n\n\n\n\n- 상황8: 조건에 맞는 col을 뽑기에 가장 좋은 코드\n\n# df.loc[:,[len(colname)&gt;2 for colname in df.columns]]\n\n- 상황9: 조건에 맞는 row, col을 뽑기에 가장 좋은 코드\n\n# df.loc[df.X1&gt;70,[len(colname)&gt;2 for colname in df.columns]]"
  },
  {
    "objectID": "posts/03wk-2.html#d.-제-스타일-x",
    "href": "posts/03wk-2.html#d.-제-스타일-x",
    "title": "03wk-2: Pandas – 행과 열의 선택",
    "section": "D. 제 스타일 X",
    "text": "D. 제 스타일 X\n- 제가 안쓰는 코드1\n\ndf[:1]\n\n\n\n\n\n\n\n\ndate\nX1\nX2\nX3\nX4\n\n\n\n\n0\n12/30\n65\n55\n50\n40\n\n\n\n\n\n\n\n이러면 내 입장에서는 마치 아래가 동작할 것 같잖아..\n\ndf[0] \n\nKeyError: 0\n\n\n- 제가 안쓰는 코드2: bool의 list를 사용할때 iloc은 가급적 쓰지마세요\n\ndf.iloc[list(df['X1']&lt;80),:]\n\n\n\n\n\n\n\n\ndate\nX1\nX2\nX3\nX4\n\n\n\n\n0\n12/30\n65\n55\n50\n40\n\n\n2\n01/01\n65\n90\n60\n30\n\n\n3\n01/02\n55\n80\n75\n80\n\n\n\n\n\n\n\n이러면 마치 아래도 동작할 것 같잖아..\n\ndf.iloc[df['X1']&lt;80,:]\n\nNotImplementedError: iLocation based boolean indexing on an integer type is not available"
  },
  {
    "objectID": "posts/03wk-2.html#e.-요약",
    "href": "posts/03wk-2.html#e.-요약",
    "title": "03wk-2: Pandas – 행과 열의 선택",
    "section": "E. 요약",
    "text": "E. 요약\n- 알아두면 좋은 규칙\n\n.iloc[] 와 .iloc[,:]는 완전히 동등하다.\n.loc[] 와 .loc[,:]는 완전히 동등하다.\n결과를 pd.Series 형태가 아닌 pd.DataFrame 형태로 얻고 싶다면 [[?]]를 사용하면 된다.\n\n- 정리\n\nROWCOL\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype of indexer\n.\n[]\n.iloc\n.loc\n내가 쓴다면?\n\n\n\n\nint\nX\nX\nO\n\\(\\Delta\\)\ndf.iloc[3,:]\n\n\nint:int\nX\nO\nO\n\\(\\Delta\\)\ndf[3:5]\n\n\n[int,int]\nX\nX\nO\n\\(\\Delta\\)\ndf.iloc[idx,:]\n\n\nstr\nX\nX\nX\nO\nts.loc['time1',:]\n\n\nstr:str\nX\nO\nX\nO\nts.loc['time1':'time2',:]\n\n\n[str,str]\nX\nX\nX\nO\n안할 듯\n\n\n[bool,bool]\nX\nO\nO\nO\ndf[filtered_idx]\n\n\npd.Series([bool,bool])\nX\nO\nX\nO\ndf[df.X1&gt;20]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntype of indexer\n.\n[]\n.iloc\n.loc\n내가 쓴다면?\n\n\n\n\nint\nX\nX\nO\nX\ndf.iloc[:,0]\n\n\nint:int\nX\nX\nO\nX\ndf.iloc[:,0:2]\n\n\n[int,int]\nX\nX\nO\nX\ndf.iloc[:,idx]\n\n\nstr\nO\nO\nX\nO\ndf.loc[:,'X1']\n\n\nstr:str\nX\nX\nX\nO\ndf.loc[:,'X1':'X4']\n\n\n[str,str]\nX\nO\nX\nO\ndf.loc[:,colname_list]\n\n\n[bool,bool]\nX\nX\nO\nO\ndf.loc[:,bool_list]"
  },
  {
    "objectID": "posts/14wk-1.html#a.-깃헙계정-가입하기",
    "href": "posts/14wk-1.html#a.-깃헙계정-가입하기",
    "title": "14wk-1: Quarto – dashboards",
    "section": "A. 깃헙계정 가입하기",
    "text": "A. 깃헙계정 가입하기\n- https://github.com/"
  },
  {
    "objectID": "posts/14wk-1.html#b.-깃헙레포지토리",
    "href": "posts/14wk-1.html#b.-깃헙레포지토리",
    "title": "14wk-1: Quarto – dashboards",
    "section": "B. 깃헙레포지토리",
    "text": "B. 깃헙레포지토리\n- 깃헙 레포지토리 만들기"
  },
  {
    "objectID": "posts/14wk-1.html#c.-깃헙레포지토리와-서버컴퓨터의-연결",
    "href": "posts/14wk-1.html#c.-깃헙레포지토리와-서버컴퓨터의-연결",
    "title": "14wk-1: Quarto – dashboards",
    "section": "C. 깃헙레포지토리와 서버컴퓨터의 연결",
    "text": "C. 깃헙레포지토리와 서버컴퓨터의 연결\n- clone\ngit clone &lt;레포지토리주소&gt;\n파일들이 잘 있는지 확인\n- 토큰생성 및 저장\n아래의 주소로 접속하여\nhttps://github.com/settings/tokens\n토큰을 생성한다. 토큰이 생성되면 토큰을 복사한뒤 저장한다.\n- push\n레포지토리내의 README.md 파일을 수정해보고 아래를 입력\ngit add .\ngit commit -m .\ngit push \n이후에 유저이름 입력하고 비밀번호는 복사해둔 토큰을 사용한다. 깃헙에 제대로 업로드 되었는지 확인한다."
  },
  {
    "objectID": "posts/14wk-1.html#d.-배포",
    "href": "posts/14wk-1.html#d.-배포",
    "title": "14wk-1: Quarto – dashboards",
    "section": "D. 배포",
    "text": "D. 배포\nref: https://quarto.org/docs/dashboards/\nref: https://quarto.org/docs/publishing/github-pages.html\n- 클론한 레포지토리에서 _quarto.yml파일을 만들고 아래를 입력\n\n\n_quarto.yml\n\nproject:\n  type: website\n  output-dir: docs\n\n- 클론한 레포지토리에 Energy.qmd 파일을 생성하고 아래의 내용을 복사.\n\n\nEnergy.qmd\n\n---\ntitle: \"에너지사용량 자료 분석\"\nauthor: \"본인이름~\"\nformat: dashboard\nexecute: \n  enabled: true\n  cache: false\n  freeze: false\n  error: true\n---\n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nimport json\nimport requests\n\npd.options.plotting.backend = \"plotly\"\npio.templates.default = \"plotly_white\"\n\nglobal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)\nlocal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)\n#--#\nurl = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'\nprov = ['Seoul', 'Busan', 'Daegu', 'Incheon', \n        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', \n        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', \n        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', \n        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\ndf = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\\\n.assign(년도 = lambda df: df.년도.astype(int))\\\n.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\\\n.reset_index()\ndf_global = pd.DataFrame([l['properties'] for l in global_dict['features']])\ndf_local = pd.DataFrame([l['properties'] for l in local_dict['features']])\ndf_json = df_local.set_index('name')\\\n.rename(\n    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)&gt;3)}\n).reset_index()\\\n.drop(['base_year','name_eng'],axis=1)\\\n.rename({'name':'name_local','code':'code_local'},axis=1)\\\n.assign(code = lambda df: df['code_local'].str[:2])\\\n.merge(df_global.drop(['base_year','name_eng'],axis=1))\ndf_left = df.assign(\n    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})\n).assign(on = lambda df: df.시도 + '-' + df.지역)\ndf_right = df_json.assign(on = lambda df: df.name + '-' + df.name_local)\\\n.drop(['name_local','name'],axis=1)\ndf2 = df_left.merge(\n    df_right.set_index('on')\\\n    .rename({'인천광역시-남구':'인천광역시-미추홀구'})\\\n    .reset_index()\n).drop(['on'],axis=1)\n```\n\n# 데이터탐색\n\n```{python}\n#| title: 에너지사용량 자료 \nimport itables \nitables.show(df2,showIndex=False)\n```\n\n# 시각화 {orientation=\"columns\" scrolling=\"true\"}\n\n## Column {width=50%}\n\n```{python}\n#| title: 2018년도 전기사용량 (전국)\nfig = px.choropleth_mapbox(\n    geojson = local_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2.query('년도 == 2018'),\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    range_color = [0,200000],\n    center={\"lat\": 36, \"lon\": 127.5}, \n    zoom=6,\n)\nfig.show(config={'scrollZoom':False})\n```\n\n## Column {width=50%}\n\n```{python}\n#| title: 2018~2019년도 전기사용량 (서울)\nseoul_dict = local_dict.copy() \nseoul_dict['features'] = [l for l in seoul_dict['features'] if l['properties']['code'][:2] == '11']\nfig = px.choropleth_mapbox(\n    geojson = seoul_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2,\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    animation_frame= '년도',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    range_color = [0,400000],\n    center={\"lat\": 37.5642135, \"lon\": 127.0016985},\n    zoom=9,\n)\nfig.show(config={'scrollZoom':False})\n```\n\n```{python}\n#| title: 2018~2019년도 에너지사용량 (전국)\nfig = df2.drop(['code_local','code'],axis=1)\\\n.set_index(['년도','시도','지역','건물동수','연면적']).stack().reset_index()\\\n.rename({'level_5':'에너지종류', 0:'에너지사용량'},axis=1)\\\n.assign(에너지종류 = lambda df: df['에너지종류'].str.split('/').str[-1])\\\n.groupby(['년도','시도','에너지종류']).agg({'에너지사용량':'sum'})\\\n.stack().reset_index()\\\n.rename({0:'에너지사용량'},axis=1)\\\n.plot.area(\n    x='년도',y='에너지사용량',\n    color='시도',\n    facet_col='에너지종류'\n)\nfig.update_layout(\n    xaxis_domain=[0.0, 0.25],\n    xaxis2_domain=[0.35, 0.60],\n    xaxis3_domain=[0.70, 0.95]\n)\n```\n\n- 터미널에서 아래를 입력\nquarto render Energy.qmd \n- local에 docs폴더 밑에 어떠한 파일들이 생성됨. 클릭해서 확인. 이 파일들을 github으로 push\ngit add .\ngit commit -m .\ngit push \n- 아래와 같이 Settings &gt;Pages &gt; Build and deployment &gt; Branch 에서 경로를 main/docs로 변경하고 save"
  },
  {
    "objectID": "posts/07wk-1.html#a.-lambda-df-with-indexer",
    "href": "posts/07wk-1.html#a.-lambda-df-with-indexer",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "A. lambda df: with indexer",
    "text": "A. lambda df: with indexer\n- ref: https://pandas.pydata.org/docs/user_guide/indexing.html#indexing-callable\n예시1 : 표현1,2,3은 같은 문법이다.\n\ndf = pd.DataFrame({'A':[-1,np.nan,1,1],'B':[2,3,np.nan,4],'C':[np.nan,4,5,6]})\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n-1.0\n2.0\nNaN\n\n\n1\nNaN\n3.0\n4.0\n\n\n2\n1.0\nNaN\n5.0\n\n\n3\n1.0\n4.0\n6.0\n\n\n\n\n\n\n\n(표현1)\n\ndf[df.A.isna()]\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\nNaN\n3.0\n4.0\n\n\n\n\n\n\n\n(표현2)\n\ndf[(lambda _df: _df.A.isna())(df)]\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\nNaN\n3.0\n4.0\n\n\n\n\n\n\n\n(표현3)\n\ndf[lambda _df: _df.A.isna()] \n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\nNaN\n3.0\n4.0\n\n\n\n\n\n\n\n#\n예시2: 예시1의 (표현3)은 .loc, .iloc 에서도 가능함\n\ndf = pd.DataFrame({'A':[-1,np.nan,1,1],'B':[2,3,np.nan,4],'C':[np.nan,4,5,6]})\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n-1.0\n2.0\nNaN\n\n\n1\nNaN\n3.0\n4.0\n\n\n2\n1.0\nNaN\n5.0\n\n\n3\n1.0\n4.0\n6.0\n\n\n\n\n\n\n\n\ndf.loc[lambda _df: _df.A.isna(), :]\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\nNaN\n3.0\n4.0\n\n\n\n\n\n\n\n\ndf.iloc[lambda _df: list(_df.A.isna()), :]\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n1\nNaN\n3.0\n4.0\n\n\n\n\n\n\n\n\niloc은 True, False 형태로 이루어진 pd.Series가 들어올 경우 인덱싱이 불가능하므로 리스트로 바꿔줘야했었음..\n\n#\n예시3: 왜 이런 문법이 있을까? 연속적으로 dataFrame을 변화시킬 경우 유리한 테크닉\n\ndf = pd.DataFrame({'A':[-1,np.nan,1,1],'B':[2,3,np.nan,4],'C':[np.nan,4,5,6]})\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n-1.0\n2.0\nNaN\n\n\n1\nNaN\n3.0\n4.0\n\n\n2\n1.0\nNaN\n5.0\n\n\n3\n1.0\n4.0\n6.0\n\n\n\n\n\n\n\nstep1: D=A+B+C를 계산\n\ndf.assign(D=df.A+df.B+df.C)\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n-1.0\n2.0\nNaN\nNaN\n\n\n1\nNaN\n3.0\n4.0\nNaN\n\n\n2\n1.0\nNaN\n5.0\nNaN\n\n\n3\n1.0\n4.0\n6.0\n11.0\n\n\n\n\n\n\n\nstep2: 여기에서 결측치의 값이 50%가 넘는 열만 고르고 싶다면?\n\ndf.assign(D=df.A+df.B+df.C).loc[:,lambda _df: _df.isna().mean()&gt;0.5]\n\n\n\n\n\n\n\n\nD\n\n\n\n\n0\nNaN\n\n\n1\nNaN\n\n\n2\nNaN\n\n\n3\n11.0\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/07wk-1.html#b.-lambda-df-with-assign",
    "href": "posts/07wk-1.html#b.-lambda-df-with-assign",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "B. lambda df: with assign",
    "text": "B. lambda df: with assign\n예시1\n\ndf = pd.DataFrame({'A':[-1,np.nan,1,1],'B':[2,3,np.nan,4],'C':[np.nan,4,5,6]})\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n-1.0\n2.0\nNaN\n\n\n1\nNaN\n3.0\n4.0\n\n\n2\n1.0\nNaN\n5.0\n\n\n3\n1.0\n4.0\n6.0\n\n\n\n\n\n\n\nstep1: D=A+B+C\n\ndf.eval('D=A+B+C')\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\n0\n-1.0\n2.0\nNaN\nNaN\n\n\n1\nNaN\n3.0\n4.0\nNaN\n\n\n2\n1.0\nNaN\n5.0\nNaN\n\n\n3\n1.0\n4.0\n6.0\n11.0\n\n\n\n\n\n\n\nstep2: 여기에서 결측치의 값을 row-wise하게 count하여 새로운열 E에 할당하고 싶다면?\n\ndf.eval('D=A+B+C').assign(E = lambda _df: _df.isna().sum(axis=1))\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n0\n-1.0\n2.0\nNaN\nNaN\n2\n\n\n1\nNaN\n3.0\n4.0\nNaN\n2\n\n\n2\n1.0\nNaN\n5.0\nNaN\n2\n\n\n3\n1.0\n4.0\n6.0\n11.0\n0\n\n\n\n\n\n\n\n#\n예시2 – 원본데이터를 손상시키지 않으며 데이터를 변형하고 싶을때..\n\nnp.random.seed(43052)\ndf = pd.DataFrame({'A':[12,234,3456,12345,654222]})\ndf\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\n(풀이1) – 복사본생성 (실패)\nstep1: 복사본생성 (?)\n\ndf2 = df \n\n\ndf2\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\nstep2: B=log(A), C=(B-B.mean())/B.std()\n\ndf2['B'] = np.log(df2['A'])\n\n\ndf2\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n12\n2.484907\n\n\n1\n234\n5.455321\n\n\n2\n3456\n8.147867\n\n\n3\n12345\n9.421006\n\n\n4\n654222\n13.391202\n\n\n\n\n\n\n\n\ndf2['C']=(df2['B']-df2['B'].mean())/df2['B'].std()\ndf2\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n12\n2.484907\n-1.286574\n\n\n1\n234\n5.455321\n-0.564847\n\n\n2\n3456\n8.147867\n0.089367\n\n\n3\n12345\n9.421006\n0.398704\n\n\n4\n654222\n13.391202\n1.363350\n\n\n\n\n\n\n\n\ndf # 이게 왜 여기서 나오지?\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n12\n2.484907\n-1.286574\n\n\n1\n234\n5.455321\n-0.564847\n\n\n2\n3456\n8.147867\n0.089367\n\n\n3\n12345\n9.421006\n0.398704\n\n\n4\n654222\n13.391202\n1.363350\n\n\n\n\n\n\n\n(풀이2) – 복사본생성 (성공)\n\nnp.random.seed(43052)\ndf = pd.DataFrame({'A':[12,234,3456,12345,654222]})\ndf\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\nstep1: 복사본생성\n\ndf2 = df.copy()\n\n\ndf2\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\nstep2: B=log(A), C=(B-B.mean())/B.std()\n\ndf2['B'] = np.log(df2['A'])\n\n\ndf2\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n12\n2.484907\n\n\n1\n234\n5.455321\n\n\n2\n3456\n8.147867\n\n\n3\n12345\n9.421006\n\n\n4\n654222\n13.391202\n\n\n\n\n\n\n\n\ndf2['C']=(df2['B']-df2['B'].mean())/df2['B'].std()\ndf2\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n12\n2.484907\n-1.286574\n\n\n1\n234\n5.455321\n-0.564847\n\n\n2\n3456\n8.147867\n0.089367\n\n\n3\n12345\n9.421006\n0.398704\n\n\n4\n654222\n13.391202\n1.363350\n\n\n\n\n\n\n\n\ndf # 이게 왜 여기서 나오지?\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\n(풀이3) – assign + lambda df: 이용\n\nnp.random.seed(43052)\ndf = pd.DataFrame({'A':[12,234,3456,12345,654222]})\ndf\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\n\ndf.assign(B=np.log(df.A)).assign(C= lambda df: (df.B-df.B.mean())/df.B.std())\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n12\n2.484907\n-1.286574\n\n\n1\n234\n5.455321\n-0.564847\n\n\n2\n3456\n8.147867\n0.089367\n\n\n3\n12345\n9.421006\n0.398704\n\n\n4\n654222\n13.391202\n1.363350\n\n\n\n\n\n\n\n(풀이4) – eval 이용\n\nnp.random.seed(43052)\ndf = pd.DataFrame({'A':[12,234,3456,12345,654222]})\ndf\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n12\n\n\n1\n234\n\n\n2\n3456\n\n\n3\n12345\n\n\n4\n654222\n\n\n\n\n\n\n\n\ndf.eval('B= log(A)').eval('C= (B-B.mean())/(B.std())')\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n12\n2.484907\n-1.286574\n\n\n1\n234\n5.455321\n-0.564847\n\n\n2\n3456\n8.147867\n0.089367\n\n\n3\n12345\n9.421006\n0.398704\n\n\n4\n654222\n13.391202\n1.363350\n\n\n\n\n\n\n\nNote: eval이 가장 우수해보인다. 그렇지만 eval expression에 지원하는 함수는 한계가 있다. (sin,cos은 지원되는데 tan은 안된다든가..)\n\n_df = pd.DataFrame({'A':np.linspace(-1.5,1.5,100)})\n_df\n\n\n\n\n\n\n\n\nA\n\n\n\n\n0\n-1.500000\n\n\n1\n-1.469697\n\n\n2\n-1.439394\n\n\n3\n-1.409091\n\n\n4\n-1.378788\n\n\n...\n...\n\n\n95\n1.378788\n\n\n96\n1.409091\n\n\n97\n1.439394\n\n\n98\n1.469697\n\n\n99\n1.500000\n\n\n\n\n100 rows × 1 columns\n\n\n\n\nf = np.tan \n_df.eval('B=@f(A)').plot(y='B') # 그래서 이게 정석임.."
  },
  {
    "objectID": "posts/07wk-1.html#a.-원래-df-s는-딕셔너리-계열임",
    "href": "posts/07wk-1.html#a.-원래-df-s는-딕셔너리-계열임",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "A. 원래 df, s는 딕셔너리 계열임",
    "text": "A. 원래 df, s는 딕셔너리 계열임\n- 예시1: df는 dct에서 만들수 있음\n\ndct = {'A': [1,2,3],'B': [2,3,4]}\ndf = pd.DataFrame(dct)\ndf\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\n0\n1\n2\n\n\n1\n2\n3\n\n\n2\n3\n4\n\n\n\n\n\n\n\n\ndf['A']\n\n0    1\n1    2\n2    3\nName: A, dtype: int64\n\n\n- 예시2: s도 dct에서 만들수 있음\n\ndct = {'43052': 80, '43053': 90, '43054': 50}\ns = pd.Series(dct)\ns\n\n43052    80\n43053    90\n43054    50\ndtype: int64\n\n\n\ns['43052']\n\n80\n\n\n- 예시3: dict의 키로 올수 있는것들?\n\nref: https://guebin.github.io/PP2023/posts/01_PythonBasic/2023-03-29-4wk-2.html\n\n튜플로 dct를 만든다면?\n\ndct = {('43052',4): 80, ('43053',1): 90, ('43054',2): 50} # (학번,학년)\ns = pd.Series(dct)\ns\n\n43052  4    80\n43053  1    90\n43054  2    50\ndtype: int64\n\n\n\ndct[('43052',4)]\n\n80\n\n\n\ns[('43052',4)]\n\n80\n\n\n\ns.index\n\nMultiIndex([('43052', 4),\n            ('43053', 1),\n            ('43054', 2)],\n           )"
  },
  {
    "objectID": "posts/07wk-1.html#b.-.index-혹은-.columns에-name이-있는-경우",
    "href": "posts/07wk-1.html#b.-.index-혹은-.columns에-name이-있는-경우",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "B. .index 혹은 .columns에 name이 있는 경우",
    "text": "B. .index 혹은 .columns에 name이 있는 경우\n예시1: index에 이름이 있는 경우 ['id']\n\ndct = {'43052': 80, '43053': 90, '43054': 50}\ns = pd.Series(dct)\ns\n\n43052    80\n43053    90\n43054    50\ndtype: int64\n\n\n\ns.rename_axis(['id'])\n\nid\n43052    80\n43053    90\n43054    50\ndtype: int64\n\n\n\ns.index, s.rename_axis(['id']).index,\n\n(Index(['43052', '43053', '43054'], dtype='object'),\n Index(['43052', '43053', '43054'], dtype='object', name='id'))\n\n\n#\n예시2: index에 이름이 있는 경우 ['id','year']\n\ndct = {('43052',4): 80, ('43053',1): 90, ('43054',2): 50} # (학번,학년)\ns = pd.Series(dct)\ns.rename_axis(['id','year'])\n\nid     year\n43052  4       80\n43053  1       90\n43054  2       50\ndtype: int64\n\n\n\ns.index\n\nMultiIndex([('43052', 4),\n            ('43053', 1),\n            ('43054', 2)],\n           )\n\n\n\ns.rename_axis(['id','year']).index\n\nMultiIndex([('43052', 4),\n            ('43053', 1),\n            ('43054', 2)],\n           names=['id', 'year'])\n\n\n#\n\ndct = {('43052',4): 80, ('43053',1): 90, ('43054',2): 50} # (학번,학년)\ns = pd.Series(dct)\ns.rename_axis(['id','year'])\n\nid     year\n43052  4       80\n43053  1       90\n43054  2       50\ndtype: int64\n\n\n예시3: 예시2가 데이터프레임이라면 이렇게 보인다\n\ndct = {('43052',4): 80, ('43053',1): 90, ('43054',2): 50} # (학번,학년)\ns = pd.Series(dct)\ndf = pd.DataFrame(s.rename_axis(['id','year']))\ndf\n\n\n\n\n\n\n\n\n\n0\n\n\nid\nyear\n\n\n\n\n\n43052\n4\n80\n\n\n43053\n1\n90\n\n\n43054\n2\n50\n\n\n\n\n\n\n\n\ndf.columns\n\nRangeIndex(start=0, stop=1, step=1)\n\n\n\ndf.index\n\nMultiIndex([('43052', 4),\n            ('43053', 1),\n            ('43054', 2)],\n           names=['id', 'year'])\n\n\n#\n예시4: 심슨의 역설 – 전체\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1).pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\ndf\n\n/tmp/ipykernel_2417284/2316601964.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\nresult\nfail\npass\n\n\ngender\n\n\n\n\n\n\nfemale\n1063\n772\n\n\nmale\n1291\n1400\n\n\n\n\n\n\n\n\ndf.index,df.columns\n\n(Index(['female', 'male'], dtype='object', name='gender'),\n Index(['fail', 'pass'], dtype='object', name='result'))\n\n\n1열과 2열을 더하고 싶다면? 단순히 아래와 같이 하면 된다. (여기에서 gender,result는 각각 index 의 이름, columns의 이름일 뿐이므로 신경쓸 필요 없음)\n\ndf['fail']+df['pass']\n\ngender\nfemale    1835\nmale      2691\ndtype: int64\n\n\n#\n예시5: 심슨의 역설 – 학과별\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1).pivot_table(index=['gender','department'], columns='result',values='count',aggfunc=sum)\ndf \n\n/tmp/ipykernel_2417284/2434963071.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\n\nresult\nfail\npass\n\n\ngender\ndepartment\n\n\n\n\n\n\nfemale\nA\n19\n89\n\n\nB\n7\n18\n\n\nC\n391\n202\n\n\nD\n244\n131\n\n\nE\n299\n94\n\n\nF\n103\n238\n\n\nmale\nA\n314\n511\n\n\nB\n208\n352\n\n\nC\n204\n121\n\n\nD\n279\n138\n\n\nE\n137\n54\n\n\nF\n149\n224\n\n\n\n\n\n\n\n\ndf.index, df.columns\n\n(MultiIndex([('female', 'A'),\n             ('female', 'B'),\n             ('female', 'C'),\n             ('female', 'D'),\n             ('female', 'E'),\n             ('female', 'F'),\n             (  'male', 'A'),\n             (  'male', 'B'),\n             (  'male', 'C'),\n             (  'male', 'D'),\n             (  'male', 'E'),\n             (  'male', 'F')],\n            names=['gender', 'department']),\n Index(['fail', 'pass'], dtype='object', name='result'))\n\n\n학과별 합격률을 알고 싶다면?\n\ndf.assign(rate = df['pass']/df.sum(axis=1))\n\n\n\n\n\n\n\n\nresult\nfail\npass\nrate\n\n\ngender\ndepartment\n\n\n\n\n\n\n\nfemale\nA\n19\n89\n0.824074\n\n\nB\n7\n18\n0.720000\n\n\nC\n391\n202\n0.340641\n\n\nD\n244\n131\n0.349333\n\n\nE\n299\n94\n0.239186\n\n\nF\n103\n238\n0.697947\n\n\nmale\nA\n314\n511\n0.619394\n\n\nB\n208\n352\n0.628571\n\n\nC\n204\n121\n0.372308\n\n\nD\n279\n138\n0.330935\n\n\nE\n137\n54\n0.282723\n\n\nF\n149\n224\n0.600536\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/07wk-1.html#a.-tidydata의-개념",
    "href": "posts/07wk-1.html#a.-tidydata의-개념",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "A. tidydata의 개념",
    "text": "A. tidydata의 개념\n- 아래의 자료는 불리하다. (뭐가??)\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1).pivot_table(index=['gender','department'], columns='result',values='count',aggfunc=sum)\ndf \n\n/tmp/ipykernel_2417284/2434963071.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\n\nresult\nfail\npass\n\n\ngender\ndepartment\n\n\n\n\n\n\nfemale\nA\n19\n89\n\n\nB\n7\n18\n\n\nC\n391\n202\n\n\nD\n244\n131\n\n\nE\n299\n94\n\n\nF\n103\n238\n\n\nmale\nA\n314\n511\n\n\nB\n208\n352\n\n\nC\n204\n121\n\n\nD\n279\n138\n\n\nE\n137\n54\n\n\nF\n149\n224\n\n\n\n\n\n\n\n- 가정1: 만약에 A학과에 해당하는 결과만 뽑고 싶다면? –&gt; departmet가 column으로 있어야함..\n- 가정2: 이 데이터를 바탕으로 합격한사람만 bar plot을 그리고 싶다면? –&gt; department, gender, pass 가 column으로 있어야함..\n\ntidydata = df['pass'].reset_index()\n#---# \nfig = ggplot(tidydata)\ncol = geom_col(aes(x='department',y='pass',fill='gender'),position='dodge')\nfig + col\n\n\n\n\n\n\n\n\n- tidydata 정의: https://r4ds.had.co.nz/tidy-data.html\n\nEach variable must have its own column.\nEach observation must have its own row.\nEach value must have its own cell."
  },
  {
    "objectID": "posts/07wk-1.html#b.-tidydata가-아닌-예시",
    "href": "posts/07wk-1.html#b.-tidydata가-아닌-예시",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "B. tidydata가 아닌 예시",
    "text": "B. tidydata가 아닌 예시\n예시1 – MultiIndex 구조를 가지면 무조건 tidydata가 아니다.\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1).pivot_table(index=['gender','department'], columns='result',values='count',aggfunc=sum)\ndf \n\n/tmp/ipykernel_2417284/2434963071.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\n\nresult\nfail\npass\n\n\ngender\ndepartment\n\n\n\n\n\n\nfemale\nA\n19\n89\n\n\nB\n7\n18\n\n\nC\n391\n202\n\n\nD\n244\n131\n\n\nE\n299\n94\n\n\nF\n103\n238\n\n\nmale\nA\n314\n511\n\n\nB\n208\n352\n\n\nC\n204\n121\n\n\nD\n279\n138\n\n\nE\n137\n54\n\n\nF\n149\n224\n\n\n\n\n\n\n\n\n이건 tidydata가 아니고\n\n\ntidydata = df.stack().reset_index().rename({0:'applicant_count'},axis=1)\ntidydata \n\n\n\n\n\n\n\n\ngender\ndepartment\nresult\napplicant_count\n\n\n\n\n0\nfemale\nA\nfail\n19\n\n\n1\nfemale\nA\npass\n89\n\n\n2\nfemale\nB\nfail\n7\n\n\n3\nfemale\nB\npass\n18\n\n\n4\nfemale\nC\nfail\n391\n\n\n5\nfemale\nC\npass\n202\n\n\n6\nfemale\nD\nfail\n244\n\n\n7\nfemale\nD\npass\n131\n\n\n8\nfemale\nE\nfail\n299\n\n\n9\nfemale\nE\npass\n94\n\n\n10\nfemale\nF\nfail\n103\n\n\n11\nfemale\nF\npass\n238\n\n\n12\nmale\nA\nfail\n314\n\n\n13\nmale\nA\npass\n511\n\n\n14\nmale\nB\nfail\n208\n\n\n15\nmale\nB\npass\n352\n\n\n16\nmale\nC\nfail\n204\n\n\n17\nmale\nC\npass\n121\n\n\n18\nmale\nD\nfail\n279\n\n\n19\nmale\nD\npass\n138\n\n\n20\nmale\nE\nfail\n137\n\n\n21\nmale\nE\npass\n54\n\n\n22\nmale\nF\nfail\n149\n\n\n23\nmale\nF\npass\n224\n\n\n\n\n\n\n\n\n이것이 tidydata\n\n- 구분하는 방법1: 직관에 의한 설명\n\nquery쓰기 불편: 남성지원자만 뽑고 싶다면?, 학과A만 뽑고싶다면? 탈락한지원자만 뽑고싶다면? 학과A에서 탈락한 지원자만 뽑고싶다면??\n시각화하기 불편:\n하여튼 다루기 불편해..\n\n- 구분하는 방법2: 정의에 의한 설명\n\ndf는 원칙 1에 위배된다. (왜냐하면 gender, department,result,applicant_count에 해당하는 변수는 하나의 컬럼을 차지하지 못함)\ndf는 원칙 2에 위배된다. (왜냐하면 하나의 행에 2개의 applicant_count observation이 존재함)\n\n#\n예시2 – 아래의 자료는 tidydata가 아니다.\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1).pivot_table(index='gender', columns='result', values='count', aggfunc=sum)\\\n.assign(pass_fail = lambda df: list(map(lambda x,y: (y,x),df['fail'],df['pass']))).drop(['fail','pass'],axis=1).reset_index()\ndf\n\n/tmp/ipykernel_2278789/2865855793.py:1: FutureWarning: The provided callable &lt;built-in function sum&gt; is currently using DataFrameGroupBy.sum. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"sum\" instead.\n\n\n\n\n\n\n\n\nresult\ngender\npass_fail\n\n\n\n\n0\nfemale\n(772, 1063)\n\n\n1\nmale\n(1400, 1291)\n\n\n\n\n\n\n\n\n이 df는 원칙 3에 위배된다.\n\n#\n# 예시3 – wide df\n\ndf=pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/phone.csv')\ndf\n\n\n\n\n\n\n\n\nDate\nSamsung\nApple\nHuawei\nXiaomi\nOppo\nMobicel\nMotorola\nLG\nOthers\nRealme\nGoogle\nNokia\nLenovo\nOnePlus\nSony\nAsus\n\n\n\n\n0\n2019-10\n461\n324\n136\n109\n76\n81\n43\n37\n135\n28\n39\n14\n22\n17\n20\n17\n\n\n1\n2019-11\n461\n358\n167\n141\n86\n61\n29\n36\n141\n27\n29\n20\n23\n10\n19\n27\n\n\n2\n2019-12\n426\n383\n143\n105\n53\n45\n51\n48\n129\n30\n20\n26\n28\n18\n18\n19\n\n\n3\n2020-01\n677\n494\n212\n187\n110\n79\n65\n49\n158\n23\n13\n19\n19\n22\n27\n22\n\n\n4\n2020-02\n593\n520\n217\n195\n112\n67\n62\n71\n157\n25\n18\n16\n24\n18\n23\n20\n\n\n5\n2020-03\n637\n537\n246\n187\n92\n66\n59\n67\n145\n21\n16\n24\n18\n31\n22\n14\n\n\n6\n2020-04\n647\n583\n222\n154\n98\n59\n48\n64\n113\n20\n23\n25\n19\n19\n23\n21\n\n\n7\n2020-05\n629\n518\n192\n176\n91\n87\n50\n66\n150\n43\n27\n15\n18\n19\n19\n13\n\n\n8\n2020-06\n663\n552\n209\n185\n93\n69\n54\n60\n140\n39\n16\n16\n17\n29\n25\n16\n\n\n9\n2020-07\n599\n471\n214\n193\n89\n78\n65\n59\n130\n40\n27\n25\n21\n18\n18\n12\n\n\n10\n2020-08\n615\n567\n204\n182\n105\n82\n62\n42\n129\n47\n16\n23\n21\n27\n23\n20\n\n\n11\n2020-09\n621\n481\n230\n220\n102\n88\n56\n49\n143\n54\n14\n15\n17\n15\n19\n15\n\n\n12\n2020-10\n637\n555\n232\n203\n90\n52\n63\n49\n140\n33\n17\n20\n22\n9\n22\n21\n\n\n\n\n\n\n\n\n이건 tidydata 가 아니고\n\n\ntidydata = df.melt(id_vars='Date').assign(Date = lambda _df: _df.Date.apply(pd.to_datetime))\ntidydata\n\n\n\n\n\n\n\n\nDate\nvariable\nvalue\n\n\n\n\n0\n2019-10-01\nSamsung\n461\n\n\n1\n2019-11-01\nSamsung\n461\n\n\n2\n2019-12-01\nSamsung\n426\n\n\n3\n2020-01-01\nSamsung\n677\n\n\n4\n2020-02-01\nSamsung\n593\n\n\n...\n...\n...\n...\n\n\n203\n2020-06-01\nAsus\n16\n\n\n204\n2020-07-01\nAsus\n12\n\n\n205\n2020-08-01\nAsus\n20\n\n\n206\n2020-09-01\nAsus\n15\n\n\n207\n2020-10-01\nAsus\n21\n\n\n\n\n208 rows × 3 columns\n\n\n\n\n이건 tidydata 이다.\n\n- df를 가지고 아래와 같은 그림을 그릴 수 있겠어?\n\nfig = ggplot(tidydata)\nline = geom_line(aes(x='Date',y='value',color='variable'))\nfig + line"
  },
  {
    "objectID": "posts/07wk-1.html#a.-reset_index",
    "href": "posts/07wk-1.html#a.-reset_index",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "A. reset_index()",
    "text": "A. reset_index()\n\n중첩구조를 가지는 series일 경우 .reset_index()를 사용하면 쉽게 tidydata를 얻을 수 있다.\n\n- 예시1\n\ndct = {'43052': 80, '43053': 90, '43054': 50}\ns = pd.Series(dct)\ns\n\n43052    80\n43053    90\n43054    50\ndtype: int64\n\n\n\ns.reset_index()\n\n\n\n\n\n\n\n\nindex\n0\n\n\n\n\n0\n43052\n80\n\n\n1\n43053\n90\n\n\n2\n43054\n50\n\n\n\n\n\n\n\n- 예시2\n\ndct = {('43052',4): 80, ('43053',1): 90, ('43054',2): 50} # (학번,학년)\ns = pd.Series(dct)\ns\n\n43052  4    80\n43053  1    90\n43054  2    50\ndtype: int64\n\n\n\ns.reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\n0\n\n\n\n\n0\n43052\n4\n80\n\n\n1\n43053\n1\n90\n\n\n2\n43054\n2\n50\n\n\n\n\n\n\n\n- 예시3\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1]).stack().stack()\ndf\n\nA  fail  male      314\n         female     19\n   pass  male      511\n         female     89\nB  fail  male      208\n         female      7\n   pass  male      352\n         female     18\nC  fail  male      204\n         female    391\n   pass  male      121\n         female    202\nD  fail  male      279\n         female    244\n   pass  male      138\n         female    131\nE  fail  male      137\n         female    299\n   pass  male       54\n         female     94\nF  fail  male      149\n         female    103\n   pass  male      224\n         female    238\ndtype: int64\n\n\n\ndf.reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\nlevel_2\n0\n\n\n\n\n0\nA\nfail\nmale\n314\n\n\n1\nA\nfail\nfemale\n19\n\n\n2\nA\npass\nmale\n511\n\n\n3\nA\npass\nfemale\n89\n\n\n4\nB\nfail\nmale\n208\n\n\n5\nB\nfail\nfemale\n7\n\n\n6\nB\npass\nmale\n352\n\n\n7\nB\npass\nfemale\n18\n\n\n8\nC\nfail\nmale\n204\n\n\n9\nC\nfail\nfemale\n391\n\n\n10\nC\npass\nmale\n121\n\n\n11\nC\npass\nfemale\n202\n\n\n12\nD\nfail\nmale\n279\n\n\n13\nD\nfail\nfemale\n244\n\n\n14\nD\npass\nmale\n138\n\n\n15\nD\npass\nfemale\n131\n\n\n16\nE\nfail\nmale\n137\n\n\n17\nE\nfail\nfemale\n299\n\n\n18\nE\npass\nmale\n54\n\n\n19\nE\npass\nfemale\n94\n\n\n20\nF\nfail\nmale\n149\n\n\n21\nF\nfail\nfemale\n103\n\n\n22\nF\npass\nmale\n224\n\n\n23\nF\npass\nfemale\n238\n\n\n\n\n\n\n\n- 예시4 – .reset_index() 는 말그대로 index를 reset 하는 명령어, 꼭 pd.Series에만 쓰는건 아니다.\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1]).stack()\ndf\n\n\n\n\n\n\n\n\n\nmale\nfemale\n\n\n\n\nA\nfail\n314\n19\n\n\npass\n511\n89\n\n\nB\nfail\n208\n7\n\n\npass\n352\n18\n\n\nC\nfail\n204\n391\n\n\npass\n121\n202\n\n\nD\nfail\n279\n244\n\n\npass\n138\n131\n\n\nE\nfail\n137\n299\n\n\npass\n54\n94\n\n\nF\nfail\n149\n103\n\n\npass\n224\n238\n\n\n\n\n\n\n\n\ndf.reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\nmale\nfemale\n\n\n\n\n0\nA\nfail\n314\n19\n\n\n1\nA\npass\n511\n89\n\n\n2\nB\nfail\n208\n7\n\n\n3\nB\npass\n352\n18\n\n\n4\nC\nfail\n204\n391\n\n\n5\nC\npass\n121\n202\n\n\n6\nD\nfail\n279\n244\n\n\n7\nD\npass\n138\n131\n\n\n8\nE\nfail\n137\n299\n\n\n9\nE\npass\n54\n94\n\n\n10\nF\nfail\n149\n103\n\n\n11\nF\npass\n224\n238"
  },
  {
    "objectID": "posts/07wk-1.html#b.-melt",
    "href": "posts/07wk-1.html#b.-melt",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "B. melt()",
    "text": "B. melt()\n# 예시1: 아래의 자료를 tidydata로 만들라.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/phone.csv')\ndf\n\n\n\n\n\n\n\n\nDate\nSamsung\nApple\nHuawei\nXiaomi\nOppo\nMobicel\nMotorola\nLG\nOthers\nRealme\nGoogle\nNokia\nLenovo\nOnePlus\nSony\nAsus\n\n\n\n\n0\n2019-10\n461\n324\n136\n109\n76\n81\n43\n37\n135\n28\n39\n14\n22\n17\n20\n17\n\n\n1\n2019-11\n461\n358\n167\n141\n86\n61\n29\n36\n141\n27\n29\n20\n23\n10\n19\n27\n\n\n2\n2019-12\n426\n383\n143\n105\n53\n45\n51\n48\n129\n30\n20\n26\n28\n18\n18\n19\n\n\n3\n2020-01\n677\n494\n212\n187\n110\n79\n65\n49\n158\n23\n13\n19\n19\n22\n27\n22\n\n\n4\n2020-02\n593\n520\n217\n195\n112\n67\n62\n71\n157\n25\n18\n16\n24\n18\n23\n20\n\n\n5\n2020-03\n637\n537\n246\n187\n92\n66\n59\n67\n145\n21\n16\n24\n18\n31\n22\n14\n\n\n6\n2020-04\n647\n583\n222\n154\n98\n59\n48\n64\n113\n20\n23\n25\n19\n19\n23\n21\n\n\n7\n2020-05\n629\n518\n192\n176\n91\n87\n50\n66\n150\n43\n27\n15\n18\n19\n19\n13\n\n\n8\n2020-06\n663\n552\n209\n185\n93\n69\n54\n60\n140\n39\n16\n16\n17\n29\n25\n16\n\n\n9\n2020-07\n599\n471\n214\n193\n89\n78\n65\n59\n130\n40\n27\n25\n21\n18\n18\n12\n\n\n10\n2020-08\n615\n567\n204\n182\n105\n82\n62\n42\n129\n47\n16\n23\n21\n27\n23\n20\n\n\n11\n2020-09\n621\n481\n230\n220\n102\n88\n56\n49\n143\n54\n14\n15\n17\n15\n19\n15\n\n\n12\n2020-10\n637\n555\n232\n203\n90\n52\n63\n49\n140\n33\n17\n20\n22\n9\n22\n21\n\n\n\n\n\n\n\n(풀이1) .melt() – 실패\n\ndf.melt()\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nDate\n2019-10\n\n\n1\nDate\n2019-11\n\n\n2\nDate\n2019-12\n\n\n3\nDate\n2020-01\n\n\n4\nDate\n2020-02\n\n\n...\n...\n...\n\n\n216\nAsus\n16\n\n\n217\nAsus\n12\n\n\n218\nAsus\n20\n\n\n219\nAsus\n15\n\n\n220\nAsus\n21\n\n\n\n\n221 rows × 2 columns\n\n\n\n(풀이2) .melt(id_vars=) – 성공\n\ndf.melt(id_vars='Date')\n\n\n\n\n\n\n\n\nDate\nvariable\nvalue\n\n\n\n\n0\n2019-10\nSamsung\n461\n\n\n1\n2019-11\nSamsung\n461\n\n\n2\n2019-12\nSamsung\n426\n\n\n3\n2020-01\nSamsung\n677\n\n\n4\n2020-02\nSamsung\n593\n\n\n...\n...\n...\n...\n\n\n203\n2020-06\nAsus\n16\n\n\n204\n2020-07\nAsus\n12\n\n\n205\n2020-08\nAsus\n20\n\n\n206\n2020-09\nAsus\n15\n\n\n207\n2020-10\nAsus\n21\n\n\n\n\n208 rows × 3 columns\n\n\n\n#"
  },
  {
    "objectID": "posts/07wk-1.html#c.-stack-reset_index",
    "href": "posts/07wk-1.html#c.-stack-reset_index",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "C. stack() + reset_index()",
    "text": "C. stack() + reset_index()\n\n제 최애테크닉: DataFrame을 MultiIndex를 가지는 Series로 “일부러” 변환하고 reset_index()를 시킴\n\n# 예시1: 아래의 자료를 tidydata로 만들라.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/phone.csv')\ndf\n\n\n\n\n\n\n\n\nDate\nSamsung\nApple\nHuawei\nXiaomi\nOppo\nMobicel\nMotorola\nLG\nOthers\nRealme\nGoogle\nNokia\nLenovo\nOnePlus\nSony\nAsus\n\n\n\n\n0\n2019-10\n461\n324\n136\n109\n76\n81\n43\n37\n135\n28\n39\n14\n22\n17\n20\n17\n\n\n1\n2019-11\n461\n358\n167\n141\n86\n61\n29\n36\n141\n27\n29\n20\n23\n10\n19\n27\n\n\n2\n2019-12\n426\n383\n143\n105\n53\n45\n51\n48\n129\n30\n20\n26\n28\n18\n18\n19\n\n\n3\n2020-01\n677\n494\n212\n187\n110\n79\n65\n49\n158\n23\n13\n19\n19\n22\n27\n22\n\n\n4\n2020-02\n593\n520\n217\n195\n112\n67\n62\n71\n157\n25\n18\n16\n24\n18\n23\n20\n\n\n5\n2020-03\n637\n537\n246\n187\n92\n66\n59\n67\n145\n21\n16\n24\n18\n31\n22\n14\n\n\n6\n2020-04\n647\n583\n222\n154\n98\n59\n48\n64\n113\n20\n23\n25\n19\n19\n23\n21\n\n\n7\n2020-05\n629\n518\n192\n176\n91\n87\n50\n66\n150\n43\n27\n15\n18\n19\n19\n13\n\n\n8\n2020-06\n663\n552\n209\n185\n93\n69\n54\n60\n140\n39\n16\n16\n17\n29\n25\n16\n\n\n9\n2020-07\n599\n471\n214\n193\n89\n78\n65\n59\n130\n40\n27\n25\n21\n18\n18\n12\n\n\n10\n2020-08\n615\n567\n204\n182\n105\n82\n62\n42\n129\n47\n16\n23\n21\n27\n23\n20\n\n\n11\n2020-09\n621\n481\n230\n220\n102\n88\n56\n49\n143\n54\n14\n15\n17\n15\n19\n15\n\n\n12\n2020-10\n637\n555\n232\n203\n90\n52\n63\n49\n140\n33\n17\n20\n22\n9\n22\n21\n\n\n\n\n\n\n\n\ndf.set_index('Date').stack().reset_index()\n\n\n\n\n\n\n\n\nDate\nlevel_1\n0\n\n\n\n\n0\n2019-10\nSamsung\n461\n\n\n1\n2019-10\nApple\n324\n\n\n2\n2019-10\nHuawei\n136\n\n\n3\n2019-10\nXiaomi\n109\n\n\n4\n2019-10\nOppo\n76\n\n\n...\n...\n...\n...\n\n\n203\n2020-10\nNokia\n20\n\n\n204\n2020-10\nLenovo\n22\n\n\n205\n2020-10\nOnePlus\n9\n\n\n206\n2020-10\nSony\n22\n\n\n207\n2020-10\nAsus\n21\n\n\n\n\n208 rows × 3 columns\n\n\n\n#\n# 예시2: 아래의 자료를 tidydata로 만들어라.\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\ndf\n\n\n\n\n\n\n\n\nmale\nfemale\n\n\n\nfail\npass\nfail\npass\n\n\n\n\nA\n314\n511\n19\n89\n\n\nB\n208\n352\n7\n18\n\n\nC\n204\n121\n391\n202\n\n\nD\n279\n138\n244\n131\n\n\nE\n137\n54\n299\n94\n\n\nF\n149\n224\n103\n238\n\n\n\n\n\n\n\n\ndf.stack().stack().reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\nlevel_2\n0\n\n\n\n\n0\nA\nfail\nmale\n314\n\n\n1\nA\nfail\nfemale\n19\n\n\n2\nA\npass\nmale\n511\n\n\n3\nA\npass\nfemale\n89\n\n\n4\nB\nfail\nmale\n208\n\n\n5\nB\nfail\nfemale\n7\n\n\n6\nB\npass\nmale\n352\n\n\n7\nB\npass\nfemale\n18\n\n\n8\nC\nfail\nmale\n204\n\n\n9\nC\nfail\nfemale\n391\n\n\n10\nC\npass\nmale\n121\n\n\n11\nC\npass\nfemale\n202\n\n\n12\nD\nfail\nmale\n279\n\n\n13\nD\nfail\nfemale\n244\n\n\n14\nD\npass\nmale\n138\n\n\n15\nD\npass\nfemale\n131\n\n\n16\nE\nfail\nmale\n137\n\n\n17\nE\nfail\nfemale\n299\n\n\n18\nE\npass\nmale\n54\n\n\n19\nE\npass\nfemale\n94\n\n\n20\nF\nfail\nmale\n149\n\n\n21\nF\nfail\nfemale\n103\n\n\n22\nF\npass\nmale\n224\n\n\n23\nF\npass\nfemale\n238\n\n\n\n\n\n\n\n#"
  },
  {
    "objectID": "posts/07wk-1.html#d.-unstack-reset_index",
    "href": "posts/07wk-1.html#d.-unstack-reset_index",
    "title": "07wk-1: Pandas – lambda df:의 활용, MultiIndex의 이해, tidydata의 이해, melt/stack",
    "section": "D. unstack() + reset_index()",
    "text": "D. unstack() + reset_index()\n# 예시1 – .stack()과 .unstack()은 반대연산\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/flights.csv')\\\n.groupby([\"AIRLINE\",\"WEEKDAY\"]).agg({\"CANCELLED\":[np.mean,\"count\"],\"DIVERTED\":[np.mean,\"count\"]})\ndf\n\n/tmp/ipykernel_2417284/3693914824.py:2: FutureWarning: The provided callable &lt;function mean at 0x7fbb9032c310&gt; is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n/tmp/ipykernel_2417284/3693914824.py:2: FutureWarning: The provided callable &lt;function mean at 0x7fbb9032c310&gt; is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n\n\n\n\n\n\n\n\n\n\nCANCELLED\nDIVERTED\n\n\n\n\nmean\ncount\nmean\ncount\n\n\nAIRLINE\nWEEKDAY\n\n\n\n\n\n\n\n\nAA\n1\n0.032106\n1277\n0.004699\n1277\n\n\n2\n0.007341\n1226\n0.001631\n1226\n\n\n3\n0.011949\n1339\n0.001494\n1339\n\n\n4\n0.015004\n1333\n0.003751\n1333\n\n\n5\n0.014151\n1272\n0.000786\n1272\n\n\n...\n...\n...\n...\n...\n...\n\n\nWN\n3\n0.014118\n1275\n0.001569\n1275\n\n\n4\n0.007911\n1264\n0.003165\n1264\n\n\n5\n0.005828\n1201\n0.000000\n1201\n\n\n6\n0.010132\n987\n0.003040\n987\n\n\n7\n0.006066\n1154\n0.002600\n1154\n\n\n\n\n98 rows × 4 columns\n\n\n\n\ndf.stack().unstack()\n\n\n\n\n\n\n\n\n\nCANCELLED\nDIVERTED\n\n\n\n\nmean\ncount\nmean\ncount\n\n\nAIRLINE\nWEEKDAY\n\n\n\n\n\n\n\n\nAA\n1\n0.032106\n1277.0\n0.004699\n1277.0\n\n\n2\n0.007341\n1226.0\n0.001631\n1226.0\n\n\n3\n0.011949\n1339.0\n0.001494\n1339.0\n\n\n4\n0.015004\n1333.0\n0.003751\n1333.0\n\n\n5\n0.014151\n1272.0\n0.000786\n1272.0\n\n\n...\n...\n...\n...\n...\n...\n\n\nWN\n3\n0.014118\n1275.0\n0.001569\n1275.0\n\n\n4\n0.007911\n1264.0\n0.003165\n1264.0\n\n\n5\n0.005828\n1201.0\n0.000000\n1201.0\n\n\n6\n0.010132\n987.0\n0.003040\n987.0\n\n\n7\n0.006066\n1154.0\n0.002600\n1154.0\n\n\n\n\n98 rows × 4 columns\n\n\n\n#\n# 예시2 – 아래의 자료를 tidydata로 만들라.\n\ndf=pd.read_csv('https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook/master/data/flights.csv')\\\n.groupby([\"AIRLINE\",\"WEEKDAY\"]).agg({\"CANCELLED\":[np.mean,\"count\"],\"DIVERTED\":[np.mean,\"count\"]})\ndf\n\n/tmp/ipykernel_2417284/3693914824.py:2: FutureWarning: The provided callable &lt;function mean at 0x7fbb9032c310&gt; is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n/tmp/ipykernel_2417284/3693914824.py:2: FutureWarning: The provided callable &lt;function mean at 0x7fbb9032c310&gt; is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n\n\n\n\n\n\n\n\n\n\nCANCELLED\nDIVERTED\n\n\n\n\nmean\ncount\nmean\ncount\n\n\nAIRLINE\nWEEKDAY\n\n\n\n\n\n\n\n\nAA\n1\n0.032106\n1277\n0.004699\n1277\n\n\n2\n0.007341\n1226\n0.001631\n1226\n\n\n3\n0.011949\n1339\n0.001494\n1339\n\n\n4\n0.015004\n1333\n0.003751\n1333\n\n\n5\n0.014151\n1272\n0.000786\n1272\n\n\n...\n...\n...\n...\n...\n...\n\n\nWN\n3\n0.014118\n1275\n0.001569\n1275\n\n\n4\n0.007911\n1264\n0.003165\n1264\n\n\n5\n0.005828\n1201\n0.000000\n1201\n\n\n6\n0.010132\n987\n0.003040\n987\n\n\n7\n0.006066\n1154\n0.002600\n1154\n\n\n\n\n98 rows × 4 columns\n\n\n\n(풀이1) – stack 2번\n\ndf.stack().stack().reset_index()\n\n\n\n\n\n\n\n\nAIRLINE\nWEEKDAY\nlevel_2\nlevel_3\n0\n\n\n\n\n0\nAA\n1\nmean\nCANCELLED\n0.032106\n\n\n1\nAA\n1\nmean\nDIVERTED\n0.004699\n\n\n2\nAA\n1\ncount\nCANCELLED\n1277.000000\n\n\n3\nAA\n1\ncount\nDIVERTED\n1277.000000\n\n\n4\nAA\n2\nmean\nCANCELLED\n0.007341\n\n\n...\n...\n...\n...\n...\n...\n\n\n387\nWN\n6\ncount\nDIVERTED\n987.000000\n\n\n388\nWN\n7\nmean\nCANCELLED\n0.006066\n\n\n389\nWN\n7\nmean\nDIVERTED\n0.002600\n\n\n390\nWN\n7\ncount\nCANCELLED\n1154.000000\n\n\n391\nWN\n7\ncount\nDIVERTED\n1154.000000\n\n\n\n\n392 rows × 5 columns\n\n\n\n(풀이2) – unstack 2번\n\ndf.unstack().unstack().reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\nWEEKDAY\nAIRLINE\n0\n\n\n\n\n0\nCANCELLED\nmean\n1\nAA\n0.032106\n\n\n1\nCANCELLED\nmean\n1\nAS\n0.000000\n\n\n2\nCANCELLED\nmean\n1\nB6\n0.000000\n\n\n3\nCANCELLED\nmean\n1\nDL\n0.006068\n\n\n4\nCANCELLED\nmean\n1\nEV\n0.034130\n\n\n...\n...\n...\n...\n...\n...\n\n\n387\nDIVERTED\ncount\n7\nOO\n924.000000\n\n\n388\nDIVERTED\ncount\n7\nUA\n1038.000000\n\n\n389\nDIVERTED\ncount\n7\nUS\n263.000000\n\n\n390\nDIVERTED\ncount\n7\nVX\n135.000000\n\n\n391\nDIVERTED\ncount\n7\nWN\n1154.000000\n\n\n\n\n392 rows × 5 columns\n\n\n\n예시3 – 아래의 자료를 tidydata로 만들어라.\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\ndf\n\n\n\n\n\n\n\n\nmale\nfemale\n\n\n\nfail\npass\nfail\npass\n\n\n\n\nA\n314\n511\n19\n89\n\n\nB\n208\n352\n7\n18\n\n\nC\n204\n121\n391\n202\n\n\nD\n279\n138\n244\n131\n\n\nE\n137\n54\n299\n94\n\n\nF\n149\n224\n103\n238\n\n\n\n\n\n\n\n(풀이1) – stack 2번\n\ndf.stack().stack().reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\nlevel_2\n0\n\n\n\n\n0\nA\nfail\nmale\n314\n\n\n1\nA\nfail\nfemale\n19\n\n\n2\nA\npass\nmale\n511\n\n\n3\nA\npass\nfemale\n89\n\n\n4\nB\nfail\nmale\n208\n\n\n5\nB\nfail\nfemale\n7\n\n\n6\nB\npass\nmale\n352\n\n\n7\nB\npass\nfemale\n18\n\n\n8\nC\nfail\nmale\n204\n\n\n9\nC\nfail\nfemale\n391\n\n\n10\nC\npass\nmale\n121\n\n\n11\nC\npass\nfemale\n202\n\n\n12\nD\nfail\nmale\n279\n\n\n13\nD\nfail\nfemale\n244\n\n\n14\nD\npass\nmale\n138\n\n\n15\nD\npass\nfemale\n131\n\n\n16\nE\nfail\nmale\n137\n\n\n17\nE\nfail\nfemale\n299\n\n\n18\nE\npass\nmale\n54\n\n\n19\nE\npass\nfemale\n94\n\n\n20\nF\nfail\nmale\n149\n\n\n21\nF\nfail\nfemale\n103\n\n\n22\nF\npass\nmale\n224\n\n\n23\nF\npass\nfemale\n238\n\n\n\n\n\n\n\n(풀이2) – unstack 1번\n\ndf.unstack().reset_index()\n\n\n\n\n\n\n\n\nlevel_0\nlevel_1\nlevel_2\n0\n\n\n\n\n0\nmale\nfail\nA\n314\n\n\n1\nmale\nfail\nB\n208\n\n\n2\nmale\nfail\nC\n204\n\n\n3\nmale\nfail\nD\n279\n\n\n4\nmale\nfail\nE\n137\n\n\n5\nmale\nfail\nF\n149\n\n\n6\nmale\npass\nA\n511\n\n\n7\nmale\npass\nB\n352\n\n\n8\nmale\npass\nC\n121\n\n\n9\nmale\npass\nD\n138\n\n\n10\nmale\npass\nE\n54\n\n\n11\nmale\npass\nF\n224\n\n\n12\nfemale\nfail\nA\n19\n\n\n13\nfemale\nfail\nB\n7\n\n\n14\nfemale\nfail\nC\n391\n\n\n15\nfemale\nfail\nD\n244\n\n\n16\nfemale\nfail\nE\n299\n\n\n17\nfemale\nfail\nF\n103\n\n\n18\nfemale\npass\nA\n89\n\n\n19\nfemale\npass\nB\n18\n\n\n20\nfemale\npass\nC\n202\n\n\n21\nfemale\npass\nD\n131\n\n\n22\nfemale\npass\nE\n94\n\n\n23\nfemale\npass\nF\n238"
  },
  {
    "objectID": "posts/05wk-2.html#a.-lambda",
    "href": "posts/05wk-2.html#a.-lambda",
    "title": "05wk-2: Pandas – transform column (꿀팁)",
    "section": "A. lambda",
    "text": "A. lambda\n저번시간에 했음"
  },
  {
    "objectID": "posts/05wk-2.html#b.-map",
    "href": "posts/05wk-2.html#b.-map",
    "title": "05wk-2: Pandas – transform column (꿀팁)",
    "section": "B. map",
    "text": "B. map\n저번시간에 했음"
  },
  {
    "objectID": "posts/05wk-2.html#c.-s.apply변환함수",
    "href": "posts/05wk-2.html#c.-s.apply변환함수",
    "title": "05wk-2: Pandas – transform column (꿀팁)",
    "section": "C. s.apply(변환함수)",
    "text": "C. s.apply(변환함수)\n- 예시1: 원소별로 처음3개의 숫자만 출력\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ns = df.Height\n\n\ns.apply(lambda x: x[:3])\n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: object\n\n\n- 예시2: 원소별로 처음3개의 문자만 출력 \\(\\to\\) str자료형을 int자료형으로 변환\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ns = df.Height\n\n(방법1) – 한번에\n\ns.apply(lambda x: int(x[:3]))\n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: int64\n\n\n(방법2) – 연쇄적으로..\n\ns.apply(lambda x: x[:3]).apply(int)\n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: int64"
  },
  {
    "objectID": "posts/05wk-2.html#d.-s.str-idx.str",
    "href": "posts/05wk-2.html#d.-s.str-idx.str",
    "title": "05wk-2: Pandas – transform column (꿀팁)",
    "section": "D. s.str, idx.str",
    "text": "D. s.str, idx.str\n- 예시1: 원소별로 처음 3개의 숫자만 출력\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\ns = df.Height\n\n\ns.str[:3]\n\n0        189\n1        179\n2        172\n3        181\n4        172\n        ... \n17655    190\n17656    195\n17657    190\n17658    187\n17659    186\nName: Height, Length: 17660, dtype: object\n\n\n- 예시2: 원소별로 isupper를 수행\n\ns = pd.Series(['A','B','C','d','e','F'])\ns\n\n0    A\n1    B\n2    C\n3    d\n4    e\n5    F\ndtype: object\n\n\n\ns.str.isupper()\n\n0     True\n1     True\n2     True\n3    False\n4    False\n5     True\ndtype: bool\n\n\n- 예시3: 원소별로 공백제거 (pd.Series 뿐만 아니라 pd.Index 자료형에도 사용가능)\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2022/master/posts/FIFA23_official_data.csv')\nidx = df.columns\n\n\nidx.str.replace(' ','')\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'ClubLogo', 'Value', 'Wage', 'Special',\n       'PreferredFoot', 'InternationalReputation', 'WeakFoot', 'SkillMoves',\n       'WorkRate', 'BodyType', 'RealFace', 'Position', 'Joined', 'LoanedFrom',\n       'ContractValidUntil', 'Height', 'Weight', 'ReleaseClause', 'KitNumber',\n       'BestOverallRating'],\n      dtype='object')"
  },
  {
    "objectID": "posts/05wk-2.html#e.-s.astype",
    "href": "posts/05wk-2.html#e.-s.astype",
    "title": "05wk-2: Pandas – transform column (꿀팁)",
    "section": "E. s.astype()",
    "text": "E. s.astype()\n- 예시1: 원소의 타입을 모두 int형으로 변경\n\ns = pd.Series(list('12345'))\ns\n\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: object\n\n\n\ns.astype(int)\n\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n\n- 예시2: 원소의 타입을 변환한 이후 브로드캐스팅 (int)\n\ns1 = pd.Series(list('12345'))\ns2 = pd.Series([-1,-2,-3,-4,-5])\n\n\ns1.astype(int)+s2\n\n0    0\n1    0\n2    0\n3    0\n4    0\ndtype: int64\n\n\n# 예시3: 원소의 타입을 변환한 이후 브로드캐스팅 (str)\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\")[:5]\ndf\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nlogFare\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n1.981001\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n4.266662\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n2.070022\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n3.972177\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n2.085672\n\n\n\n\n\n\n\n위의 자료에서 Embarked 열과 Pclass열을 이용하여 아래와 같은 New Feature를 만들어라.\n\n\n\nEmbarked\nPclass\nNew Feature\n\n\n\n\n‘S’\n3\n‘S3’\n\n\n‘C’\n1\n‘C1’\n\n\n‘S’\n3\n‘S3’\n\n\n‘S’\n1\n‘S1’\n\n\n‘S’\n3\n‘S3’\n\n\n\n(풀이)\n\ndf.Embarked + df.Pclass.astype(str)\n\n0    S3\n1    C1\n2    S3\n3    S1\n4    S3\ndtype: object\n\n\n#"
  },
  {
    "objectID": "posts/05wk-2.html#f.-컴프리헨션-lambdamap을-무시하지-말-것",
    "href": "posts/05wk-2.html#f.-컴프리헨션-lambdamap을-무시하지-말-것",
    "title": "05wk-2: Pandas – transform column (꿀팁)",
    "section": "F. 컴프리헨션, lambda+map을 무시하지 말 것",
    "text": "F. 컴프리헨션, lambda+map을 무시하지 말 것\n# 예시1\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\")[:5]\ndf\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nlogFare\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n1.981001\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n4.266662\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n2.070022\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n3.972177\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n2.085672\n\n\n\n\n\n\n\n위의 자료에서 아래와 같은 변환을 하고 싶다면?\n\\[\nf(\\text{sex}, \\text{sibsp}) =\n\\begin{cases}\n0.7 + 0.25 \\times \\text{sibsp} & \\text{if } \\text{sex} = \\text{'female'} \\\\\n0.1 + 0.15 \\times \\text{sibsp} & \\text{otherwise}\n\\end{cases}\n\\]\n\ndf.assign(Prob= list(map(lambda sex,sibsp: 0.7 + sibsp*0.25 if sex=='female' else 0.2 + sibsp*0.15, df.Sex, df.SibSp)))\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nlogFare\nProb\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n1.981001\n0.35\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n4.266662\n0.95\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n2.070022\n0.70\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n3.972177\n0.95\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n2.085672\n0.20\n\n\n\n\n\n\n\n#\n# 예시2\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\")[:5]\ndf\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nlogFare\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n1.981001\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n4.266662\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n2.070022\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n3.972177\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n2.085672\n\n\n\n\n\n\n\n위의 자료에서 Name열을 아래와 같이 분리하는 작업을 수행하라.\n\n\n\n\ntitle\nName\n\n\n\n\n0\nMr\nOwen Harris Braund\n\n\n1\nMrs\nJohn Bradley (Florence Briggs Thayer) Cumings\n\n\n2\nMiss\nLaina Heikkinen\n\n\n3\nMrs\nJacques Heath (Lily May Peel) Futrelle\n\n\n4\nMr\nWilliam Henry Allen\n\n\n\n(풀이)\n\n_lst = [[title,f'{first_name} {last_name}'] for last_name, title, first_name in df.Name.str.replace(', ','/').str.replace('. ','/').str.split('/')]\npd.DataFrame(_lst, columns=['title','Name2'])\n\n\n\n\n\n\n\n\ntitle\nName2\n\n\n\n\n0\nMr\nOwen Harris Braund\n\n\n1\nMrs\nJohn Bradley (Florence Briggs Thayer) Cumings\n\n\n2\nMiss\nLaina Heikkinen\n\n\n3\nMrs\nJacques Heath (Lily May Peel) Futrelle\n\n\n4\nMr\nWilliam Henry Allen\n\n\n\n\n\n\n\n참고: “Mr,Mrs,Miss” 만 뽑아내는 코드 (대면수업에서 하려다가 실패한 코드)\n\ndf.Name.str.split(', ').str[-1].str.split('. ').str[0]\n\n0      Mr\n1     Mrs\n2    Miss\n3     Mrs\n4      Mr\nName: Name, dtype: object\n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#a.-.plot.bar",
    "href": "posts/10wk-2.html#a.-.plot.bar",
    "title": "10wk-2: Plotly – 판다스 백엔드",
    "section": "A. .plot.bar()",
    "text": "A. .plot.bar()\n# 예제1 – 성별 합격률 시각화\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1]).reset_index().melt(id_vars='index').set_axis(['department','gender','result','count'],axis=1)\ndf\n\n\n\n\n\n\n\n\ndepartment\ngender\nresult\ncount\n\n\n\n\n0\nA\nmale\nfail\n314\n\n\n1\nB\nmale\nfail\n208\n\n\n2\nC\nmale\nfail\n204\n\n\n3\nD\nmale\nfail\n279\n\n\n4\nE\nmale\nfail\n137\n\n\n5\nF\nmale\nfail\n149\n\n\n6\nA\nmale\npass\n511\n\n\n7\nB\nmale\npass\n352\n\n\n8\nC\nmale\npass\n121\n\n\n9\nD\nmale\npass\n138\n\n\n10\nE\nmale\npass\n54\n\n\n11\nF\nmale\npass\n224\n\n\n12\nA\nfemale\nfail\n19\n\n\n13\nB\nfemale\nfail\n7\n\n\n14\nC\nfemale\nfail\n391\n\n\n15\nD\nfemale\nfail\n244\n\n\n16\nE\nfemale\nfail\n299\n\n\n17\nF\nfemale\nfail\n103\n\n\n18\nA\nfemale\npass\n89\n\n\n19\nB\nfemale\npass\n18\n\n\n20\nC\nfemale\npass\n202\n\n\n21\nD\nfemale\npass\n131\n\n\n22\nE\nfemale\npass\n94\n\n\n23\nF\nfemale\npass\n238\n\n\n\n\n\n\n\n\ndf.pivot_table(index='gender',columns='result',values='count',aggfunc='sum')\\\n.assign(rate = lambda df:  df['pass']/(df['fail']+df['pass']))\\\n.assign(rate = lambda df:  np.round(df['rate'],2))\\\n.loc[:,'rate'].reset_index()\\\n.plot.bar(\n    x='gender', y='rate',\n    color='gender',\n    text='rate',\n    width=600\n)\n\n                                                \n\n\n#\n# 예제2 – (성별,학과)별 지원자수 시각화\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1]).reset_index().melt(id_vars='index').set_axis(['department','gender','result','count'],axis=1)\ndf\n\n\n\n\n\n\n\n\ndepartment\ngender\nresult\ncount\n\n\n\n\n0\nA\nmale\nfail\n314\n\n\n1\nB\nmale\nfail\n208\n\n\n2\nC\nmale\nfail\n204\n\n\n3\nD\nmale\nfail\n279\n\n\n4\nE\nmale\nfail\n137\n\n\n5\nF\nmale\nfail\n149\n\n\n6\nA\nmale\npass\n511\n\n\n7\nB\nmale\npass\n352\n\n\n8\nC\nmale\npass\n121\n\n\n9\nD\nmale\npass\n138\n\n\n10\nE\nmale\npass\n54\n\n\n11\nF\nmale\npass\n224\n\n\n12\nA\nfemale\nfail\n19\n\n\n13\nB\nfemale\nfail\n7\n\n\n14\nC\nfemale\nfail\n391\n\n\n15\nD\nfemale\nfail\n244\n\n\n16\nE\nfemale\nfail\n299\n\n\n17\nF\nfemale\nfail\n103\n\n\n18\nA\nfemale\npass\n89\n\n\n19\nB\nfemale\npass\n18\n\n\n20\nC\nfemale\npass\n202\n\n\n21\nD\nfemale\npass\n131\n\n\n22\nE\nfemale\npass\n94\n\n\n23\nF\nfemale\npass\n238\n\n\n\n\n\n\n\n\ndf.groupby(['department','gender']).agg({'count':'sum'})\\\n.reset_index()\\\n.plot.bar(\n    x='gender',y='count',\n    color='gender',\n    text='count',\n    facet_col='department'\n)\n\n                                                \n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#b.-.plot.line",
    "href": "posts/10wk-2.html#b.-.plot.line",
    "title": "10wk-2: Plotly – 판다스 백엔드",
    "section": "B. .plot.line()",
    "text": "B. .plot.line()\n# 예제1 – 핸드폰 판매량\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/phone.csv')\ndf\n\n\n\n\n\n\n\n\nDate\nSamsung\nApple\nHuawei\nXiaomi\nOppo\nMobicel\nMotorola\nLG\nOthers\nRealme\nGoogle\nNokia\nLenovo\nOnePlus\nSony\nAsus\n\n\n\n\n0\n2019-10\n461\n324\n136\n109\n76\n81\n43\n37\n135\n28\n39\n14\n22\n17\n20\n17\n\n\n1\n2019-11\n461\n358\n167\n141\n86\n61\n29\n36\n141\n27\n29\n20\n23\n10\n19\n27\n\n\n2\n2019-12\n426\n383\n143\n105\n53\n45\n51\n48\n129\n30\n20\n26\n28\n18\n18\n19\n\n\n3\n2020-01\n677\n494\n212\n187\n110\n79\n65\n49\n158\n23\n13\n19\n19\n22\n27\n22\n\n\n4\n2020-02\n593\n520\n217\n195\n112\n67\n62\n71\n157\n25\n18\n16\n24\n18\n23\n20\n\n\n5\n2020-03\n637\n537\n246\n187\n92\n66\n59\n67\n145\n21\n16\n24\n18\n31\n22\n14\n\n\n6\n2020-04\n647\n583\n222\n154\n98\n59\n48\n64\n113\n20\n23\n25\n19\n19\n23\n21\n\n\n7\n2020-05\n629\n518\n192\n176\n91\n87\n50\n66\n150\n43\n27\n15\n18\n19\n19\n13\n\n\n8\n2020-06\n663\n552\n209\n185\n93\n69\n54\n60\n140\n39\n16\n16\n17\n29\n25\n16\n\n\n9\n2020-07\n599\n471\n214\n193\n89\n78\n65\n59\n130\n40\n27\n25\n21\n18\n18\n12\n\n\n10\n2020-08\n615\n567\n204\n182\n105\n82\n62\n42\n129\n47\n16\n23\n21\n27\n23\n20\n\n\n11\n2020-09\n621\n481\n230\n220\n102\n88\n56\n49\n143\n54\n14\n15\n17\n15\n19\n15\n\n\n12\n2020-10\n637\n555\n232\n203\n90\n52\n63\n49\n140\n33\n17\n20\n22\n9\n22\n21\n\n\n\n\n\n\n\n\ndf.melt(id_vars='Date')\\\n.set_axis(['날짜','회사','판매량'],axis=1)\\\n.plot.line(\n    x='날짜',y='판매량',\n    color='회사'\n)\n\n                                                \n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#c.-.plot.scatter",
    "href": "posts/10wk-2.html#c.-.plot.scatter",
    "title": "10wk-2: Plotly – 판다스 백엔드",
    "section": "C. .plot.scatter()",
    "text": "C. .plot.scatter()\n\nposition_dict = {\n    'GOALKEEPER':{'GK'},\n    'DEFENDER':{'CB','RCB','LCB','RB','LB','RWB','LWB'},\n    'MIDFIELDER':{'CM','RCM','LCM','CDM','RDM','LDM','CAM','RAM','LAM','RM','LM'},\n    'FORWARD':{'ST','CF','RF','LF','RW','LW','RS','LS'},\n    'SUB':{'SUB'},\n    'RES':{'RES'}\n}\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2021/master/_notebooks/2021-10-25-FIFA22_official_data.csv')\\\n.loc[:,lambda df: df.isna().mean()&lt;0.5].dropna()\\\n.assign(Position = lambda df: df.Position.str.split(\"&gt;\").str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()))\\\n.assign(Wage = lambda df: df.Wage.str[1:].str.replace('K','000').astype(int))\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBest Position\nBest Overall Rating\nRelease Clause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns\n\n\n\n\ndf.columns\n\nIndex(['ID', 'Name', 'Age', 'Photo', 'Nationality', 'Flag', 'Overall',\n       'Potential', 'Club', 'Club Logo', 'Value', 'Wage', 'Special',\n       'Preferred Foot', 'International Reputation', 'Weak Foot',\n       'Skill Moves', 'Work Rate', 'Body Type', 'Real Face', 'Position',\n       'Jersey Number', 'Joined', 'Contract Valid Until', 'Height', 'Weight',\n       'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes',\n       'Best Position', 'Best Overall Rating', 'Release Clause',\n       'DefensiveAwareness'],\n      dtype='object')\n\n\n\ndf.query('Position ==\"FORWARD\" or Position ==\"DEFENDER\"')\\\n.plot.scatter(\n    x='ShotPower',y='SlidingTackle',\n    color='Position',\n    size='Wage',\n    opacity=0.5,\n    width=600,\n    hover_data=['Name','Age']\n)"
  },
  {
    "objectID": "posts/10wk-2.html#d.-.plot.box",
    "href": "posts/10wk-2.html#d.-.plot.box",
    "title": "10wk-2: Plotly – 판다스 백엔드",
    "section": "D. .plot.box()",
    "text": "D. .plot.box()\n# 예제1 – 전북고등학교\n\ny1=[75,75,76,76,77,77,78,79,79,98] # A선생님에게 통계학을 배운 학생의 점수들\ny2=[76,76,77,77,78,78,79,80,80,81] # B선생님에게 통계학을 배운 학생의 점수들 \n\n\ndf = pd.DataFrame({\n    'score':y1+y2,\n    'class':['A']*len(y1) + ['B']*len(y2)\n})\ndf.plot.box(\n    x='class',y='score',\n    color='class',\n    points='all',\n    width=600\n)\n\n                                                \n\n\n#\n# 예제2 – (년도,시도)별 전기에너지사용량\n\nurl = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'\nprov = ['Seoul', 'Busan', 'Daegu', 'Incheon', \n        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', \n        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', \n        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', \n        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\ndf = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\\\n.assign(년도 = lambda df: df.년도.astype(int))\\\n.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\\\n.reset_index()\ndf.head()\n\n/tmp/ipykernel_183205/3228750770.py:9: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\n\n\n\n\n0\n2018\nSeoul\n종로구\n17929\n9141777\n64818\n82015\n111\n\n\n1\n2018\nSeoul\n중구\n10598\n10056233\n81672\n75260\n563\n\n\n2\n2018\nSeoul\n용산구\n17201\n10639652\n52659\n85220\n12043\n\n\n3\n2018\nSeoul\n성동구\n14180\n11631770\n60559\n107416\n0\n\n\n4\n2018\nSeoul\n광진구\n21520\n12054796\n70609\n130308\n0\n\n\n\n\n\n\n\n\ndf.plot.box(\n    x='시도',y='에너지사용량(TOE)/전기',\n    color='시도',\n    facet_row='년도',\n    hover_data=['지역','연면적'],\n    height=1600\n)\n\n                                                \n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#e.-.plot.hist",
    "href": "posts/10wk-2.html#e.-.plot.hist",
    "title": "10wk-2: Plotly – 판다스 백엔드",
    "section": "E. .plot.hist()",
    "text": "E. .plot.hist()\n# 예제1 – 타이타닉: (연령,성별) 생존자\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/titanic.csv\")\ndf\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\nlogFare\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n1.981001\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n4.266662\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n2.070022\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n3.972177\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n2.085672\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\n0\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nNaN\nS\n2.564949\n\n\n887\n888\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n3.401197\n\n\n888\n889\n0\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\nNaN\n1\n2\nW./C. 6607\n23.4500\nNaN\nS\n3.154870\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n3.401197\n\n\n890\n891\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nNaN\nQ\n2.047693\n\n\n\n\n891 rows × 13 columns\n\n\n\n\ndf.plot.hist(\n    x='Age',\n    color='Sex',\n    facet_row='Sex',facet_col='Survived'\n)\n\n                                                \n\n\n#"
  },
  {
    "objectID": "posts/10wk-2.html#f.-.plot.area",
    "href": "posts/10wk-2.html#f.-.plot.area",
    "title": "10wk-2: Plotly – 판다스 백엔드",
    "section": "F. .plot.area()",
    "text": "F. .plot.area()\n# 예제1 – 핸드폰 판매량\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/phone.csv')\ndf\n\n\n\n\n\n\n\n\nDate\nSamsung\nApple\nHuawei\nXiaomi\nOppo\nMobicel\nMotorola\nLG\nOthers\nRealme\nGoogle\nNokia\nLenovo\nOnePlus\nSony\nAsus\n\n\n\n\n0\n2019-10\n461\n324\n136\n109\n76\n81\n43\n37\n135\n28\n39\n14\n22\n17\n20\n17\n\n\n1\n2019-11\n461\n358\n167\n141\n86\n61\n29\n36\n141\n27\n29\n20\n23\n10\n19\n27\n\n\n2\n2019-12\n426\n383\n143\n105\n53\n45\n51\n48\n129\n30\n20\n26\n28\n18\n18\n19\n\n\n3\n2020-01\n677\n494\n212\n187\n110\n79\n65\n49\n158\n23\n13\n19\n19\n22\n27\n22\n\n\n4\n2020-02\n593\n520\n217\n195\n112\n67\n62\n71\n157\n25\n18\n16\n24\n18\n23\n20\n\n\n5\n2020-03\n637\n537\n246\n187\n92\n66\n59\n67\n145\n21\n16\n24\n18\n31\n22\n14\n\n\n6\n2020-04\n647\n583\n222\n154\n98\n59\n48\n64\n113\n20\n23\n25\n19\n19\n23\n21\n\n\n7\n2020-05\n629\n518\n192\n176\n91\n87\n50\n66\n150\n43\n27\n15\n18\n19\n19\n13\n\n\n8\n2020-06\n663\n552\n209\n185\n93\n69\n54\n60\n140\n39\n16\n16\n17\n29\n25\n16\n\n\n9\n2020-07\n599\n471\n214\n193\n89\n78\n65\n59\n130\n40\n27\n25\n21\n18\n18\n12\n\n\n10\n2020-08\n615\n567\n204\n182\n105\n82\n62\n42\n129\n47\n16\n23\n21\n27\n23\n20\n\n\n11\n2020-09\n621\n481\n230\n220\n102\n88\n56\n49\n143\n54\n14\n15\n17\n15\n19\n15\n\n\n12\n2020-10\n637\n555\n232\n203\n90\n52\n63\n49\n140\n33\n17\n20\n22\n9\n22\n21\n\n\n\n\n\n\n\n\ndf.melt(id_vars='Date')\\\n.set_axis(['날짜','회사','판매량'],axis=1)\\\n.plot.area(\n    x='날짜',y='판매량',\n    color='회사',\n    width=600\n)\n\n                                                \n\n\n#\n# 예제2 – 에너지사용량\n\nurl = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'\nprov = ['Seoul', 'Busan', 'Daegu', 'Incheon', \n        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', \n        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', \n        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', \n        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\ndf = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\\\n.assign(년도 = lambda df: df.년도.astype(int))\\\n.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\\\n.reset_index()\ndf.head()\n\n/tmp/ipykernel_183205/3228750770.py:9: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\n\n\n\n\n0\n2018\nSeoul\n종로구\n17929\n9141777\n64818\n82015\n111\n\n\n1\n2018\nSeoul\n중구\n10598\n10056233\n81672\n75260\n563\n\n\n2\n2018\nSeoul\n용산구\n17201\n10639652\n52659\n85220\n12043\n\n\n3\n2018\nSeoul\n성동구\n14180\n11631770\n60559\n107416\n0\n\n\n4\n2018\nSeoul\n광진구\n21520\n12054796\n70609\n130308\n0\n\n\n\n\n\n\n\n\ndf.set_index(['년도','시도','지역','건물동수','연면적']).stack().reset_index()\\\n.rename({'level_5':'에너지종류', 0:'에너지사용량'},axis=1)\\\n.assign(에너지종류 = lambda df: df['에너지종류'].str.split('/').str[-1])\\\n.groupby(['년도','시도','에너지종류']).agg({'에너지사용량':'sum'})\\\n.stack().reset_index()\\\n.rename({0:'에너지사용량'},axis=1)\\\n.plot.area(\n    x='년도',y='에너지사용량',\n    color='시도',\n    facet_col='에너지종류'\n)\n\n                                                \n\n\n\n간단한 미세조정\n\nfig = df.set_index(['년도','시도','지역','건물동수','연면적']).stack().reset_index()\\\n.rename({'level_5':'에너지종류', 0:'에너지사용량'},axis=1)\\\n.assign(에너지종류 = lambda df: df['에너지종류'].str.split('/').str[-1])\\\n.groupby(['년도','시도','에너지종류']).agg({'에너지사용량':'sum'})\\\n.stack().reset_index()\\\n.rename({0:'에너지사용량'},axis=1)\\\n.plot.area(\n    x='년도',y='에너지사용량',\n    color='시도',\n    facet_col='에너지종류'\n)\nfig.update_layout(\n    xaxis_domain=[0.0, 0.25],\n    xaxis2_domain=[0.35, 0.60],\n    xaxis3_domain=[0.70, 0.95]\n)"
  },
  {
    "objectID": "posts/05wk-supp.html#a.-dropna",
    "href": "posts/05wk-supp.html#a.-dropna",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "A. dropna()",
    "text": "A. dropna()\n- 결측치가 하나라도 포함된 모든 행을 제거하는 방법\n\ndf = pd.DataFrame({\n    'A': [1,2,3,np.nan,5,6,7],\n    'B': [11,np.nan,33,np.nan,55,66,77], \n    'C': [111,222,333,np.nan,555,666,np.nan]})\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n1.0\n11.0\n111.0\n\n\n1\n2.0\nNaN\n222.0\n\n\n2\n3.0\n33.0\n333.0\n\n\n3\nNaN\nNaN\nNaN\n\n\n4\n5.0\n55.0\n555.0\n\n\n5\n6.0\n66.0\n666.0\n\n\n6\n7.0\n77.0\nNaN\n\n\n\n\n\n\n\n\ndf.dropna()\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n1.0\n11.0\n111.0\n\n\n2\n3.0\n33.0\n333.0\n\n\n4\n5.0\n55.0\n555.0\n\n\n5\n6.0\n66.0\n666.0"
  },
  {
    "objectID": "posts/05wk-supp.html#b.-_",
    "href": "posts/05wk-supp.html#b.-_",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "B. _",
    "text": "B. _\n- 파이썬이 계산한 최근 결과는 _에 저장된다.\n\na = [1,2,3]\na + [4] \n\n[1, 2, 3, 4]\n\n\n\n_\n\n[1, 2, 3, 4]\n\n\n\n_ + [5] \n\n[1, 2, 3, 4, 5]\n\n\n\n_.pop()\n\n5\n\n\n\n_ + 1\n\n6"
  },
  {
    "objectID": "posts/05wk-supp.html#a.-열의-이름에서-공백제거",
    "href": "posts/05wk-supp.html#a.-열의-이름에서-공백제거",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "A. 열의 이름에서 공백제거",
    "text": "A. 열의 이름에서 공백제거\n\ndf.columns = df.columns.str.replace(' ','')"
  },
  {
    "objectID": "posts/05wk-supp.html#b.-결측치제거",
    "href": "posts/05wk-supp.html#b.-결측치제거",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "B. 결측치제거",
    "text": "B. 결측치제거\n\ndf = df.loc[:,df.isna().mean()&lt;0.5] # 결측치가 50퍼 이상인 컬럼을 제거\n\n\ndf = df.dropna()\n\n\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClub Logo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBest Position\nBest Overall Rating\nRelease Clause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns"
  },
  {
    "objectID": "posts/05wk-supp.html#c.-position-칼럼의-변환",
    "href": "posts/05wk-supp.html#c.-position-칼럼의-변환",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "C. Position 칼럼의 변환",
    "text": "C. Position 칼럼의 변환\n\ndf['Position'] = df.Position.str.split(\"&gt;\").str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v][0])"
  },
  {
    "objectID": "posts/05wk-supp.html#d.-wage-칼럼의-변환",
    "href": "posts/05wk-supp.html#d.-wage-칼럼의-변환",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "D. Wage 칼럼의 변환",
    "text": "D. Wage 칼럼의 변환\n\ndf['Wage'] = df.Wage.str[1:].str.replace('K','000').astype(int)"
  },
  {
    "objectID": "posts/05wk-supp.html#e.-시각화",
    "href": "posts/05wk-supp.html#e.-시각화",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "E. 시각화",
    "text": "E. 시각화\n\nfig = ggplot(df.query('Position==\"DEFENDER\" or Position==\"FORWARD\"'))\npoint = geom_point(aes(x='ShotPower',y='SlidingTackle',color='Position',size='Wage',alpha='Wage'),position='jitter')\nfig + point"
  },
  {
    "objectID": "posts/05wk-supp.html#a.-열의-이름에서-공백제거-1",
    "href": "posts/05wk-supp.html#a.-열의-이름에서-공백제거-1",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "A. 열의 이름에서 공백제거",
    "text": "A. 열의 이름에서 공백제거\n\ndf.columns = df.columns.str.replace(' ','')"
  },
  {
    "objectID": "posts/05wk-supp.html#b.-결측치제거-1",
    "href": "posts/05wk-supp.html#b.-결측치제거-1",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "B. 결측치제거",
    "text": "B. 결측치제거\n- 실수로 df.dropna()를 먼저 사용.\n\ndf = df.dropna()\n\n\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n\n\n0 rows × 65 columns\n\n\n\n- 이럴경우는 다시 처음부터 실행해야함.\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2021/master/_notebooks/2021-10-25-FIFA22_official_data.csv')\n\n\ndf.columns = df.columns.str.replace(' ','')\n\n\ndf = df.loc[:,df.isna().mean()&lt;0.5]\n\n\ndf = df.dropna()"
  },
  {
    "objectID": "posts/05wk-supp.html#c.-position-칼럼의-변환-1",
    "href": "posts/05wk-supp.html#c.-position-칼럼의-변환-1",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "C. Position 칼럼의 변환",
    "text": "C. Position 칼럼의 변환\n- 실수로 아래와 같이 코드를 입력했다고 치자.\n\ndf['Position'] = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v])\ndf.Position\n\n0        [MIDFIELDER]\n1        [MIDFIELDER]\n2           [FORWARD]\n3        [MIDFIELDER]\n4          [DEFENDER]\n             ...     \n16703           [RES]\n16704           [RES]\n16706           [RES]\n16707           [RES]\n16708           [SUB]\nName: Position, Length: 14398, dtype: object\n\n\n- 하지만 지금와서 고쳐보려고 해봤자 늦음..\n\ndf['Position'] = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop())\n\nAttributeError: Can only use .str accessor with string values!\n\n\n- 다시 처음부터..\n\ndf = pd.read_csv('https://raw.githubusercontent.com/guebin/DV2021/master/_notebooks/2021-10-25-FIFA22_official_data.csv')\ndf.columns = df.columns.str.replace(' ','')\ndf = df.loc[:,df.isna().mean()&lt;0.5]\ndf = df.dropna()\ndf['Position'] = df.Position.str.split('&gt;').str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop())\ndf\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns\n\n\n\n- 요령1: 데이터를 불러오는 코드부터 시작해서 하나의 셀에 df를 처리하는 코드를 모두 몰아넣어서 처리하는게 유리함. (그래야 덜 당황해요 \\(\\star\\star\\star\\star\\star\\))\n- 요령2: 데이터프레임 자체를 변환시키는 코드를 가급적 작성하지 않음. (제가 좀 더 자주 쓰는 테크닉, 기술이 필요함)"
  },
  {
    "objectID": "posts/05wk-supp.html#a.-열의-이름에서-공백제거-2",
    "href": "posts/05wk-supp.html#a.-열의-이름에서-공백제거-2",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "A. 열의 이름에서 공백제거",
    "text": "A. 열의 이름에서 공백제거\n\ndf.set_axis(df.columns.str.replace(' ',''),axis=1)\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16705\n240558\n18 L. Clayton\n17\nhttps://cdn.sofifa.com/players/240/558/18_60.png\nEngland\nhttps://cdn.sofifa.com/flags/gb-eng.png\n53\n70\nCheltenham Town\nhttps://cdn.sofifa.com/teams/1936/30.png\n...\n12.0\n55.0\n54.0\n52.0\n50.0\n59.0\nGK\n52.0\n€238K\nNaN\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n16709\n178453\n07 A. Censori\n17\nhttps://cdn.sofifa.com/players/178/453/07_60.png\nItaly\nhttps://cdn.sofifa.com/flags/it.png\n28\n38\nArezzo\nhttps://cdn.sofifa.com/teams/110907/30.png\n...\nNaN\n7.0\n1.0\n36.0\n6.0\n9.0\nST\n36.0\nNaN\nNaN\n\n\n\n\n16710 rows × 65 columns"
  },
  {
    "objectID": "posts/05wk-supp.html#b.-결측치제거-2",
    "href": "posts/05wk-supp.html#b.-결측치제거-2",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "B. 결측치제거",
    "text": "B. 결측치제거\n\n_df = df.set_axis(df.columns.str.replace(' ',''),axis=1)\n_df\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16705\n240558\n18 L. Clayton\n17\nhttps://cdn.sofifa.com/players/240/558/18_60.png\nEngland\nhttps://cdn.sofifa.com/flags/gb-eng.png\n53\n70\nCheltenham Town\nhttps://cdn.sofifa.com/teams/1936/30.png\n...\n12.0\n55.0\n54.0\n52.0\n50.0\n59.0\nGK\n52.0\n€238K\nNaN\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n16709\n178453\n07 A. Censori\n17\nhttps://cdn.sofifa.com/players/178/453/07_60.png\nItaly\nhttps://cdn.sofifa.com/flags/it.png\n28\n38\nArezzo\nhttps://cdn.sofifa.com/teams/110907/30.png\n...\nNaN\n7.0\n1.0\n36.0\n6.0\n9.0\nST\n36.0\nNaN\nNaN\n\n\n\n\n16710 rows × 65 columns\n\n\n\n\ndf.set_axis(df.columns.str.replace(' ',''),axis=1)\\\n.loc[:,lambda _df: _df.isna().mean()&lt;0.5].dropna()\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns"
  },
  {
    "objectID": "posts/05wk-supp.html#c.-position-칼럼의-변환-2",
    "href": "posts/05wk-supp.html#c.-position-칼럼의-변환-2",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "C. Position 칼럼의 변환",
    "text": "C. Position 칼럼의 변환\n\ndf.set_axis(df.columns.str.replace(' ',''),axis=1)\\\n.loc[:,lambda _df: _df.isna().mean()&lt;0.5].dropna()\\\n.assign(Position = lambda _df: _df.Position.str.split(\"&gt;\").str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()))\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns"
  },
  {
    "objectID": "posts/05wk-supp.html#d.-wage-칼럼의-변환-1",
    "href": "posts/05wk-supp.html#d.-wage-칼럼의-변환-1",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "D. Wage 칼럼의 변환",
    "text": "D. Wage 칼럼의 변환\n\ndf.set_axis(df.columns.str.replace(' ',''),axis=1)\\\n.loc[:,lambda _df: _df.isna().mean()&lt;0.5].dropna()\\\n.assign(Position = lambda _df: _df.Position.str.split(\"&gt;\").str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()))\\\n.assign(Wage = lambda _df: _df.Wage.str[1:].str.replace('K','000').astype(int))\n\n\n\n\n\n\n\n\nID\nName\nAge\nPhoto\nNationality\nFlag\nOverall\nPotential\nClub\nClubLogo\n...\nSlidingTackle\nGKDiving\nGKHandling\nGKKicking\nGKPositioning\nGKReflexes\nBestPosition\nBestOverallRating\nReleaseClause\nDefensiveAwareness\n\n\n\n\n0\n212198\nBruno Fernandes\n26\nhttps://cdn.sofifa.com/players/212/198/22_60.png\nPortugal\nhttps://cdn.sofifa.com/flags/pt.png\n88\n89\nManchester United\nhttps://cdn.sofifa.com/teams/11/30.png\n...\n65.0\n12.0\n14.0\n15.0\n8.0\n14.0\nCAM\n88.0\n€206.9M\n72.0\n\n\n1\n209658\nL. Goretzka\n26\nhttps://cdn.sofifa.com/players/209/658/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n87\n88\nFC Bayern München\nhttps://cdn.sofifa.com/teams/21/30.png\n...\n77.0\n13.0\n8.0\n15.0\n11.0\n9.0\nCM\n87.0\n€160.4M\n74.0\n\n\n2\n176580\nL. Suárez\n34\nhttps://cdn.sofifa.com/players/176/580/22_60.png\nUruguay\nhttps://cdn.sofifa.com/flags/uy.png\n88\n88\nAtlético de Madrid\nhttps://cdn.sofifa.com/teams/240/30.png\n...\n38.0\n27.0\n25.0\n31.0\n33.0\n37.0\nST\n88.0\n€91.2M\n42.0\n\n\n3\n192985\nK. De Bruyne\n30\nhttps://cdn.sofifa.com/players/192/985/22_60.png\nBelgium\nhttps://cdn.sofifa.com/flags/be.png\n91\n91\nManchester City\nhttps://cdn.sofifa.com/teams/10/30.png\n...\n53.0\n15.0\n13.0\n5.0\n10.0\n13.0\nCM\n91.0\n€232.2M\n68.0\n\n\n4\n224334\nM. Acuña\n29\nhttps://cdn.sofifa.com/players/224/334/22_60.png\nArgentina\nhttps://cdn.sofifa.com/flags/ar.png\n84\n84\nSevilla FC\nhttps://cdn.sofifa.com/teams/481/30.png\n...\n82.0\n8.0\n14.0\n13.0\n13.0\n14.0\nLB\n84.0\n€77.7M\n80.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n16703\n259718\nF. Gebhardt\n19\nhttps://cdn.sofifa.com/players/259/718/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n52\n66\nFC Basel 1893\nhttps://cdn.sofifa.com/teams/896/30.png\n...\n10.0\n53.0\n45.0\n47.0\n52.0\n57.0\nGK\n52.0\n€361K\n6.0\n\n\n16704\n251433\nB. Voll\n20\nhttps://cdn.sofifa.com/players/251/433/22_60.png\nGermany\nhttps://cdn.sofifa.com/flags/de.png\n58\n69\nF.C. Hansa Rostock\nhttps://cdn.sofifa.com/teams/27/30.png\n...\n10.0\n59.0\n60.0\n56.0\n55.0\n61.0\nGK\n58.0\n€656K\n5.0\n\n\n16706\n262846\n�. Dobre\n20\nhttps://cdn.sofifa.com/players/262/846/22_60.png\nRomania\nhttps://cdn.sofifa.com/flags/ro.png\n53\n63\nFC Academica Clinceni\nhttps://cdn.sofifa.com/teams/113391/30.png\n...\n12.0\n57.0\n52.0\n53.0\n48.0\n58.0\nGK\n53.0\n€279K\n5.0\n\n\n16707\n241317\n21 Xue Qinghao\n19\nhttps://cdn.sofifa.com/players/241/317/21_60.png\nChina PR\nhttps://cdn.sofifa.com/flags/cn.png\n47\n60\nShanghai Shenhua FC\nhttps://cdn.sofifa.com/teams/110955/30.png\n...\n9.0\n49.0\n48.0\n45.0\n38.0\n52.0\nGK\n47.0\n€223K\n21.0\n\n\n16708\n259646\nA. Shaikh\n18\nhttps://cdn.sofifa.com/players/259/646/22_60.png\nIndia\nhttps://cdn.sofifa.com/flags/in.png\n47\n67\nATK Mohun Bagan FC\nhttps://cdn.sofifa.com/teams/113146/30.png\n...\n13.0\n49.0\n41.0\n39.0\n45.0\n49.0\nGK\n47.0\n€259K\n7.0\n\n\n\n\n14398 rows × 63 columns"
  },
  {
    "objectID": "posts/05wk-supp.html#e.-시각화-1",
    "href": "posts/05wk-supp.html#e.-시각화-1",
    "title": "supp-1: FIFA23 자료의 시각화",
    "section": "E. 시각화",
    "text": "E. 시각화\n\ntidydata = df.set_axis(df.columns.str.replace(' ',''),axis=1)\\\n.loc[:,lambda _df: _df.isna().mean()&lt;0.5].dropna()\\\n.assign(Position = lambda _df: _df.Position.str.split(\"&gt;\").str[-1].apply(lambda x: [k for k,v in position_dict.items() if x in v].pop()))\\\n.assign(Wage = lambda _df: _df.Wage.str[1:].str.replace('K','000').astype(int))\n\n\nfig = ggplot(tidydata.query('Position==\"DEFENDER\" or Position==\"FORWARD\"'))\npoint = geom_point(aes(x='ShotPower',y='SlidingTackle',color='Position',size='Wage',alpha='Wage'),position='jitter')\nfig + point"
  },
  {
    "objectID": "posts/12wk-1.html#a.-뉴욕의-주요명소",
    "href": "posts/12wk-1.html#a.-뉴욕의-주요명소",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "A. 뉴욕의 주요명소",
    "text": "A. 뉴욕의 주요명소\n\n# 뉴욕의 주요 명소 및 위치를 데이터프레임으로 생성\nnyc_landmarks = {\n    \"Name\": [\"Wall Street\", \"Midtown Manhattan\", \"Times Square\", \n             \"Central Park\", \"Statue of Liberty\", \"Forest Park\", \"Citi Field\"],\n    \"Latitude\": [40.7074, 40.7549, 40.7580, 40.785091, 40.6892, 40.7028, 40.7571],\n    \"Longitude\": [-74.0113, -73.9840, -73.9855, -73.968285, -74.0445, -73.8495, -73.8458]\n}\n\ndf_nyc_landmarks = pd.DataFrame(nyc_landmarks)\ndf_nyc_landmarks\n\n\n\n\n\n\n\n\nName\nLatitude\nLongitude\n\n\n\n\n0\nWall Street\n40.707400\n-74.011300\n\n\n1\nMidtown Manhattan\n40.754900\n-73.984000\n\n\n2\nTimes Square\n40.758000\n-73.985500\n\n\n3\nCentral Park\n40.785091\n-73.968285\n\n\n4\nStatue of Liberty\n40.689200\n-74.044500\n\n\n5\nForest Park\n40.702800\n-73.849500\n\n\n6\nCiti Field\n40.757100\n-73.845800"
  },
  {
    "objectID": "posts/12wk-1.html#b.-시각화",
    "href": "posts/12wk-1.html#b.-시각화",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "B. 시각화",
    "text": "B. 시각화\n\nfig = px.scatter_mapbox(\n    data_frame = df_nyc_landmarks,\n    lat = 'Latitude',\n    lon = 'Longitude',\n    hover_data = 'Name',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.update_traces(\n    marker = {\n        'size':15, \n        'color': 'red', \n        'opacity':0.5\n    }\n)\nfig.show(config={'scrollZoom':False})"
  },
  {
    "objectID": "posts/12wk-1.html#c.-chatgpt-설명",
    "href": "posts/12wk-1.html#c.-chatgpt-설명",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "C. ChatGPT 설명",
    "text": "C. ChatGPT 설명\n\nChatGPT\n뉴욕은 세계에서 가장 중요한 금융 및 문화 중심지 중 하나로, 금융권 밀집 지역과 유명한 관광 명소가 많습니다. 다음은 뉴욕의 대표적인 금융권 밀집 지역과 주요 관광 명소 중 일부입니다:\n금융권 밀집 지역\n\n월스트리트 (Wall Street):\n\n월스트리트는 세계 금융의 상징이며, 뉴욕증권거래소(NYSE)와 많은 은행 및 금융 기관의 본사가 위치해 있습니다.\n이 지역은 글로벌 금융 및 경제의 중심지로 간주되며, ’월스트리트’는 종종 미국 금융 산업 전체를 지칭하는 용어로 사용됩니다.\n\n미드타운 (Midtown):\n\n미드타운 맨해튼은 많은 기업 본사, 유명 호텔, 쇼핑 지역 및 레스토랑이 밀집해 있는 지역입니다.\n이 지역에는 국제연합 본부, 메이시스 백화점, 록펠러 센터 등이 위치해 있습니다.\n\n\n주요 관광 명소\n\n타임스퀘어 (Times Square):\n\n타임스퀘어는 뉴욕의 상징적인 관광 명소 중 하나로, 번화한 광고판과 네온사인으로 유명합니다.\n이곳은 맨해튼의 중심부에 위치하며, 연극과 뮤지컬이 상연되는 브로드웨이 극장가로도 유명합니다.\n\n센트럴 파크 (Central Park):\n\n센트럴 파크는 뉴욕 시의 대표적인 공원으로, 도심 속 자연을 즐길 수 있는 아름다운 장소입니다.\n공원 내에는 호수, 산책로, 놀이터, 스포츠 시설 등이 마련되어 있으며, 다양한 문화 행사와 공연이 열립니다.\n\n자유의 여신상 (Statue of Liberty):\n\n자유의 여신상은 뉴욕 항구에 위치한 미국의 상징적인 조각상입니다.\n자유의 여신상은 미국의 자유와 민주주의를 상징하며, 세계적으로 유명한 관광 명소입니다.\n\n포레스트 공원 (Forest Park):\n\n이 공원은 뉴욕시 퀸즈 구역에 위치해 있습니다.\n포레스트 공원은 약 538 에이커의 면적을 가지고 있으며, 다양한 레크리에이션 활동 및 자연 트레일을 제공합니다.\n\n시티 필드 (Citi Field):\n\n시티 필드는 뉴욕시 퀸즈 구역에 위치한 야구 경기장입니다.\n이 경기장은 메이저 리그 야구의 뉴욕 메츠 팀의 홈 구장으로 사용됩니다."
  },
  {
    "objectID": "posts/12wk-1.html#a.-데이터불러오기",
    "href": "posts/12wk-1.html#a.-데이터불러오기",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "A. 데이터불러오기",
    "text": "A. 데이터불러오기\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv\")\ndf.columns\n\nIndex(['id', 'vendor_id', 'pickup_datetime', 'dropoff_datetime',\n       'passenger_count', 'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n       'trip_duration'],\n      dtype='object')\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\nid\nvendor_id\npickup_datetime\ndropoff_datetime\npassenger_count\npickup_longitude\npickup_latitude\ndropoff_longitude\ndropoff_latitude\nstore_and_fwd_flag\ntrip_duration\n\n\n\n\n0\nid2875421\n2\n2016-03-14 17:24:55\n2016-03-14 17:32:30\n1\n-73.982155\n40.767937\n-73.964630\n40.765602\nN\n455\n\n\n1\nid3194108\n1\n2016-06-01 11:48:41\n2016-06-01 12:19:07\n1\n-74.005028\n40.746452\n-73.972008\n40.745781\nN\n1826\n\n\n2\nid3564028\n1\n2016-01-02 01:16:42\n2016-01-02 01:19:56\n1\n-73.954132\n40.774784\n-73.947418\n40.779633\nN\n194\n\n\n3\nid1660823\n2\n2016-03-01 06:40:18\n2016-03-01 07:01:37\n5\n-73.982140\n40.775326\n-74.009850\n40.721699\nN\n1279\n\n\n4\nid1575277\n2\n2016-06-11 16:59:15\n2016-06-11 17:33:27\n1\n-73.999229\n40.722881\n-73.982880\n40.778297\nN\n2052"
  },
  {
    "objectID": "posts/12wk-1.html#b.-데이터-설명",
    "href": "posts/12wk-1.html#b.-데이터-설명",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "B. 데이터 설명",
    "text": "B. 데이터 설명\n- Kaggle의 설명\n\nid: a unique identifier for each trip\nvendor_id: a code indicating the provider associated with the trip record\npickup_datetime: date and time when the meter was engaged\ndropoff_datetime: date and time when the meter was disengaged\npassenger_count: the number of passengers in the vehicle (driver entered value)\npickup_longitude: the longitude where the meter was engaged\npickup_latitude: the latitude where the meter was engaged\ndropoff_longitude: the longitude where the meter was disengaged\ndropoff_latitude: the latitude where the meter was disengaged\nstore_and_fwd_flag: This flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server - Y=store and forward; N=not a store and forward trip\ntrip_duration: duration of the trip in seconds\n\n- ChatGPT의 설명: 제공된 자료는 택시 또는 차량 호출 서비스 데이터를 나타내며, 각 트립(여행)에 대한 다양한 정보를 포함하고 있습니다. 이러한 데이터는 주로 택시 회사나 차량 공유 서비스에서 수집되며, 서비스의 효율성 분석, 수요 예측, 지리적 특성 연구 등에 사용됩니다. 각 변수의 설명은 다음과 같습니다:\n\nid (고유 식별자): 각 여행에 대한 고유한 식별 번호입니다. 이를 통해 데이터 내의 각 트립을 구별할 수 있습니다.\nvendor_id (공급업체 식별자): 여행 기록과 관련된 서비스 제공업체를 나타내는 코드입니다. 이는 여러 업체가 서비스를 제공하는 경우 구별하는 데 사용됩니다.\npickup_datetime (승차 시간): 승객이 차량에 탑승하고 미터기가 작동하기 시작한 날짜와 시간입니다.\ndropoff_datetime (하차 시간): 승객이 차량에서 내리고 미터기가 중단된 날짜와 시간입니다.\npassenger_count (승객 수): 차량에 탑승한 승객의 수입니다. 이 값은 운전자가 입력합니다.\npickup_longitude (승차 경도) 및 pickup_latitude (승차 위도): 승객이 차량에 탑승한 위치의 경도와 위도입니다.\ndropoff_longitude (하차 경도) 및 dropoff_latitude (하차 위도): 승객이 차량에서 내린 위치의 경도와 위도입니다.\nstore_and_fwd_flag (저장 및 전송 플래그): 차량이 서버에 연결되어 있지 않을 때 여행 기록을 차량 메모리에 저장한 후 나중에 전송했는지 여부를 나타냅니다. ’Y’는 저장 후 전송됐음을, ’N’은 실시간 전송됐음을 의미합니다.\ntrip_duration (여행 기간): 여행의 총 소요 시간으로, 초 단위로 표시됩니다. 이는 승차 시간부터 하차 시간까지의 전체 기간을 나타냅니다."
  },
  {
    "objectID": "posts/12wk-1.html#c.-변수탐색",
    "href": "posts/12wk-1.html#c.-변수탐색",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "C. 변수탐색",
    "text": "C. 변수탐색\n- 1단계 – df.info()\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 14587 entries, 0 to 14586\nData columns (total 11 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   id                  14587 non-null  object \n 1   vendor_id           14587 non-null  int64  \n 2   pickup_datetime     14587 non-null  object \n 3   dropoff_datetime    14587 non-null  object \n 4   passenger_count     14587 non-null  int64  \n 5   pickup_longitude    14587 non-null  float64\n 6   pickup_latitude     14587 non-null  float64\n 7   dropoff_longitude   14587 non-null  float64\n 8   dropoff_latitude    14587 non-null  float64\n 9   store_and_fwd_flag  14587 non-null  object \n 10  trip_duration       14587 non-null  int64  \ndtypes: float64(4), int64(3), object(4)\nmemory usage: 1.2+ MB\n\n\n\n나름깔끔한 형태임. 결측치도 없음.\npickup_datetime, dropoff_datetime는 나중에 형태변환을 할 필요가 있음.\nvendor_id는 int64로 저장되어 있으나 실제로는 범주형자료를 의미함.\n\n- 2단계 – 범주형변수의 빈도를 조사\n\ndf['vendor_id'].value_counts()\n\nvendor_id\n2    7818\n1    6769\nName: count, dtype: int64\n\n\n\ndf['store_and_fwd_flag'].value_counts()\n\nstore_and_fwd_flag\nN    14506\nY       81\nName: count, dtype: int64\n\n\n- 3단계 – 연속형변수의 분포를 조사\n\ndf.plot.hist(x='passenger_count')\n\n                                                \n\n\n\n1-2인으로 택시를 타는 손님이 많고, 4인은 드물다. 5~6인은 4인보다 많다.\n\n\ndf.plot.hist(x='trip_duration')\n\n                                                \n\n\n\ntrip_durationds은 너무 큰 값들이 존재함."
  },
  {
    "objectID": "posts/12wk-1.html#d.-데이터변환",
    "href": "posts/12wk-1.html#d.-데이터변환",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "D. 데이터변환",
    "text": "D. 데이터변환\n\n# log변환\n- trip_duration 이외에 log_trip_duration 추가\n\nnp.log(df.trip_duration).plot.hist() # 정규분포 비슷하게 보임\n\n                                                \n\n\n\n\n# datetime 처리\n- pickup_datetime에서 시간만 추출\n\ndf.pickup_datetime.str.split(' ').str[-1].str.split(':').str[0].apply(int) # 방법1\n\n0        17\n1        11\n2         1\n3         6\n4        16\n         ..\n14582    22\n14583     8\n14584    16\n14585    18\n14586    17\nName: pickup_datetime, Length: 14587, dtype: int64\n\n\n\ndf.pickup_datetime.apply(pd.to_datetime).dt.hour # 방법2\n\n0        17\n1        11\n2         1\n3         6\n4        16\n         ..\n14582    22\n14583     8\n14584    16\n14585    18\n14586    17\nName: pickup_datetime, Length: 14587, dtype: int32\n\n\n- pickup_datetime에서 요일을 추출\n\ndf.pickup_datetime.apply(pd.to_datetime).dt.dayofweek # 방법1\n\n0        0\n1        2\n2        5\n3        1\n4        5\n        ..\n14582    0\n14583    0\n14584    1\n14585    0\n14586    0\nName: pickup_datetime, Length: 14587, dtype: int32\n\n\n\n0이 월요일\n\n\ndf.pickup_datetime.apply(pd.to_datetime).dt.strftime(\"%A\") # 방법2\n\n0           Monday\n1        Wednesday\n2         Saturday\n3          Tuesday\n4         Saturday\n           ...    \n14582       Monday\n14583       Monday\n14584      Tuesday\n14585       Monday\n14586       Monday\nName: pickup_datetime, Length: 14587, dtype: object\n\n\n- dropoff_datetime-pickup_datetime룰 계산 + df.trip_duration 와 비교\n\ndf.dropoff_datetime.apply(pd.to_datetime) - df.pickup_datetime.apply(pd.to_datetime)\n\n0       0 days 00:07:35\n1       0 days 00:30:26\n2       0 days 00:03:14\n3       0 days 00:21:19\n4       0 days 00:34:12\n              ...      \n14582   0 days 00:15:37\n14583   0 days 00:14:45\n14584   0 days 00:42:31\n14585   0 days 00:17:15\n14586   0 days 01:03:41\nLength: 14587, dtype: timedelta64[ns]\n\n\n\ndf.trip_duration # 택시를 탄 시간 (초)\n\n0         455\n1        1826\n2         194\n3        1279\n4        2052\n         ... \n14582     937\n14583     885\n14584    2551\n14585    1035\n14586    3821\nName: trip_duration, Length: 14587, dtype: int64\n\n\n\n\n# dist, speed 추가\n- 승차위치와 하차위치를 이용하여 dist를 계산\n\ndist = np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2)\ndist\n\n0        0.017680\n1        0.033027\n2        0.008282\n3        0.060363\n4        0.057778\n           ...   \n14582    0.035054\n14583    0.023886\n14584    0.132513\n14585    0.023439\n14586    0.228013\nLength: 14587, dtype: float64\n\n\n\n사실 위와 같이 distance를 계산하면 잘못한 것임 (1) 실제로는 저 거리로 차가 이동하지 않음.. (2) 지구는 둥글어서..\n\n\ndist.plot.hist()\n\n                                                \n\n\n- 속력을 계산\n\n(dist / df.trip_duration).plot.hist()"
  },
  {
    "objectID": "posts/12wk-1.html#e.-df_feature-생성",
    "href": "posts/12wk-1.html#e.-df_feature-생성",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "E. df_feature 생성",
    "text": "E. df_feature 생성\n\ndf.columns\n\nIndex(['id', 'vendor_id', 'pickup_datetime', 'dropoff_datetime',\n       'passenger_count', 'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n       'trip_duration'],\n      dtype='object')\n\n\n\ndf_feature = df.assign(\n    log_trip_duration = np.log(df.trip_duration),\n    pickup_datetime = df.pickup_datetime.apply(pd.to_datetime),\n    dropoff_datetime = df.dropoff_datetime.apply(pd.to_datetime),\n    dist = np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),\n    #---#\n    vendor_id = df.vendor_id.map({1:'A',2:'B'})\n).assign(\n    pickup_hour = lambda df: df.pickup_datetime.dt.hour,\n    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,\n    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek,\n    speed = lambda df: df.dist/df.trip_duration,\n)\n\n\ndf_feature.head()\n\n\n\n\n\n\n\n\nid\nvendor_id\npickup_datetime\ndropoff_datetime\npassenger_count\npickup_longitude\npickup_latitude\ndropoff_longitude\ndropoff_latitude\nstore_and_fwd_flag\ntrip_duration\nlog_trip_duration\ndist\npickup_hour\ndropoff_hour\ndayofweek\nspeed\n\n\n\n\n0\nid2875421\nB\n2016-03-14 17:24:55\n2016-03-14 17:32:30\n1\n-73.982155\n40.767937\n-73.964630\n40.765602\nN\n455\n6.120297\n0.017680\n17\n17\n0\n0.000039\n\n\n1\nid3194108\nA\n2016-06-01 11:48:41\n2016-06-01 12:19:07\n1\n-74.005028\n40.746452\n-73.972008\n40.745781\nN\n1826\n7.509883\n0.033027\n11\n12\n2\n0.000018\n\n\n2\nid3564028\nA\n2016-01-02 01:16:42\n2016-01-02 01:19:56\n1\n-73.954132\n40.774784\n-73.947418\n40.779633\nN\n194\n5.267858\n0.008282\n1\n1\n5\n0.000043\n\n\n3\nid1660823\nB\n2016-03-01 06:40:18\n2016-03-01 07:01:37\n5\n-73.982140\n40.775326\n-74.009850\n40.721699\nN\n1279\n7.153834\n0.060363\n6\n7\n1\n0.000047\n\n\n4\nid1575277\nB\n2016-06-11 16:59:15\n2016-06-11 17:33:27\n1\n-73.999229\n40.722881\n-73.982880\n40.778297\nN\n2052\n7.626570\n0.057778\n16\n17\n5\n0.000028"
  },
  {
    "objectID": "posts/12wk-1.html#a.-scatter-scatter_mapbox",
    "href": "posts/12wk-1.html#a.-scatter-scatter_mapbox",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "A. scatter (scatter_mapbox)",
    "text": "A. scatter (scatter_mapbox)\n\nfig = px.scatter_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.update_traces(\n    marker = {\n        'size':2, \n    }\n)\nfig.show(config={'scrollZoom':False})"
  },
  {
    "objectID": "posts/12wk-1.html#b.-density-density_mapbox",
    "href": "posts/12wk-1.html#b.-density-density_mapbox",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "B. density (density_mapbox)",
    "text": "B. density (density_mapbox)\n\nfig = px.density_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    radius=1,\n    center = {'lat':40.7322, 'lon':-73.9052},\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.show(config={'scrollZoom':False})"
  },
  {
    "objectID": "posts/12wk-1.html#a.-density-passenger_count",
    "href": "posts/12wk-1.html#a.-density-passenger_count",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "A. density + passenger_count",
    "text": "A. density + passenger_count\n\nfig = px.density_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    radius=1.5,\n    center = {'lat':40.7322, 'lon':-73.9052},\n    z = 'passenger_count',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n이것은 density만을 plot한것과 큰 차이가 없어보임.\n따라서 특정지역에 더 대형손님(2명이상)이 타는 경향이 있다고 보기 어렵다."
  },
  {
    "objectID": "posts/12wk-1.html#b.-density-log_trip_duration",
    "href": "posts/12wk-1.html#b.-density-log_trip_duration",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "B. density + log_trip_duration",
    "text": "B. density + log_trip_duration\n\nfig = px.density_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    radius=1.5,\n    center = {'lat':40.7322, 'lon':-73.9052},\n    z = 'log_trip_duration',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n이것도 density만을 plot한것과 큰 차이가 없어보임.\n따라서 이 그림상으로는 특정지역에 오랜여행을 하는 손님이 많이 분포한다고 판단하기 어려워 보인다."
  },
  {
    "objectID": "posts/12wk-1.html#c.-density-dist",
    "href": "posts/12wk-1.html#c.-density-dist",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "C. density + dist",
    "text": "C. density + dist\n\nfig = px.density_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    radius=2.5,\n    center = {'lat':40.7322, 'lon':-73.9052},\n    z = 'dist',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n이것도 density만을 plot한것과 차이가 있음.\n시티필드, 포레스트공원에는 확실히 장거리 손님이 많다고 해석됨"
  },
  {
    "objectID": "posts/12wk-1.html#e.-density-speed",
    "href": "posts/12wk-1.html#e.-density-speed",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "E. density + speed",
    "text": "E. density + speed\n\nfig = px.density_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    radius=2.5,\n    center = {'lat':40.7322, 'lon':-73.9052},\n    z = 'speed',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n이것은 density만을 plot한것과 차이가 있음!!\n타임스퀘어, 미드타운의 속도가 낮음을 확인할 수 있음."
  },
  {
    "objectID": "posts/12wk-1.html#d.-scatter-vendor_id",
    "href": "posts/12wk-1.html#d.-scatter-vendor_id",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "D. scatter + vendor_id",
    "text": "D. scatter + vendor_id\n\nfig = px.scatter_mapbox(\n    data_frame = df_feature,\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    color = 'vendor_id',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.update_traces(\n    marker = {\n        'size':2, \n    }\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n업체별로 뚜렷한 차이점은 없음"
  },
  {
    "objectID": "posts/12wk-1.html#e.-scatter-dayofweek",
    "href": "posts/12wk-1.html#e.-scatter-dayofweek",
    "title": "12wk-1: NYCTaxi 자료 분석 (1)",
    "section": "E. scatter + dayofweek",
    "text": "E. scatter + dayofweek\n\nfig = px.scatter_mapbox(\n    data_frame = df_feature.assign(dayofweek = df_feature.dayofweek.astype(str)).sort_values('dayofweek'),\n    lat = 'pickup_latitude',\n    lon = 'pickup_longitude',\n    center = {'lat':40.7322, 'lon':-73.9052},\n    color = 'dayofweek',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=10,\n    width=750,\n    height=600\n)\nfig.update_traces(\n    marker = {\n        'size':3, \n    }\n)\nfig.show(config={'scrollZoom':False})\n\n                                                \n\n\n\n요일별 차이가 있을줄 알았는데, 이 그림으로 파악하기에는 요일별 차이가 있어보이진 않는다."
  },
  {
    "objectID": "posts/11wk-2.html#a.-데이터-불러오기",
    "href": "posts/11wk-2.html#a.-데이터-불러오기",
    "title": "11wk-2: Choropleth (plotly)",
    "section": "A. 데이터 불러오기",
    "text": "A. 데이터 불러오기\n\nglobal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)\nlocal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)\n#--#\nurl = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'\nprov = ['Seoul', 'Busan', 'Daegu', 'Incheon', \n        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', \n        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', \n        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', \n        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\ndf = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\\\n.assign(년도 = lambda df: df.년도.astype(int))\\\n.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\\\n.reset_index()\ndf.head()\n\n/tmp/ipykernel_191681/712135142.py:12: FutureWarning:\n\nDataFrame.applymap has been deprecated. Use DataFrame.map instead.\n\n\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\n\n\n\n\n0\n2018\nSeoul\n종로구\n17929\n9141777\n64818\n82015\n111\n\n\n1\n2018\nSeoul\n중구\n10598\n10056233\n81672\n75260\n563\n\n\n2\n2018\nSeoul\n용산구\n17201\n10639652\n52659\n85220\n12043\n\n\n3\n2018\nSeoul\n성동구\n14180\n11631770\n60559\n107416\n0\n\n\n4\n2018\nSeoul\n광진구\n21520\n12054796\n70609\n130308\n0"
  },
  {
    "objectID": "posts/11wk-2.html#b.-데이터정리",
    "href": "posts/11wk-2.html#b.-데이터정리",
    "title": "11wk-2: Choropleth (plotly)",
    "section": "B. 데이터정리",
    "text": "B. 데이터정리\n(1) global_dict 내의 영어이름과 df의 영어이름이 일치하는지 확인\n\nset(df.시도) == {l['properties']['name_eng'] for l in global_dict['features']}\n\nTrue\n\n\n(2) global_dict내의 영어이름과 한글이름을 이용해 변환을 위한 dictionary 생성\n\n{l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']}\n\n{'Seoul': '서울특별시',\n 'Busan': '부산광역시',\n 'Daegu': '대구광역시',\n 'Incheon': '인천광역시',\n 'Gwangju': '광주광역시',\n 'Daejeon': '대전광역시',\n 'Ulsan': '울산광역시',\n 'Sejongsi': '세종특별자치시',\n 'Gyeonggi-do': '경기도',\n 'Gangwon-do': '강원도',\n 'Chungcheongbuk-do': '충청북도',\n 'Chungcheongnam-do': '충청남도',\n 'Jeollabuk-do': '전라북도',\n 'Jeollanam-do': '전라남도',\n 'Gyeongsangbuk-do': '경상북도',\n 'Gyeongsangnam-do': '경상남도',\n 'Jeju-do': '제주특별자치도'}\n\n\n(3) df에 변환을 수행하여 영어지명을 한글지명으로 변환\n\ndf.assign(\n    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})\n)\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\n\n\n\n\n0\n2018\n서울특별시\n종로구\n17929\n9141777\n64818\n82015\n111\n\n\n1\n2018\n서울특별시\n중구\n10598\n10056233\n81672\n75260\n563\n\n\n2\n2018\n서울특별시\n용산구\n17201\n10639652\n52659\n85220\n12043\n\n\n3\n2018\n서울특별시\n성동구\n14180\n11631770\n60559\n107416\n0\n\n\n4\n2018\n서울특별시\n광진구\n21520\n12054796\n70609\n130308\n0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n2019\n제주특별자치도\n서귀포시\n34729\n7233931\n34641\n1306\n0\n\n\n996\n2020\n제주특별자치도\n제주시\n66504\n19819923\n99212\n22179\n0\n\n\n997\n2020\n제주특별자치도\n서귀포시\n34880\n7330040\n35510\n1639\n0\n\n\n998\n2021\n제주특별자치도\n제주시\n67053\n20275738\n103217\n25689\n0\n\n\n999\n2021\n제주특별자치도\n서귀포시\n35230\n7512206\n37884\n2641\n0\n\n\n\n\n1000 rows × 8 columns\n\n\n\n(4) local_dict와 global_dict의 지명정보를 정리하여 데이터프레임으로 만듦\n# 예비학습\n\npd.DataFrame(\n    [{'X':100,'y':0},\n     {'X':101,'y':1}]\n)    \n\n\n\n\n\n\n\n\nX\ny\n\n\n\n\n0\n100\n0\n\n\n1\n101\n1\n\n\n\n\n\n\n\n#\n\ndf_global = pd.DataFrame([l['properties'] for l in global_dict['features']])\ndf_global\n\n\n\n\n\n\n\n\nname\nbase_year\nname_eng\ncode\n\n\n\n\n0\n서울특별시\n2018\nSeoul\n11\n\n\n1\n부산광역시\n2018\nBusan\n21\n\n\n2\n대구광역시\n2018\nDaegu\n22\n\n\n3\n인천광역시\n2018\nIncheon\n23\n\n\n4\n광주광역시\n2018\nGwangju\n24\n\n\n5\n대전광역시\n2018\nDaejeon\n25\n\n\n6\n울산광역시\n2018\nUlsan\n26\n\n\n7\n세종특별자치시\n2018\nSejongsi\n29\n\n\n8\n경기도\n2018\nGyeonggi-do\n31\n\n\n9\n강원도\n2018\nGangwon-do\n32\n\n\n10\n충청북도\n2018\nChungcheongbuk-do\n33\n\n\n11\n충청남도\n2018\nChungcheongnam-do\n34\n\n\n12\n전라북도\n2018\nJeollabuk-do\n35\n\n\n13\n전라남도\n2018\nJeollanam-do\n36\n\n\n14\n경상북도\n2018\nGyeongsangbuk-do\n37\n\n\n15\n경상남도\n2018\nGyeongsangnam-do\n38\n\n\n16\n제주특별자치도\n2018\nJeju-do\n39\n\n\n\n\n\n\n\n\ndf_local = pd.DataFrame([l['properties'] for l in local_dict['features']])\ndf_local\n\n\n\n\n\n\n\n\nname\nbase_year\nname_eng\ncode\n\n\n\n\n0\n종로구\n2018\nJongno-gu\n11010\n\n\n1\n중구\n2018\nJung-gu\n11020\n\n\n2\n용산구\n2018\nYongsan-gu\n11030\n\n\n3\n성동구\n2018\nSeongdong-gu\n11040\n\n\n4\n광진구\n2018\nGwangjin-gu\n11050\n\n\n...\n...\n...\n...\n...\n\n\n245\n함양군\n2018\nHamyang-gun\n38380\n\n\n246\n거창군\n2018\nGeochang-gun\n38390\n\n\n247\n합천군\n2018\nHapcheon-gun\n38400\n\n\n248\n제주시\n2018\nJeju-si\n39010\n\n\n249\n서귀포시\n2018\nSeogwipo-si\n39020\n\n\n\n\n250 rows × 4 columns\n\n\n\n(5) df_local에서 “전주시완산구”와 같이 정리된 지명들을 “완산구”로 변환\n\ndf_local.set_index('name')\\\n.rename(\n    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)&gt;3)}\n).reset_index()\n\n\n\n\n\n\n\n\nname\nbase_year\nname_eng\ncode\n\n\n\n\n0\n종로구\n2018\nJongno-gu\n11010\n\n\n1\n중구\n2018\nJung-gu\n11020\n\n\n2\n용산구\n2018\nYongsan-gu\n11030\n\n\n3\n성동구\n2018\nSeongdong-gu\n11040\n\n\n4\n광진구\n2018\nGwangjin-gu\n11050\n\n\n...\n...\n...\n...\n...\n\n\n245\n함양군\n2018\nHamyang-gun\n38380\n\n\n246\n거창군\n2018\nGeochang-gun\n38390\n\n\n247\n합천군\n2018\nHapcheon-gun\n38400\n\n\n248\n제주시\n2018\nJeju-si\n39010\n\n\n249\n서귀포시\n2018\nSeogwipo-si\n39020\n\n\n\n\n250 rows × 4 columns\n\n\n\n(6) df_local과 df_global의 정보를 정리하여 merge, 합쳐진 정보를 df_json에 저장\n\ndf_json = df_local.set_index('name')\\\n.rename(\n    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)&gt;3)}\n).reset_index()\\\n.drop(['base_year','name_eng'],axis=1)\\\n.rename({'name':'name_local','code':'code_local'},axis=1)\\\n.assign(code = lambda df: df['code_local'].str[:2])\\\n.merge(df_global.drop(['base_year','name_eng'],axis=1))\ndf_json\n\n\n\n\n\n\n\n\nname_local\ncode_local\ncode\nname\n\n\n\n\n0\n종로구\n11010\n11\n서울특별시\n\n\n1\n중구\n11020\n11\n서울특별시\n\n\n2\n용산구\n11030\n11\n서울특별시\n\n\n3\n성동구\n11040\n11\n서울특별시\n\n\n4\n광진구\n11050\n11\n서울특별시\n\n\n...\n...\n...\n...\n...\n\n\n245\n함양군\n38380\n38\n경상남도\n\n\n246\n거창군\n38390\n38\n경상남도\n\n\n247\n합천군\n38400\n38\n경상남도\n\n\n248\n제주시\n39010\n39\n제주특별자치도\n\n\n249\n서귀포시\n39020\n39\n제주특별자치도\n\n\n\n\n250 rows × 4 columns\n\n\n\n(7) df_json과 df의 정보를 merge하기 위하여 ’서울특별시-종로구’와 같은 형식으로 공통열을 각각 생성. 생성된 공통열의 원소가 일치하는지 비교\n\ndf_left = df.assign(\n    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})\n).assign(on = lambda df: df.시도 + '-' + df.지역)\ndf_left\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\non\n\n\n\n\n0\n2018\n서울특별시\n종로구\n17929\n9141777\n64818\n82015\n111\n서울특별시-종로구\n\n\n1\n2018\n서울특별시\n중구\n10598\n10056233\n81672\n75260\n563\n서울특별시-중구\n\n\n2\n2018\n서울특별시\n용산구\n17201\n10639652\n52659\n85220\n12043\n서울특별시-용산구\n\n\n3\n2018\n서울특별시\n성동구\n14180\n11631770\n60559\n107416\n0\n서울특별시-성동구\n\n\n4\n2018\n서울특별시\n광진구\n21520\n12054796\n70609\n130308\n0\n서울특별시-광진구\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n2019\n제주특별자치도\n서귀포시\n34729\n7233931\n34641\n1306\n0\n제주특별자치도-서귀포시\n\n\n996\n2020\n제주특별자치도\n제주시\n66504\n19819923\n99212\n22179\n0\n제주특별자치도-제주시\n\n\n997\n2020\n제주특별자치도\n서귀포시\n34880\n7330040\n35510\n1639\n0\n제주특별자치도-서귀포시\n\n\n998\n2021\n제주특별자치도\n제주시\n67053\n20275738\n103217\n25689\n0\n제주특별자치도-제주시\n\n\n999\n2021\n제주특별자치도\n서귀포시\n35230\n7512206\n37884\n2641\n0\n제주특별자치도-서귀포시\n\n\n\n\n1000 rows × 9 columns\n\n\n\n\ndf_right = df_json.assign(on = lambda df: df.name + '-' + df.name_local)\\\n.drop(['name_local','name'],axis=1)\ndf_right\n\n\n\n\n\n\n\n\ncode_local\ncode\non\n\n\n\n\n0\n11010\n11\n서울특별시-종로구\n\n\n1\n11020\n11\n서울특별시-중구\n\n\n2\n11030\n11\n서울특별시-용산구\n\n\n3\n11040\n11\n서울특별시-성동구\n\n\n4\n11050\n11\n서울특별시-광진구\n\n\n...\n...\n...\n...\n\n\n245\n38380\n38\n경상남도-함양군\n\n\n246\n38390\n38\n경상남도-거창군\n\n\n247\n38400\n38\n경상남도-합천군\n\n\n248\n39010\n39\n제주특별자치도-제주시\n\n\n249\n39020\n39\n제주특별자치도-서귀포시\n\n\n\n\n250 rows × 3 columns\n\n\n\n\nset(df_left.on) == set(df_right.on)\n\nFalse\n\n\n\nset(df_right.on) - set(df_left.on)\n\n{'인천광역시-남구'}\n\n\n\nset(df_left.on) - set(df_right.on)\n\n{'인천광역시-미추홀구'}\n\n\n(8) 아래의 기사를 살펴보고 지역명을 적절히 변환\n\n\nhttps://www.hani.co.kr/arti/area/area_general/834359.html\n\n\ndf_right.set_index('on')\\\n.rename({'인천광역시-남구':'인천광역시-미추홀구'})\\\n.reset_index()\n\n\n\n\n\n\n\n\non\ncode_local\ncode\n\n\n\n\n0\n서울특별시-종로구\n11010\n11\n\n\n1\n서울특별시-중구\n11020\n11\n\n\n2\n서울특별시-용산구\n11030\n11\n\n\n3\n서울특별시-성동구\n11040\n11\n\n\n4\n서울특별시-광진구\n11050\n11\n\n\n...\n...\n...\n...\n\n\n245\n경상남도-함양군\n38380\n38\n\n\n246\n경상남도-거창군\n38390\n38\n\n\n247\n경상남도-합천군\n38400\n38\n\n\n248\n제주특별자치도-제주시\n39010\n39\n\n\n249\n제주특별자치도-서귀포시\n39020\n39\n\n\n\n\n250 rows × 3 columns\n\n\n\n(9) 데이터프레임을 결합\n\ndf2 = df_left.merge(\n    df_right.set_index('on')\\\n    .rename({'인천광역시-남구':'인천광역시-미추홀구'})\\\n    .reset_index()\n).drop(['on'],axis=1)"
  },
  {
    "objectID": "posts/11wk-2.html#c.-시각화-2018년도-전기에너지-사용량",
    "href": "posts/11wk-2.html#c.-시각화-2018년도-전기에너지-사용량",
    "title": "11wk-2: Choropleth (plotly)",
    "section": "C. 시각화 (2018년도 전기에너지 사용량)",
    "text": "C. 시각화 (2018년도 전기에너지 사용량)\n\ndf2\n\n\n\n\n\n\n\n\n년도\n시도\n지역\n건물동수\n연면적\n에너지사용량(TOE)/전기\n에너지사용량(TOE)/도시가스\n에너지사용량(TOE)/지역난방\ncode_local\ncode\n\n\n\n\n0\n2018\n서울특별시\n종로구\n17929\n9141777\n64818\n82015\n111\n11010\n11\n\n\n1\n2019\n서울특별시\n종로구\n17851\n9204140\n63492\n76653\n799\n11010\n11\n\n\n2\n2020\n서울특별시\n종로구\n17638\n9148895\n60123\n71263\n912\n11010\n11\n\n\n3\n2021\n서울특별시\n종로구\n22845\n18551145\n125179\n117061\n0\n11010\n11\n\n\n4\n2018\n서울특별시\n중구\n10598\n10056233\n81672\n75260\n563\n11020\n11\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\n2021\n제주특별자치도\n제주시\n67053\n20275738\n103217\n25689\n0\n39010\n39\n\n\n996\n2018\n제주특별자치도\n서귀포시\n34154\n6914685\n34470\n1597\n0\n39020\n39\n\n\n997\n2019\n제주특별자치도\n서귀포시\n34729\n7233931\n34641\n1306\n0\n39020\n39\n\n\n998\n2020\n제주특별자치도\n서귀포시\n34880\n7330040\n35510\n1639\n0\n39020\n39\n\n\n999\n2021\n제주특별자치도\n서귀포시\n35230\n7512206\n37884\n2641\n0\n39020\n39\n\n\n\n\n1000 rows × 10 columns\n\n\n\n\npx.choropleth_mapbox(\n    geojson = local_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2.query('년도 == 2018'),\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    center={\"lat\": 36, \"lon\": 127.5}, \n    zoom=6,\n    height=800,\n    width=800    \n)"
  },
  {
    "objectID": "posts/11wk-2.html#d.-시각화-20182021년도-전기에너지-사용량",
    "href": "posts/11wk-2.html#d.-시각화-20182021년도-전기에너지-사용량",
    "title": "11wk-2: Choropleth (plotly)",
    "section": "D. 시각화 (2018~2021년도 전기에너지 사용량)",
    "text": "D. 시각화 (2018~2021년도 전기에너지 사용량)\n\nseoul_dict = local_dict.copy() \nseoul_dict['features'] = [l for l in seoul_dict['features'] if l['properties']['code'][:2] == '11']\n\n\npx.choropleth_mapbox(\n    geojson = seoul_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2,\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    animation_frame= '년도',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    range_color = [0,400000],\n    center={\"lat\": 37.5642135, \"lon\": 127.0016985},\n    zoom=9,\n    height=500,\n    width=700    \n)"
  }
]