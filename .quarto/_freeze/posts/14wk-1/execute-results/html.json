{
  "hash": "1e3463f475631480169d8188f714903a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"14wk-1: Quarto -- 대시보드 만들기\"\nauthor: \"최규빈\"\ndate: \"12/04/2023\"\ndraft: false\ncategories:\n  - plotly\n---\n\n# 1. 강의영상 \n\n::: {#21f55218-b38e-40d8-aa99-db10dd823cff .cell execution_count=1}\n``` {.python .cell-code}\npass\n```\n:::\n\n\n# 2. 시각화수업 강의계획\n\n`-` 다양한 욕망(=목표)이 결합된 수업\n\n**통계학과**\n\n- 키워드: 탐색적 자료분석 \n- 예시: 성별 타이타닉 생존자 수 시각화 \n- 목표: 데이터를 해석하고 분석하는 능력 (데이터의 해석에 관심이 있다, 상관관계/신뢰구간/잔차분석/등..) \n- 특징: 그려놓고 해석을 함 (qqplot) + 통계적 처리를 해서 그림 (신뢰구간 등)\n- 툴: R, Python \n- 필수요소: 그림을 그릴 줄 알아야 함 (코딩능력) + 그림을 해석할 줄 알아야 함 (=데이터를 읽을 줄 알아야함) \n- 수업범위: 파이썬/R 문법 리뷰 -> EDA -> 특이한 자료 시각화 (지리정보) \n- 칭찬: 데이터를 보고 어떻게 이런 인사이트를 얻었냐? // 남들이 보지 못하는 (=다른학과에서 접근하기 어려운) 통계적 의미를 해석해야함!! \n\n\n> 통계학과에서만 관심있을까??\n\n\n**컴퓨터공학과(산공)**\n\n- 키워드: 웹, 플랫폼 (크롤링+시각화 플랫폼, 시각화결과를 웹으로 배포)\n- 예시: 코로나19 대시보드 (통계분석이 딱히 들어가진 않는 경우도 많음) \n- 목표: 시각화 플랫폼 개발 / 시각화 앱을 개발 / 대시보드 설계(배포에 관심이 있음) -- 내가 만든 시각화를 외부로 배포하여 핸드폰으로도 보고, 패드로도 보고.. \n- 특징: 인터렉티브 그래프, 움직이는 시각화 (애니메이션) \n- 툴: 자바스크립트, 장고 \n- 필수요소: 코딩능력 + 배포 (이게 중요함) \n- 수업범위: 여러가지 문법 리뷰 + 웹/플랫폼 + 대시보드 (학기말 프로젝트) \n- 칭찬: 우와 막 움직여 신기해!! 어떻게 이런 앱을 만들었어? \n\n**시각디자인**\n\n- 키워드: 인포그래픽 (커피소비량, 팜플렛 느낌?) \n- 예시: [커피소비량](https://m.blog.naver.com/hello_health/220946825245), \n- 목표: 인상적이고 기억엔 남는 그림, 예쁜그림, 눈이 잘 인식하는 그림, \n- 특징: 예뻐요.. (+ 터프티 교수님이 경기 일으킬듯한 그림)\n- 툴: 일러스트레이터 \n- 필수요소: 일러와 같은 그래픽툴을 잘써야 함 + 미적 센스?? \n- 수업범위: 색이론(색의 배합, 보색등), 인지이론 --> 일러실습? \n- 칭찬: 어떻게 이런 예쁜그림을 그렸어? 색상도 좋고, 눈에 잘들어와! \n\n**학원(패스트캠퍼스)**\n\n- 키워드: 공모전.. 실무.. \n- 예시: 데이터시각화 공모전 \n- 목표: 좋은 직장에 갈 수 있는 시각화 기술, 직장에서 인정받는 시각화 기술\n- 특징: 배우기 쉬움, (해석X, 코딩X, 디자인툴X) + 엑셀상위호한 (빠르고 간단히)\n- 툴: Power BI, 태블로 \n- 필수요소: PowerBI, 태블로를 능숙하게 쓸 수 있는 능력 \n- 수업범위: PowerBI, 태블로 \n- 안하는 이유: 유료 (회사에 따라 매우 불리할 수도 있음) / 대학에서 다룰 내용은 아닌듯 \n\n\n\n`-` 우리수업의 목표 \n\n- 그림을 읽는 능력, 데이터를 올바르게 해석하는 능력 // 통계학과 주력무기 \n- 파이썬이용 + 매우 높은 숙련도 // 안그러면 태블로계열로 공부한 친구들에게 너무 밀려요\n- 기본적인 미적교양 (aes의 선택, 터프티와 나이젤홈즈, 훌륭한 시각화) \n- 반응형플랏, 대시보드, 지리정보시각화 // 못하면 IT계열의 학과에게 밀려요.. \n\n# 3. 대시보드 만들기\n\n## A. 깃헙계정 가입하기 \n\n`-` <https://github.com/>\n\n## B. 깃헙레포지토리 \n\n`-` 깃헙 레포지토리 만들기 \n\n## C. 깃헙레포지토리와 서버컴퓨터의 연결 \n\n`-` clone \n\n```bash\ngit clone <레포지토리주소>\n```\n\n파일들이 잘 있는지 확인 \n\n`-` 토큰생성 및 저장\n\n아래의 주소로 접속하여 \n\n<https://github.com/settings/tokens>\n\n토큰을 생성한다. 토큰이 생성되면 토큰을 복사한뒤 저장한다. \n\n`-` push \n\n레포지토리내의 README.md 파일을 수정해보고 아래를 입력 \n\n```bash\ngit add .\ngit commit -m .\ngit push \n```\n\n이후에 유저이름 입력하고 비밀번호는 복사해둔 토큰을 사용한다. 깃헙에 제대로 업로드 되었는지 확인한다. \n\n## D. 배포\n\nref: <https://quarto.org/docs/dashboards/>\n\nref: <https://quarto.org/docs/publishing/github-pages.html>\n\n`-` 클론한 레포지토리에서 `_quarto.yml`파일을 만들고 아래를 입력 \n\n```{.bash filename=\"quarto.yml\"}\nproject:\n  type: website\n  output-dir: docs\n```\n\n`-` 클론한 레포지토리에 `Energy.qmd` 파일을 생성하고 아래의 내용을 복사.  \n\n\n:::{.callout-note}\n---\ntitle: \"에너지사용량 자료 분석\"\nauthor: \"본인이름~\"\nformat: dashboard\nexecute: \n  enabled: true\n  cache: false\n  freeze: false\n  error: true\n---\n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nimport json\nimport requests\n\npd.options.plotting.backend = \"plotly\"\npio.templates.default = \"plotly_white\"\n\nglobal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)\nlocal_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)\n#--#\nurl = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'\nprov = ['Seoul', 'Busan', 'Daegu', 'Incheon', \n        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', \n        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', \n        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', \n        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']\ndf = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\\\n.assign(년도 = lambda df: df.년도.astype(int))\\\n.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\\\n.reset_index()\ndf_global = pd.DataFrame([l['properties'] for l in global_dict['features']])\ndf_local = pd.DataFrame([l['properties'] for l in local_dict['features']])\ndf_json = df_local.set_index('name')\\\n.rename(\n    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)>3)}\n).reset_index()\\\n.drop(['base_year','name_eng'],axis=1)\\\n.rename({'name':'name_local','code':'code_local'},axis=1)\\\n.assign(code = lambda df: df['code_local'].str[:2])\\\n.merge(df_global.drop(['base_year','name_eng'],axis=1))\ndf_left = df.assign(\n    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})\n).assign(on = lambda df: df.시도 + '-' + df.지역)\ndf_right = df_json.assign(on = lambda df: df.name + '-' + df.name_local)\\\n.drop(['name_local','name'],axis=1)\ndf2 = df_left.merge(\n    df_right.set_index('on')\\\n    .rename({'인천광역시-남구':'인천광역시-미추홀구'})\\\n    .reset_index()\n).drop(['on'],axis=1)\n```\n\n# 데이터탐색\n\n```{python}\n#| title: 에너지사용량 자료 \nimport itables \nitables.show(df2,showIndex=False)\n```\n\n# 시각화 {orientation=\"columns\" scrolling=\"true\"}\n\n## Column {width=50%}\n\n```{python}\n#| title: 2018년도 전기사용량 (전국)\nfig = px.choropleth_mapbox(\n    geojson = local_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2.query('년도 == 2018'),\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    range_color = [0,200000],\n    center={\"lat\": 36, \"lon\": 127.5}, \n    zoom=6,\n)\nfig.show(config={'scrollZoom':False})\n```\n\n## Column {width=50%}\n\n```{python}\n#| title: 2018~2019년도 전기사용량 (서울)\nseoul_dict = local_dict.copy() \nseoul_dict['features'] = [l for l in seoul_dict['features'] if l['properties']['code'][:2] == '11']\nfig = px.choropleth_mapbox(\n    geojson = seoul_dict,\n    featureidkey = 'properties.code',\n    data_frame = df2,\n    locations = 'code_local',\n    color = '에너지사용량(TOE)/전기',\n    animation_frame= '년도',\n    hover_data = ['시도','지역'],\n    #---#\n    mapbox_style=\"carto-positron\",\n    range_color = [0,400000],\n    center={\"lat\": 37.5642135, \"lon\": 127.0016985},\n    zoom=9,\n)\nfig.show(config={'scrollZoom':False})\n```\n\n```{python}\n#| title: 2018~2019년도 에너지사용량 (전국)\nfig = df2.drop(['code_local','code'],axis=1)\\\n.set_index(['년도','시도','지역','건물동수','연면적']).stack().reset_index()\\\n.rename({'level_5':'에너지종류', 0:'에너지사용량'},axis=1)\\\n.assign(에너지종류 = lambda df: df['에너지종류'].str.split('/').str[-1])\\\n.groupby(['년도','시도','에너지종류']).agg({'에너지사용량':'sum'})\\\n.stack().reset_index()\\\n.rename({0:'에너지사용량'},axis=1)\\\n.plot.area(\n    x='년도',y='에너지사용량',\n    color='시도',\n    facet_col='에너지종류'\n)\nfig.update_layout(\n    xaxis_domain=[0.0, 0.25],\n    xaxis2_domain=[0.35, 0.60],\n    xaxis3_domain=[0.70, 0.95]\n)\n```\n:::\n\n`-` 터미널에서 아래를 입력\n\n```bash\nquarto render Energy.qmd \n```\n\n`-` local에 docs폴더 밑에 어떠한 파일들이 생성됨. 클릭해서 확인. 이 파일들을 github으로 push \n\n```bash\ngit add .\ngit commit -m .\ngit push \n```\n\n`-` 아래와 같이 `Settings` >` Pages` > `Build and deployment` > `Brach` 에서 경로를 `main/docs`로 변경하고 save \n\n![](14wk-1_files/figure-html/fe579dd8-8d98-441c-9617-f78ea66cfbec-1-e9be2fd5-a9b4-4d73-ba34-b3e5ae6dc66c.png)\n\n# Appendix: 코드 훔치기\n\n<https://jjallaire.github.io/gapminder-dashboard/>\n\n위와 같은 꼴의 홈페이지에서 github username은 `jjallaire` 그리고 레포지토리 이름은 `gapminder-dashboard` 이다. 따라서 이 레포지토리의 주소는 아래와 같을 것이다. \n\n<https://github.com/jjallaire/gapminder-dashboard>\n\n접속을 해보면 대응하는 레포지토리가 있고 코드도 있다. 이런걸 잘 보고 베끼면 유용하다. \n\n",
    "supporting": [
      "14wk-1_files"
    ],
    "filters": [],
    "includes": {}
  }
}